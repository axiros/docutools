name: ci

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

defaults:
  run:
    shell: bash

env:
  LANG: "en_US.utf-8"
  LC_ALL: "en_US.utf-8"
  POETRY_VIRTUALENVS_IN_PROJECT: "true"
  PYTHONIOENCODING: "UTF-8"

jobs:
  quality:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set up Python 3.6
        uses: actions/setup-python@v1
        with:
          python-version: 3.8

      - name: Set up the cache
        uses: actions/cache@v1
        with:
          path: .venv
          key: cache-python-packages-2

      - name: Set up the project
        run: |
          pip install poetry safety
          poetry install -v

      - name: Check if the documentation builds correctly
        run: poetry run duty check-docs

      - name: Check the code quality
        run: poetry run duty check-code-quality

      - name: Check if the code is correctly typed
        run: poetry run duty check-types

      - name: Check for vulnerabilities in dependencies
        run: poetry run duty check-dependencies

  tests:
    strategy:
      max-parallel: 6
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: [3.6, 3.7, 3.8]

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}

      - name: Set up the cache
        uses: actions/cache@v1
        env:
          cache-name: cache-python-packages
        with:
          path: .venv
          key: ${{ matrix.os }}-${{ matrix.python-version }}-${{ env.cache-name }}-2

      - name: Set up the project
        run: |
          pip install poetry
          poetry install -v

      - name: Run the test suite
        run: poetry run duty test
