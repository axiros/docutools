{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"[data-md-color-scheme=\"slate\"] .featherlight .featherlight-content { background: #2e303e; } [data-md-color-scheme=\"slate\"] .featherlight .featherlight-close-icon { background: rgba(255,255,255,.3); color: #fff; } .featherlight .featherlight-content { min-width: 60% !important; } function next_elmt_into_lightbox(id, event) { let btn=document.getElementById(id); let parent = btn.parentNode; function flclose(event) { let c = this.$content[0]; $(parent).after(c); } let el = parent.nextElementSibling; $.featherlight({jquery: el, persist: true, beforeClose: flclose}) } .button-lightbox { color: var(--md-default-fg-color--lighter); }.button-lightbox:hover { color: var(--md-default-fg-color--light); } @media only screen and (min-width: 76.25em) { .md-main__inner { max-width: none; } .md-sidebar--primary { left: 0; } .md-sidebar--secondary { right: 0; margin-left: 0; -webkit-transform: none; transform: none; } } docutools \u00a4 MkDocs Documentation Tools For Developers \u00a4 This repo is providing a set of plugins for mkdocs material compatible documentation. It is meant to be used as a development dependency for projects, intended to be used mainly by the developers themselves, i.e. for the more technical, code centric parts of software project documentation. Most notable feature: Literate Programming , i.e. dynamic code execution - tightly integrated within the mkdocs framework. Most plugins should work in other mkdocs themes as well. No guarantees though. Feature Gallery \u00a4 bash bash bash call_flow_logging call_flow_logging chart chartist column comments convert convert cov_report data_table diag_diagram drawio find-pages flowchart git_changelog kroki kroki lightbox lprunner make_badges markmap md-replace md-replace mermaid page-tree project_dependencies python screenshot stats xterm @media only screen and (min-width: 76.25em) { .odd { background-color: var(--md-code-bg-color);} .md-main__inner { max-width: none; } .md-sidebar--primary { left: 0; width: 0; } .md-sidebar--secondary { right: 0; width: 0; margin-left: 0; -webkit-transform: none; transform: none; } } General Questions and Feature Requests Last modified: Mon, 11 Apr 2022 14h GMT var scr = document.createElement('script'); scr.setAttribute('src','https://utteranc.es/client.js'); scr.setAttribute('repo','axiros/docutools'); scr.setAttribute('issue-term','pathname'); scr.setAttribute('theme','github-dark'); scr.setAttribute('crossorigin','anonymous'); document.getElementById('utterance_comments').appendChild(scr); .utterances {max-width: 100% !important} $('#gallery img').featherlightGallery({ nextIcon: '\u00bb', previousIcon: '\u00ab', openSpeed: 300, galleryFadeIn: 300, targetAttr: 'src' }); $('#gallery img').css('cursor', 'zoom-in'); typeof start_lc === \"undefined\" ? 0 : start_lc()","title":"Overview"},{"location":"#docutools","text":"","title":"docutools"},{"location":"#mkdocs-documentation-tools-for-developers","text":"This repo is providing a set of plugins for mkdocs material compatible documentation. It is meant to be used as a development dependency for projects, intended to be used mainly by the developers themselves, i.e. for the more technical, code centric parts of software project documentation. Most notable feature: Literate Programming , i.e. dynamic code execution - tightly integrated within the mkdocs framework. Most plugins should work in other mkdocs themes as well. No guarantees though.","title":"MkDocs Documentation Tools For Developers"},{"location":"#feature-gallery","text":"bash bash bash call_flow_logging call_flow_logging chart chartist column comments convert convert cov_report data_table diag_diagram drawio find-pages flowchart git_changelog kroki kroki lightbox lprunner make_badges markmap md-replace md-replace mermaid page-tree project_dependencies python screenshot stats xterm @media only screen and (min-width: 76.25em) { .odd { background-color: var(--md-code-bg-color);} .md-main__inner { max-width: none; } .md-sidebar--primary { left: 0; width: 0; } .md-sidebar--secondary { right: 0; width: 0; margin-left: 0; -webkit-transform: none; transform: none; } } General Questions and Feature Requests Last modified: Mon, 11 Apr 2022 14h GMT var scr = document.createElement('script'); scr.setAttribute('src','https://utteranc.es/client.js'); scr.setAttribute('repo','axiros/docutools'); scr.setAttribute('issue-term','pathname'); scr.setAttribute('theme','github-dark'); scr.setAttribute('crossorigin','anonymous'); document.getElementById('utterance_comments').appendChild(scr); .utterances {max-width: 100% !important} $('#gallery img').featherlightGallery({ nextIcon: '\u00bb', previousIcon: '\u00ab', openSpeed: 300, galleryFadeIn: 300, targetAttr: 'src' }); $('#gallery img').css('cursor', 'zoom-in'); typeof start_lc === \"undefined\" ? 0 : start_lc()","title":"Feature Gallery"},{"location":"conda/","text":"@media only screen and (min-width: 76.25em) { .md-main__inner { max-width: none; } .md-sidebar--primary { left: 0; } .md-sidebar--secondary { right: 0; margin-left: 0; -webkit-transform: none; transform: none; } } About Conda \u00a4 Docutools (and other projects which use the docutools task runner) are using conda as environment for required packages. Here is why. Conda allows to have python and non python binaries installed distribution independent under an arbitrary prefix , self contained, i.e.: transferable between systems of the same architecture cacheable (e.g. in a CI pipeline) mountable (e.g. into container images) have those installable as non root user. All is under one path prefix, definable at install (not build) time. Language specific virtual environments are fully supported: Python itself is just a conda binary like any other, subsequently allowing to use pip within a conda environment - as well as e.g. npm for javascript dependencies. Homebrew \"on Steroids\" \u00a4 Conda is more like homebrew than it is like pip, but w/o the hard dependency on /usr/local/bin - incl. the permissions hassle. Means, you can have many homebrew trees, per user, within one filesystem. Mechanics They achieve this not by going the huge \"all in\" (static binaries) way but by replacing placeholders in the executables and libs with the actual prefix at install time. Tradeoffs: \u00a4 installs are requiring more time - conda environments are not meant to be created at every test run but rather cached or present on your \"pet systems\". their binaries may not be as well security maintained as the packages of a major Linux distribution (which you have to install as root, using e.g. rpm or apt-get). Their packages typically closely follow upstream. typeof start_lc === \"undefined\" ? 0 : start_lc()","title":"About Conda"},{"location":"conda/#about-conda","text":"Docutools (and other projects which use the docutools task runner) are using conda as environment for required packages. Here is why. Conda allows to have python and non python binaries installed distribution independent under an arbitrary prefix , self contained, i.e.: transferable between systems of the same architecture cacheable (e.g. in a CI pipeline) mountable (e.g. into container images) have those installable as non root user. All is under one path prefix, definable at install (not build) time. Language specific virtual environments are fully supported: Python itself is just a conda binary like any other, subsequently allowing to use pip within a conda environment - as well as e.g. npm for javascript dependencies.","title":"About Conda"},{"location":"conda/#homebrew-on-steroids","text":"Conda is more like homebrew than it is like pip, but w/o the hard dependency on /usr/local/bin - incl. the permissions hassle. Means, you can have many homebrew trees, per user, within one filesystem. Mechanics They achieve this not by going the huge \"all in\" (static binaries) way but by replacing placeholders in the executables and libs with the actual prefix at install time.","title":"Homebrew \"on Steroids\""},{"location":"conda/#tradeoffs","text":"installs are requiring more time - conda environments are not meant to be created at every test run but rather cached or present on your \"pet systems\". their binaries may not be as well security maintained as the packages of a major Linux distribution (which you have to install as root, using e.g. rpm or apt-get). Their packages typically closely follow upstream. typeof start_lc === \"undefined\" ? 0 : start_lc()","title":"Tradeoffs:"},{"location":"dev_install/","text":"@media only screen and (min-width: 76.25em) { .md-main__inner { max-width: none; } .md-sidebar--primary { left: 0; } .md-sidebar--secondary { right: 0; margin-left: 0; -webkit-transform: none; transform: none; } } Development Installation \u00a4 When you want to use docutools within your project, in order to generate documentation for it: Add docutools = \"^<version>\" as a development dependency , e.g. within a pyproject.toml file. Some environment variables are required for specific features Adapt your mkdocs.yml file for the plugins you want to use. We do not interfere with any custom css or js. typeof start_lc === \"undefined\" ? 0 : start_lc()","title":"Development Installation"},{"location":"dev_install/#development-installation","text":"When you want to use docutools within your project, in order to generate documentation for it: Add docutools = \"^<version>\" as a development dependency , e.g. within a pyproject.toml file. Some environment variables are required for specific features Adapt your mkdocs.yml file for the plugins you want to use. We do not interfere with any custom css or js. typeof start_lc === \"undefined\" ? 0 : start_lc()","title":"Development Installation"},{"location":"install/","text":"@media only screen and (min-width: 76.25em) { .md-main__inner { max-width: none; } .md-sidebar--primary { left: 0; } .md-sidebar--secondary { right: 0; margin-left: 0; -webkit-transform: none; transform: none; } } Installation \u00a4 Installing docutools as a non development dependency makes not much sense: The toolset is intended for generating documentation while/after developing. Means: You want a Development Installation : Add docutools = \"^<version>\" as a development dependency, e.g. within a pyproject.toml file. Airtight Environment \u00a4 (\"airtight\"=no Internet access) Configure the package server in your build framework (e.g. poetry like this ). Note Some features do require CDN hosted javascript and CSS libs, pulled by the browsers of the readers - e.g. jquery. typeof start_lc === \"undefined\" ? 0 : start_lc()","title":"Installation"},{"location":"install/#installation","text":"Installing docutools as a non development dependency makes not much sense: The toolset is intended for generating documentation while/after developing. Means: You want a Development Installation : Add docutools = \"^<version>\" as a development dependency, e.g. within a pyproject.toml file.","title":"Installation"},{"location":"install/#airtight-environment","text":"(\"airtight\"=no Internet access) Configure the package server in your build framework (e.g. poetry like this ). Note Some features do require CDN hosted javascript and CSS libs, pulled by the browsers of the readers - e.g. jquery. typeof start_lc === \"undefined\" ? 0 : start_lc()","title":"Airtight Environment"},{"location":"task_runner/","text":"@media only screen and (min-width: 76.25em) { .md-main__inner { max-width: none; } .md-sidebar--primary { left: 0; } .md-sidebar--secondary { right: 0; margin-left: 0; -webkit-transform: none; transform: none; } } Task Runner \u00a4 You may want to use the same task runner within your project than we do. A task runner automates common developer jobs, like starting tests, preparing and running docu, building, releasing (...). docutools ships with its own taskrunner, which is described below. Note If you do not intend to use docutools' taskrunner and to not plan to develop on docutools itself, you may safely skip this chapter. File Organization \u00a4 The task runner's correct functioning is dependent on the presence of the following files and directories: # Generic (project independent) set of functions for common dev tasks # Parametrized by environ and environ.personal files: - make # holds basic project variables, e.g. project name. # Must be sourced before any action. Sources make, activates venv when present - environ # optional typically git-ignored file for personal / secret settings. # sourced by make when present: - environ.personal - mkdocs.yml # mkdocs material config (for make docs) # Parametrizes tools like poetry or pyright. # Holds declared project dependencies: - pyproject.toml - poetry.lock # Created by poetry install/update. Holds fixed dependencies. - scripts/ # directory with helper scripts, used by make (e.g. conda related) and optional hooks - config/ # directory with parametrization for coverage and pytest - tests/ # directory for tests - docs/ # directory for documentation - index.md # autocreated, from running literal programming blocks within md file of same name: - index.md.lp.py - mdreplace.py # parametrizes the docutools markdown replace feature - \"...\" # holds automatically created files, created during test and docu runs # e.g. call flow logs or coverage results - re-useable between docu runs: - build/ - tmp/ # holds temporay files for one docu run The virtual environments created are by default outside of the project directory, by default under a miniconda base environment in users' $HOME . Discussion \u00a4 The task runner is a collection of shell functions for common developer duties, within a sourceable generic file: make and optional project specific hooks The file is generic and can be taken from the docutools repo . The file is parametrized through a set of variables, within this file: environ Additionally, make sources a (typically git-ignored) file, environ.personal when present - for personal settings (e.g. credentials) which you don't want to keep within your repo. docutools' task runner is based on shell functions from within the make file and optional hooks For virtual environment related tasks it currently supports only conda The taskrunner uses conda because we use quite a lot of tooling outside of python. See here , regarding rationale. See the section about hooks below, regarding how to modify that, e.g. in favor of venvs Alternatives \u00a4 A pure python alternative would be e.g. duty . Or use a plain Makefile. Usage \u00a4 Before using any function of make , the environ file must be sourced, so that the basic project parameters are known. Automatic activation on cd For convenience we recommend to source the environ file on cd , within a shell function in your .zshrc or .bashrc . So you can simply cd into the dir and have all ready. # within your .bashrc / .zshrc: function cd { builtin cd \" $@ \" test -f 'environ' && source environ } The environ file sources make and activates the virtual (conda) environment - if already created. Then all functions are available: $ ( source environ && make ) Error: sensitive/axgkl is not in the password store. \u001b[1;32mSourced ./make -a\u001b[0m # Repo Maintenance Functions ## Usage: ./make <function> [args] ## Functions: - ci-conda-py-env # creates the venv for the project and poetry installs - ci-conda-root-env # creates the root conda env if not present yet - ci # Trigger a CI Run by pushing and empty commit - clean - clean-lp-caches - combine_coverage - docs - docs-checklinks - docs-serve - release - self-update - tests ## Function Aliases: d() { make docs \"$@\" ; } ds() { make docs-serve \"$@\" ; } clc() { make clean-lp-caches \"$@\" ; } rel() { make release \"$@\" ; } t() { make tests \"$@\" ; } sm() { source ./make; } # after changes Tip You might add your own functions directly within make (not recommended) or (better) provide them via environ.personal if you want to stay update-able with our version of make . You can run the functions now, via make <function name> . Hooks \u00a4 You may provide project specific hooks for each function run but also for the commands within them - when they are called via the sh function. Conventional hook file name is scripts/<func/cmdname>_<pre|post>.sh , e.g. scripts/poetry_pre.sh scripts/tests_post.sh . Here is an example hook file: ~/repos/mypackage/scripts master \u21e16 \u276f cat poetry_pre.sh \ue73c lc-python_py3.8 #!/usr/bin/env bash publish_to_internal_artifactory () { poetry publish -r axup -u \" $( pass show AX/artifactory_user ) \" -p \" $( pass show AX/artifactory_password ) \" || return 1 # this will cause the main command (poetry publish) to be skipped: return $skip_func_after_hook } remove_symlinked_projects () { # another hook for a poetry action } if [[ \" $1 \" == \"publish\" ]] ; then hookfunc = \"publish_to_internal_artifactory\" ; fi if [[ \" $1 \" == \"build\" ]] ; then hookfunc = \"remove_symlinked_projects\" ; fi From the example you can see that in a \"pre-hook\" you can replace the actual function, via a return code All variables are visible throughout all hooks, since the hooks are sourced, then $hookfunc is run, when set. I.e. you may set a variable in a pre hook and access it within the post hook. typeof start_lc === \"undefined\" ? 0 : start_lc()","title":"Task Runner"},{"location":"task_runner/#task-runner","text":"You may want to use the same task runner within your project than we do. A task runner automates common developer jobs, like starting tests, preparing and running docu, building, releasing (...). docutools ships with its own taskrunner, which is described below. Note If you do not intend to use docutools' taskrunner and to not plan to develop on docutools itself, you may safely skip this chapter.","title":"Task Runner"},{"location":"task_runner/#file-organization","text":"The task runner's correct functioning is dependent on the presence of the following files and directories: # Generic (project independent) set of functions for common dev tasks # Parametrized by environ and environ.personal files: - make # holds basic project variables, e.g. project name. # Must be sourced before any action. Sources make, activates venv when present - environ # optional typically git-ignored file for personal / secret settings. # sourced by make when present: - environ.personal - mkdocs.yml # mkdocs material config (for make docs) # Parametrizes tools like poetry or pyright. # Holds declared project dependencies: - pyproject.toml - poetry.lock # Created by poetry install/update. Holds fixed dependencies. - scripts/ # directory with helper scripts, used by make (e.g. conda related) and optional hooks - config/ # directory with parametrization for coverage and pytest - tests/ # directory for tests - docs/ # directory for documentation - index.md # autocreated, from running literal programming blocks within md file of same name: - index.md.lp.py - mdreplace.py # parametrizes the docutools markdown replace feature - \"...\" # holds automatically created files, created during test and docu runs # e.g. call flow logs or coverage results - re-useable between docu runs: - build/ - tmp/ # holds temporay files for one docu run The virtual environments created are by default outside of the project directory, by default under a miniconda base environment in users' $HOME .","title":"File Organization"},{"location":"task_runner/#discussion","text":"The task runner is a collection of shell functions for common developer duties, within a sourceable generic file: make and optional project specific hooks The file is generic and can be taken from the docutools repo . The file is parametrized through a set of variables, within this file: environ Additionally, make sources a (typically git-ignored) file, environ.personal when present - for personal settings (e.g. credentials) which you don't want to keep within your repo. docutools' task runner is based on shell functions from within the make file and optional hooks For virtual environment related tasks it currently supports only conda The taskrunner uses conda because we use quite a lot of tooling outside of python. See here , regarding rationale. See the section about hooks below, regarding how to modify that, e.g. in favor of venvs","title":"Discussion"},{"location":"task_runner/#alternatives","text":"A pure python alternative would be e.g. duty . Or use a plain Makefile.","title":"Alternatives"},{"location":"task_runner/#usage","text":"Before using any function of make , the environ file must be sourced, so that the basic project parameters are known. Automatic activation on cd For convenience we recommend to source the environ file on cd , within a shell function in your .zshrc or .bashrc . So you can simply cd into the dir and have all ready. # within your .bashrc / .zshrc: function cd { builtin cd \" $@ \" test -f 'environ' && source environ } The environ file sources make and activates the virtual (conda) environment - if already created. Then all functions are available: $ ( source environ && make ) Error: sensitive/axgkl is not in the password store. \u001b[1;32mSourced ./make -a\u001b[0m # Repo Maintenance Functions ## Usage: ./make <function> [args] ## Functions: - ci-conda-py-env # creates the venv for the project and poetry installs - ci-conda-root-env # creates the root conda env if not present yet - ci # Trigger a CI Run by pushing and empty commit - clean - clean-lp-caches - combine_coverage - docs - docs-checklinks - docs-serve - release - self-update - tests ## Function Aliases: d() { make docs \"$@\" ; } ds() { make docs-serve \"$@\" ; } clc() { make clean-lp-caches \"$@\" ; } rel() { make release \"$@\" ; } t() { make tests \"$@\" ; } sm() { source ./make; } # after changes Tip You might add your own functions directly within make (not recommended) or (better) provide them via environ.personal if you want to stay update-able with our version of make . You can run the functions now, via make <function name> .","title":"Usage"},{"location":"task_runner/#hooks","text":"You may provide project specific hooks for each function run but also for the commands within them - when they are called via the sh function. Conventional hook file name is scripts/<func/cmdname>_<pre|post>.sh , e.g. scripts/poetry_pre.sh scripts/tests_post.sh . Here is an example hook file: ~/repos/mypackage/scripts master \u21e16 \u276f cat poetry_pre.sh \ue73c lc-python_py3.8 #!/usr/bin/env bash publish_to_internal_artifactory () { poetry publish -r axup -u \" $( pass show AX/artifactory_user ) \" -p \" $( pass show AX/artifactory_password ) \" || return 1 # this will cause the main command (poetry publish) to be skipped: return $skip_func_after_hook } remove_symlinked_projects () { # another hook for a poetry action } if [[ \" $1 \" == \"publish\" ]] ; then hookfunc = \"publish_to_internal_artifactory\" ; fi if [[ \" $1 \" == \"build\" ]] ; then hookfunc = \"remove_symlinked_projects\" ; fi From the example you can see that in a \"pre-hook\" you can replace the actual function, via a return code All variables are visible throughout all hooks, since the hooks are sourced, then $hookfunc is run, when set. I.e. you may set a variable in a pre hook and access it within the post hook. typeof start_lc === \"undefined\" ? 0 : start_lc()","title":"Hooks"},{"location":"about/changelog/","text":"@media only screen and (min-width: 76.25em) { .md-main__inner { max-width: none; } .md-sidebar--primary { left: 0; } .md-sidebar--secondary { right: 0; margin-left: 0; -webkit-transform: none; transform: none; } } Git Changelog \u00a4 Changelog \u00a4 All notable changes to this project will be documented in this file. The format is based on Keep a Changelog . This project adheres to CalVer Versioning . Unrealeased \u00a4 Compare with latest Features \u00a4 Css.fullwidth, css.width (parametrizable) ( f99874a by Gunther Klessinger). typeof start_lc === \"undefined\" ? 0 : start_lc()","title":"Changelog"},{"location":"about/changelog/#git-changelog","text":"","title":"Git Changelog"},{"location":"about/changelog/#changelog","text":"All notable changes to this project will be documented in this file. The format is based on Keep a Changelog . This project adheres to CalVer Versioning .","title":"Changelog"},{"location":"about/changelog/#unrealeased","text":"Compare with latest","title":"Unrealeased"},{"location":"about/changelog/#features","text":"Css.fullwidth, css.width (parametrizable) ( f99874a by Gunther Klessinger). typeof start_lc === \"undefined\" ? 0 : start_lc()","title":"Features"},{"location":"about/contributing/","text":"@media only screen and (min-width: 76.25em) { .md-main__inner { max-width: none; } .md-sidebar--primary { left: 0; } .md-sidebar--secondary { right: 0; margin-left: 0; -webkit-transform: none; transform: none; } } Contributing \u00a4 Contributions are welcome and appreciated. Tasks \u00a4 Install a development version. Development \u00a4 When you want to add / modify sources, as usual: Clone the repo, maybe checkout the tag you want to work with or create a branch Create and activate a virtual environment with minimum python3.7 poetry install Alternatively, when you like [conda][cond], say make ci-conda-root-env make ci-conda-py-env source environ (see here about mechanics) edit the code and/or the documentation If you updated the documentation or the project dependencies: run make docs_serve (alias: ds ), go to http://localhost:<$mkdocs_port>/ and check that everything looks good Before committing: run make tests to run the tests (fix any issue) run make docs to run the literate programming tests (fix any issue) follow our commit message convention If you are unsure about how to fix or ignore a warning, just let the continuous integration fail, and we will help you during review. Don't bother updating the changelog, we will take care of this. Commit Message Convention \u00a4 Commits messages must follow the Angular style : <type>[(scope)]: Subject [Body] Scope and body are optional. Type can be: build : About packaging, building wheels, etc. chore : About packaging or repo/files management. ci : About Continuous Integration. docs : About documentation. feat : New feature. fix : Bug fix. perf : About performance. refactor : Changes which are not features nor bug fixes. style : A change in code style/format. tests : About tests. Subject (and body) must be valid Markdown. If you write a body, please add issues references at the end: Body. References: #10, #11. Fixes #15. Pull requests guidelines \u00a4 Link to any related issue in the Pull Request message. During review, we recommend using fixups: # SHA is the SHA of the commit you want to fix git commit --fixup = SHA Once all the changes are approved, you can squash your commits: git rebase -i --autosquash master And force-push: git push -f If this seems all too complicated, you can push or force-push each new commit, and we will squash them ourselves if needed, before merging. typeof start_lc === \"undefined\" ? 0 : start_lc()","title":"Contributing"},{"location":"about/contributing/#contributing","text":"Contributions are welcome and appreciated.","title":"Contributing"},{"location":"about/contributing/#tasks","text":"Install a development version.","title":"Tasks"},{"location":"about/contributing/#development","text":"When you want to add / modify sources, as usual: Clone the repo, maybe checkout the tag you want to work with or create a branch Create and activate a virtual environment with minimum python3.7 poetry install Alternatively, when you like [conda][cond], say make ci-conda-root-env make ci-conda-py-env source environ (see here about mechanics) edit the code and/or the documentation If you updated the documentation or the project dependencies: run make docs_serve (alias: ds ), go to http://localhost:<$mkdocs_port>/ and check that everything looks good Before committing: run make tests to run the tests (fix any issue) run make docs to run the literate programming tests (fix any issue) follow our commit message convention If you are unsure about how to fix or ignore a warning, just let the continuous integration fail, and we will help you during review. Don't bother updating the changelog, we will take care of this.","title":"Development"},{"location":"about/contributing/#commit-message-convention","text":"Commits messages must follow the Angular style : <type>[(scope)]: Subject [Body] Scope and body are optional. Type can be: build : About packaging, building wheels, etc. chore : About packaging or repo/files management. ci : About Continuous Integration. docs : About documentation. feat : New feature. fix : Bug fix. perf : About performance. refactor : Changes which are not features nor bug fixes. style : A change in code style/format. tests : About tests. Subject (and body) must be valid Markdown. If you write a body, please add issues references at the end: Body. References: #10, #11. Fixes #15.","title":"Commit Message Convention"},{"location":"about/contributing/#pull-requests-guidelines","text":"Link to any related issue in the Pull Request message. During review, we recommend using fixups: # SHA is the SHA of the commit you want to fix git commit --fixup = SHA Once all the changes are approved, you can squash your commits: git rebase -i --autosquash master And force-push: git push -f If this seems all too complicated, you can push or force-push each new commit, and we will squash them ourselves if needed, before merging. typeof start_lc === \"undefined\" ? 0 : start_lc()","title":"Pull requests guidelines"},{"location":"about/coverage/","text":"[data-md-color-scheme=\"slate\"] .featherlight .featherlight-content { background: #2e303e; } [data-md-color-scheme=\"slate\"] .featherlight .featherlight-close-icon { background: rgba(255,255,255,.3); color: #fff; } .featherlight .featherlight-content { min-width: 60% !important; } function next_elmt_into_lightbox(id, event) { let btn=document.getElementById(id); let parent = btn.parentNode; function flclose(event) { let c = this.$content[0]; $(parent).after(c); } let el = parent.nextElementSibling; $.featherlight({jquery: el, persist: true, beforeClose: flclose}) } .button-lightbox { color: var(--md-default-fg-color--lighter); }.button-lightbox:hover { color: var(--md-default-fg-color--light); } @media only screen and (min-width: 76.25em) { .md-main__inner { max-width: none; } .md-sidebar--primary { left: 0; } .md-sidebar--secondary { right: 0; margin-left: 0; -webkit-transform: none; transform: none; } } Code Coverage \u00a4 Overall \u00a4 .md-main__inner { max-width: none; } article h1, article > a { display: none; } Full Page var coviframe = document.getElementById(\"coviframe_overall\"); function resizeIframe() { coviframe.style.height = coviframe.contentWindow.document.documentElement.offsetHeight + 'px'; } coviframe.contentWindow.document.body.onclick = function() { coviframe.contentWindow.location.reload(); } typeof start_lc === \"undefined\" ? 0 : start_lc()","title":"Coverage"},{"location":"about/coverage/#code-coverage","text":"","title":"Code Coverage"},{"location":"about/coverage/#overall","text":".md-main__inner { max-width: none; } article h1, article > a { display: none; } Full Page var coviframe = document.getElementById(\"coviframe_overall\"); function resizeIframe() { coviframe.style.height = coviframe.contentWindow.document.documentElement.offsetHeight + 'px'; } coviframe.contentWindow.document.body.onclick = function() { coviframe.contentWindow.location.reload(); } typeof start_lc === \"undefined\" ? 0 : start_lc()","title":"Overall"},{"location":"about/credits/","text":"@media only screen and (min-width: 76.25em) { .md-main__inner { max-width: none; } .md-sidebar--primary { left: 0; } .md-sidebar--secondary { right: 0; margin-left: 0; -webkit-transform: none; transform: none; } } Credits \u00a4 Platforms and Frameworks \u00a4 These were used to create docutools: python | poetry | mkdocs | mkdocs-material Run Dependencies \u00a4 Package Description Version License anybadge Simple, flexible badge generator for project badges. 1.9.0 n.a. coverage Code coverage measurement for Python 6.3.2 Apache 2.0 diagrams Diagram as Code 0.21.1 MIT git-changelog Automatic Changelog generator using Jinja2 templates. 0.5.0 n.a. httpx The next generation HTTP client. 0.17.1 BSD imagesize Getting image size from png/jpeg/jpeg2000/gif file 1.3.0 MIT inflection A port of Ruby on Rails inflector to Python 0.5.1 MIT markdown-include This is an extension to Python-Markdown which provides an \"include\" function, similar to that found in LaTeX (and also the C pre-processor and Fortran). I originally wrote it for my FORD Fortran auto-documentation generator. 0.6.0 n.a. MarkupSafe Safely add untrusted strings to HTML/XML markup. 2.0.1 BSD-3-Clause mkdocs Project documentation with Markdown. 1.2.3 BSD mkdocs-exclude A mkdocs plugin that lets you exclude files or trees. 1.0.2 Apache mkdocs-macros-plugin Unleash the power of MkDocs with macros and variables 0.5.12 MIT mkdocs-material A Material Design theme for MkDocs 8.2.5 MIT mkdocs-pymdownx-material-extras Plugin to extend MkDocs Material theme. 1.6 MIT pycond Lightweight Condition Parsing and Building of Evaluation Expressions 20220310 BSD pytest pytest: simple powerful testing with Python 6.2.5 MIT pytest-cov Pytest plugin for measuring coverage. 2.12.1 MIT pytest-randomly Pytest plugin to randomly order tests and control random.seed. 3.11.0 MIT pytest-sugar pytest-sugar is a plugin for pytest that changes the default look and feel of pytest (e.g. progressbar, show tests that fail instantly). 0.9.4 BSD pytest-xdist pytest xdist plugin for distributed testing and loop-on-failing modes 2.5.0 MIT toml Python Library for Tom's Obvious, Minimal Language 0.10.2 MIT Development Dependencies \u00a4 Package Description Version License autoflake Removes unused imports and unused variables 1.4 Expat axblack The uncompromising code formatter - with single quotes as default. 20201010 MIT isort A Python utility / library to sort Python imports. 4.3.21 MIT matplotlib Python plotting package 3.5.1 PSF numpy NumPy is the fundamental package for array computing with Python. 1.21.1 BSD Indirect Dependencies \u00a4 Package Description Version License appdirs A small Python module for determining appropriate platform-specific dirs, e.g. a \"user data dir\". 1.4.4 MIT atomicwrites Atomic file writes. 1.4.0 MIT attrs Classes Without Boilerplate 21.4.0 MIT certifi Python package for providing Mozilla's CA Bundle. 2021.10.8 MPL-2.0 click Composable command line interface toolkit 8.0.4 BSD-3-Clause colorama Cross-platform colored terminal text. 0.4.4 BSD cycler Composable style cycles 0.11.0 BSD execnet execnet: rapid multi-Python deployment 1.9.0 MIT fonttools Tools to manipulate font files 4.30.0 MIT ghp-import Copy your docs directly to the gh-pages branch. 2.0.2 Apache Software graphviz Simple Python interface for Graphviz 0.19.1 MIT h11 A pure-Python, bring-your-own-I/O implementation of HTTP/1.1 0.13.0 MIT httpcore A minimal low-level HTTP client. 0.12.3 BSD idna Internationalized Domain Names in Applications (IDNA) 3.3 BSD-3-Clause importlib-metadata Read metadata from Python packages 4.11.3 n.a. iniconfig iniconfig: brain-dead simple config-ini parsing 1.1.1 MIT Jinja2 A very fast and expressive template engine. 3.0.3 BSD-3-Clause kiwisolver A fast implementation of the Cassowary constraint solver 1.4.0 BSD Markdown Python implementation of Markdown. 3.3.6 BSD mergedeep A deep merge function for \ud83d\udc0d. 1.3.4 n.a. mkdocs-material-extensions Extension pack for Python Markdown. 1.0.3 MIT mypy-extensions Experimental type system extensions for programs checked with the mypy typechecker. 0.4.3 MIT packaging Core utilities for Python packages 21.3 BSD-2-Clause or Apache-2.0 pathspec Utility library for gitignore style pattern matching of file paths. 0.9.0 MPL 2.0 Pillow Python Imaging Library (Fork) 9.0.1 HPND pluggy plugin and hook calling mechanisms for python 1.0.0 MIT py library with cross-python path, ini-parsing, io, code, log facilities 1.11.0 MIT pyflakes passive checker of Python programs 2.4.0 MIT Pygments Pygments is a syntax highlighting package written in Python. 2.11.2 BSD pymdown-extensions Extension pack for Python Markdown. 9.2 MIT pyparsing Python parsing module 3.0.7 MIT pytest-forked run tests in isolated forked subprocesses 1.4.0 MIT python-dateutil Extensions to the standard Python datetime module 2.8.2 Dual PyYAML YAML parser and emitter for Python 6.0 MIT regex Alternative regular expression module, to replace re. 2022.3.2 Apache Software rfc3986 Validating URI References per RFC 3986 1.5.0 Apache 2.0 semver Python helper for Semantic Versioning ( http://semver.org/ ) 2.13.0 BSD setuptools-scm the blessed package to manage your versions by scm tags 6.4.2 MIT six Python 2 and 3 compatibility utilities 1.16.0 MIT sniffio Sniff out which async library your code is running under 1.2.0 MIT -or- Apache 2.0 termcolor ANSII Color formatting for output in terminal. 1.1.0 MIT tomli A lil' TOML parser 2.0.1 n.a. typed-ast a fork of Python 2 and 3 ast modules with type comment support 1.5.2 Apache 2.0 typing-extensions Backported and Experimental Type Hints for Python 3.6+ 4.1.1 n.a. watchdog Filesystem events monitoring 2.1.6 Apache 2.0 zipp Backport of pathlib-compatible object wrapper for zip files 3.7.0 n.a. Many thanks to all authors, for all these brilliant software packages! Special Thanks \u00a4 \"pawamoy\" : Check out his excellent projects . typeof start_lc === \"undefined\" ? 0 : start_lc()","title":"Credits"},{"location":"about/credits/#credits","text":"","title":"Credits"},{"location":"about/credits/#platforms-and-frameworks","text":"These were used to create docutools: python | poetry | mkdocs | mkdocs-material","title":"Platforms and Frameworks"},{"location":"about/credits/#run-dependencies","text":"Package Description Version License anybadge Simple, flexible badge generator for project badges. 1.9.0 n.a. coverage Code coverage measurement for Python 6.3.2 Apache 2.0 diagrams Diagram as Code 0.21.1 MIT git-changelog Automatic Changelog generator using Jinja2 templates. 0.5.0 n.a. httpx The next generation HTTP client. 0.17.1 BSD imagesize Getting image size from png/jpeg/jpeg2000/gif file 1.3.0 MIT inflection A port of Ruby on Rails inflector to Python 0.5.1 MIT markdown-include This is an extension to Python-Markdown which provides an \"include\" function, similar to that found in LaTeX (and also the C pre-processor and Fortran). I originally wrote it for my FORD Fortran auto-documentation generator. 0.6.0 n.a. MarkupSafe Safely add untrusted strings to HTML/XML markup. 2.0.1 BSD-3-Clause mkdocs Project documentation with Markdown. 1.2.3 BSD mkdocs-exclude A mkdocs plugin that lets you exclude files or trees. 1.0.2 Apache mkdocs-macros-plugin Unleash the power of MkDocs with macros and variables 0.5.12 MIT mkdocs-material A Material Design theme for MkDocs 8.2.5 MIT mkdocs-pymdownx-material-extras Plugin to extend MkDocs Material theme. 1.6 MIT pycond Lightweight Condition Parsing and Building of Evaluation Expressions 20220310 BSD pytest pytest: simple powerful testing with Python 6.2.5 MIT pytest-cov Pytest plugin for measuring coverage. 2.12.1 MIT pytest-randomly Pytest plugin to randomly order tests and control random.seed. 3.11.0 MIT pytest-sugar pytest-sugar is a plugin for pytest that changes the default look and feel of pytest (e.g. progressbar, show tests that fail instantly). 0.9.4 BSD pytest-xdist pytest xdist plugin for distributed testing and loop-on-failing modes 2.5.0 MIT toml Python Library for Tom's Obvious, Minimal Language 0.10.2 MIT","title":"Run Dependencies"},{"location":"about/credits/#development-dependencies","text":"Package Description Version License autoflake Removes unused imports and unused variables 1.4 Expat axblack The uncompromising code formatter - with single quotes as default. 20201010 MIT isort A Python utility / library to sort Python imports. 4.3.21 MIT matplotlib Python plotting package 3.5.1 PSF numpy NumPy is the fundamental package for array computing with Python. 1.21.1 BSD","title":"Development Dependencies"},{"location":"about/credits/#indirect-dependencies","text":"Package Description Version License appdirs A small Python module for determining appropriate platform-specific dirs, e.g. a \"user data dir\". 1.4.4 MIT atomicwrites Atomic file writes. 1.4.0 MIT attrs Classes Without Boilerplate 21.4.0 MIT certifi Python package for providing Mozilla's CA Bundle. 2021.10.8 MPL-2.0 click Composable command line interface toolkit 8.0.4 BSD-3-Clause colorama Cross-platform colored terminal text. 0.4.4 BSD cycler Composable style cycles 0.11.0 BSD execnet execnet: rapid multi-Python deployment 1.9.0 MIT fonttools Tools to manipulate font files 4.30.0 MIT ghp-import Copy your docs directly to the gh-pages branch. 2.0.2 Apache Software graphviz Simple Python interface for Graphviz 0.19.1 MIT h11 A pure-Python, bring-your-own-I/O implementation of HTTP/1.1 0.13.0 MIT httpcore A minimal low-level HTTP client. 0.12.3 BSD idna Internationalized Domain Names in Applications (IDNA) 3.3 BSD-3-Clause importlib-metadata Read metadata from Python packages 4.11.3 n.a. iniconfig iniconfig: brain-dead simple config-ini parsing 1.1.1 MIT Jinja2 A very fast and expressive template engine. 3.0.3 BSD-3-Clause kiwisolver A fast implementation of the Cassowary constraint solver 1.4.0 BSD Markdown Python implementation of Markdown. 3.3.6 BSD mergedeep A deep merge function for \ud83d\udc0d. 1.3.4 n.a. mkdocs-material-extensions Extension pack for Python Markdown. 1.0.3 MIT mypy-extensions Experimental type system extensions for programs checked with the mypy typechecker. 0.4.3 MIT packaging Core utilities for Python packages 21.3 BSD-2-Clause or Apache-2.0 pathspec Utility library for gitignore style pattern matching of file paths. 0.9.0 MPL 2.0 Pillow Python Imaging Library (Fork) 9.0.1 HPND pluggy plugin and hook calling mechanisms for python 1.0.0 MIT py library with cross-python path, ini-parsing, io, code, log facilities 1.11.0 MIT pyflakes passive checker of Python programs 2.4.0 MIT Pygments Pygments is a syntax highlighting package written in Python. 2.11.2 BSD pymdown-extensions Extension pack for Python Markdown. 9.2 MIT pyparsing Python parsing module 3.0.7 MIT pytest-forked run tests in isolated forked subprocesses 1.4.0 MIT python-dateutil Extensions to the standard Python datetime module 2.8.2 Dual PyYAML YAML parser and emitter for Python 6.0 MIT regex Alternative regular expression module, to replace re. 2022.3.2 Apache Software rfc3986 Validating URI References per RFC 3986 1.5.0 Apache 2.0 semver Python helper for Semantic Versioning ( http://semver.org/ ) 2.13.0 BSD setuptools-scm the blessed package to manage your versions by scm tags 6.4.2 MIT six Python 2 and 3 compatibility utilities 1.16.0 MIT sniffio Sniff out which async library your code is running under 1.2.0 MIT -or- Apache 2.0 termcolor ANSII Color formatting for output in terminal. 1.1.0 MIT tomli A lil' TOML parser 2.0.1 n.a. typed-ast a fork of Python 2 and 3 ast modules with type comment support 1.5.2 Apache 2.0 typing-extensions Backported and Experimental Type Hints for Python 3.6+ 4.1.1 n.a. watchdog Filesystem events monitoring 2.1.6 Apache 2.0 zipp Backport of pathlib-compatible object wrapper for zip files 3.7.0 n.a. Many thanks to all authors, for all these brilliant software packages!","title":"Indirect Dependencies"},{"location":"about/credits/#special-thanks","text":"\"pawamoy\" : Check out his excellent projects . typeof start_lc === \"undefined\" ? 0 : start_lc()","title":"Special Thanks"},{"location":"about/navigation/","text":"[data-md-color-scheme=\"slate\"] .featherlight .featherlight-content { background: #2e303e; } [data-md-color-scheme=\"slate\"] .featherlight .featherlight-close-icon { background: rgba(255,255,255,.3); color: #fff; } .featherlight .featherlight-content { min-width: 60% !important; } function next_elmt_into_lightbox(id, event) { let btn=document.getElementById(id); let parent = btn.parentNode; function flclose(event) { let c = this.$content[0]; $(parent).after(c); } let el = parent.nextElementSibling; $.featherlight({jquery: el, persist: true, beforeClose: flclose}) } .button-lightbox { color: var(--md-default-fg-color--lighter); }.button-lightbox:hover { color: var(--md-default-fg-color--light); } @media only screen and (min-width: 76.25em) { .md-main__inner { max-width: none; } .md-sidebar--primary { left: 0; } .md-sidebar--secondary { right: 0; margin-left: 0; -webkit-transform: none; transform: none; } } Navigating the Documentation \u00a4 Here a few hints for keyboard centric navigation. We added to our browser the excellent vimium-c plugin. MkDocs Shortcuts \u00a4 ., : Navigates to next and previous page s : Opens the search window vimium-c Shortcuts \u00a4 f : Shows navigation shortcuts above each clickable item h,l : Previous and next in your browser history gg, G : Scroll to top and bottom jk : Scroll down/up Demo \u00a4 Edit Link As you can see the edit button opens local vim. This was done via an xdg-open handler, i.e. depends on your OS. $('.md-content img').featherlightGallery({ nextIcon: '\u00bb', previousIcon: '\u00ab', openSpeed: 300, galleryFadeIn: 300, targetAttr: 'src' }); $('.md-content img').css('cursor', 'zoom-in'); typeof start_lc === \"undefined\" ? 0 : start_lc()","title":"Navigation"},{"location":"about/navigation/#navigating-the-documentation","text":"Here a few hints for keyboard centric navigation. We added to our browser the excellent vimium-c plugin.","title":"Navigating the Documentation"},{"location":"about/navigation/#mkdocs-shortcuts","text":"., : Navigates to next and previous page s : Opens the search window","title":"MkDocs Shortcuts"},{"location":"about/navigation/#vimium-c-shortcuts","text":"f : Shows navigation shortcuts above each clickable item h,l : Previous and next in your browser history gg, G : Scroll to top and bottom jk : Scroll down/up","title":"vimium-c Shortcuts"},{"location":"about/navigation/#demo","text":"Edit Link As you can see the edit button opens local vim. This was done via an xdg-open handler, i.e. depends on your OS. $('.md-content img').featherlightGallery({ nextIcon: '\u00bb', previousIcon: '\u00ab', openSpeed: 300, galleryFadeIn: 300, targetAttr: 'src' }); $('.md-content img').css('cursor', 'zoom-in'); typeof start_lc === \"undefined\" ? 0 : start_lc()","title":"Demo"},{"location":"about/todo/","text":"@media only screen and (min-width: 76.25em) { .md-main__inner { max-width: none; } .md-sidebar--primary { left: 0; } .md-sidebar--secondary { right: 0; margin-left: 0; -webkit-transform: none; transform: none; } } write a todo ;-) typeof start_lc === \"undefined\" ? 0 : start_lc()","title":"TODO"},{"location":"autodocs/python_1f513a48b3699a633cba9d9c62d56171/json/","text":"@media only screen and (min-width: 76.25em) { .md-main__inner { max-width: none; } .md-sidebar--primary { left: 0; } .md-sidebar--secondary { right: 0; margin-left: 0; -webkit-transform: none; transform: none; } } run_lp_flow \u00a4 Flow \u00a4 run_lp_flow. .test_flow source code def test_flow (): say_hello ( 'joe' ) Call Sequence run_lp_flow.<locals>.test_flow (json) [svg_placeholder:python_1f513a48b3699a633cba9d9c62d56171/json/run_lp_flow.test_flow/call_flow.svg] typeof start_lc === \"undefined\" ? 0 : start_lc()","title":"Json"},{"location":"autodocs/python_1f513a48b3699a633cba9d9c62d56171/json/#run_lp_flow","text":"","title":"run_lp_flow"},{"location":"autodocs/python_1f513a48b3699a633cba9d9c62d56171/json/#flow","text":"run_lp_flow. .test_flow source code def test_flow (): say_hello ( 'joe' ) Call Sequence run_lp_flow.<locals>.test_flow (json) [svg_placeholder:python_1f513a48b3699a633cba9d9c62d56171/json/run_lp_flow.test_flow/call_flow.svg] typeof start_lc === \"undefined\" ? 0 : start_lc()","title":"Flow"},{"location":"autodocs/tests/testlog/","text":"@media only screen and (min-width: 76.25em) { .md-main__inner { max-width: none; } .md-sidebar--primary { left: 0; } .md-sidebar--secondary { right: 0; margin-left: 0; -webkit-transform: none; transform: none; } } test_one \u00a4 Runit \u00a4 test_one. .runit source code def runit (): res = say_hello ( 'joe' ) Call Sequence test_one.<locals>.runit (say_hello) [svg_placeholder:tests//testlog/test_one.runit/call_flow.svg] typeof start_lc === \"undefined\" ? 0 : start_lc()","title":"Testlog"},{"location":"autodocs/tests/testlog/#test_one","text":"","title":"test_one"},{"location":"autodocs/tests/testlog/#runit","text":"test_one. .runit source code def runit (): res = say_hello ( 'joe' ) Call Sequence test_one.<locals>.runit (say_hello) [svg_placeholder:tests//testlog/test_one.runit/call_flow.svg] typeof start_lc === \"undefined\" ? 0 : start_lc()","title":"Runit"},{"location":"features/","text":"@media only screen and (min-width: 76.25em) { .md-main__inner { max-width: none; } .md-sidebar--primary { left: 0; } .md-sidebar--secondary { right: 0; margin-left: 0; -webkit-transform: none; transform: none; } } Features \u00a4 Mkdocs Plugins \u00a4 Blacklist : Prevents sensitive content showing up in (public) docs Find Pages : Adds pages to your nav tree, even when not configured in mkdocs.yml Literate Programming : Emacs-org babel inspired dynamic evaluation of fenced code blocks Markdown Replace : Replaces markdown before rendering to html. Including or excluding replacements within fenced blocks Page Tree : Inserts a breadcrumb into your footer Stats : Prints a lot of stats about the build process, ready for piping into jq Framework \u00a4 It made sense to bundle all the plugins within one repo, since it offers a few generic features, for any mkdocs plugin. Note You still have to enable the plugins you really want, within your mkdocs.yml file. The others just waste a little bit of disk space on the build machine but do neither impact performance nor size of your builds. Tech The plugins inherit not directly from mkdocs.plugins.BasePlugin but from the intermediate lcdoc.mkdocs.tools.MDPlugin . This allows their hooks to be wrapped within a metrics and logs framework, applicable to all of them. If you want to use the framework for your own plugins, you can inherit from MDPlugin as well. You gain from an app class, providing the log methods and a die method, accepting **kw args (see structlog ), configured during hook run time for the current hook and, when applicable, current page. In the stats plugin you can configure, at which log levels you want to have build breaks the plugin and the page have a stats dict attribute, in which you can collect metrics. Some metrics like run time are collected for you. See the Stats plugin for more on this. typeof start_lc === \"undefined\" ? 0 : start_lc()","title":"Features"},{"location":"features/#features","text":"","title":"Features"},{"location":"features/#mkdocs-plugins","text":"Blacklist : Prevents sensitive content showing up in (public) docs Find Pages : Adds pages to your nav tree, even when not configured in mkdocs.yml Literate Programming : Emacs-org babel inspired dynamic evaluation of fenced code blocks Markdown Replace : Replaces markdown before rendering to html. Including or excluding replacements within fenced blocks Page Tree : Inserts a breadcrumb into your footer Stats : Prints a lot of stats about the build process, ready for piping into jq","title":"Mkdocs Plugins"},{"location":"features/#framework","text":"It made sense to bundle all the plugins within one repo, since it offers a few generic features, for any mkdocs plugin. Note You still have to enable the plugins you really want, within your mkdocs.yml file. The others just waste a little bit of disk space on the build machine but do neither impact performance nor size of your builds. Tech The plugins inherit not directly from mkdocs.plugins.BasePlugin but from the intermediate lcdoc.mkdocs.tools.MDPlugin . This allows their hooks to be wrapped within a metrics and logs framework, applicable to all of them. If you want to use the framework for your own plugins, you can inherit from MDPlugin as well. You gain from an app class, providing the log methods and a die method, accepting **kw args (see structlog ), configured during hook run time for the current hook and, when applicable, current page. In the stats plugin you can configure, at which log levels you want to have build breaks the plugin and the page have a stats dict attribute, in which you can collect metrics. Some metrics like run time are collected for you. See the Stats plugin for more on this. typeof start_lc === \"undefined\" ? 0 : start_lc()","title":"Framework"},{"location":"features/darkmode/","text":"@media only screen and (min-width: 76.25em) { .md-main__inner { max-width: none; } .md-sidebar--primary { left: 0; } .md-sidebar--secondary { right: 0; margin-left: 0; -webkit-transform: none; transform: none; } } Darkmode \u00a4 Pages are rendered based on your browser's preference, regarding dark mode: How \u00a4 Through a media query we adapt the colorscheme to the preferred one of the browser: < body dir = \"ltr\" data-md-color-scheme = \"preference\" data-md-color-primary = \"yellow\" data-md-color-accent = \"deep-purple\" > < script > matchMedia ( \"(prefers-color-scheme: dark)\" ). matches && document . body . setAttribute ( \"data-md-color-scheme\" , \"slate\" )</ script > Linux/Chromium On Linux do this for chromium, should it not respect your system prefs: ~/.config \u276f cat chromium-flags.conf --force-dark-mode --enable-features=WebUIDarkMode typeof start_lc === \"undefined\" ? 0 : start_lc()","title":"Darkmode"},{"location":"features/darkmode/#darkmode","text":"Pages are rendered based on your browser's preference, regarding dark mode:","title":"Darkmode"},{"location":"features/darkmode/#how","text":"Through a media query we adapt the colorscheme to the preferred one of the browser: < body dir = \"ltr\" data-md-color-scheme = \"preference\" data-md-color-primary = \"yellow\" data-md-color-accent = \"deep-purple\" > < script > matchMedia ( \"(prefers-color-scheme: dark)\" ). matches && document . body . setAttribute ( \"data-md-color-scheme\" , \"slate\" )</ script > Linux/Chromium On Linux do this for chromium, should it not respect your system prefs: ~/.config \u276f cat chromium-flags.conf --force-dark-mode --enable-features=WebUIDarkMode typeof start_lc === \"undefined\" ? 0 : start_lc()","title":"How"},{"location":"features/third/","text":"@media only screen and (min-width: 76.25em) { .md-main__inner { max-width: none; } .md-sidebar--primary { left: 0; } .md-sidebar--secondary { right: 0; margin-left: 0; -webkit-transform: none; transform: none; } } :root { --md-admonition-icon--developer-tip: url('data:image/svg+xml;charset=utf-8,<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 448 512\"><!--! Font Awesome Free 6.0.0 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) Copyright 2022 Fonticons, Inc.--><path d=\"M120.12 208.29c-3.88-2.9-7.77-4.35-11.65-4.35H91.03v104.47h17.45c3.88 0 7.77-1.45 11.65-4.35 3.88-2.9 5.82-7.25 5.82-13.06v-69.65c-.01-5.8-1.96-10.16-5.83-13.06zM404.1 32H43.9C19.7 32 .06 51.59 0 75.8v360.4C.06 460.41 19.7 480 43.9 480h360.2c24.21 0 43.84-19.59 43.9-43.8V75.8c-.06-24.21-19.7-43.8-43.9-43.8zM154.2 291.19c0 18.81-11.61 47.31-48.36 47.25h-46.4V172.98h47.38c35.44 0 47.36 28.46 47.37 47.28l.01 70.93zm100.68-88.66H201.6v38.42h32.57v29.57H201.6v38.41h53.29v29.57h-62.18c-11.16.29-20.44-8.53-20.72-19.69V193.7c-.27-11.15 8.56-20.41 19.71-20.69h63.19l-.01 29.52zm103.64 115.29c-13.2 30.75-36.85 24.63-47.44 0l-38.53-144.8h32.57l29.71 113.72 29.57-113.72h32.58l-38.46 144.8z\"/></svg>') } .md-typeset .admonition.developer-tip, .md-typeset details.developer-tip { border-color: rgb(139, 209, 36); } .md-typeset .developer-tip > .admonition-title, .md-typeset .developer-tip > summary { background-color: rgba(139, 209, 36, 0.1); border-color: rgb(139, 209, 36); } .md-typeset .developer-tip > .admonition-title::before, .md-typeset .developer-tip > summary::before { background-color: rgb(139, 209, 36); -webkit-mask-image: var(--md-admonition-icon--developer-tip); mask-image: var(--md-admonition-icon--developer-tip); } Plugins \u00a4 docutools will install 3rd party plugins for mkdocs, ready for use right away. See pyproject.toml , for the packages we depend on. Size Those plugins increase the initial download time of documentation, if enabled in mkdocs.yml . Users which stay on your documentation page, having the libs cached at subsequent visits. Which \u00a4 We have pretty much all of these: https://squidfunk.github.io/mkdocs-material/reference/abbreviations/ . And a few of these: https://facelessuser.github.io/pymdown-extensions/extensions/superfences/ Plus some standard markdown extensions, e.g. tables. And also our own ones, described in this documentation. See the mkdocs.yml file to get an overview. Below a few important extensions - but check the above pages for details on usage: Admonitions \u00a4 A hint this is an admonition. !!! hint \"A hint\" this is an admonition. Inline Admonitions \u00a4 Admonitions can also be rendered as inline blocks (i.e. for sidebars), placing them to the right using the inline + end modifiers, or to the left using only the inline modifier: inline end inline Info Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. The content block we put the admon next to (can be anything, incl. an admonition) Use inline end to align to the right (left for rtl languages). Info Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. The content block we put the admon next to Use inline to align to the left (right for rtl languages). Important : admonitions that use the inline modifiers must be declared prior to the content block you want to place them beside. If there's insufficient space to render the admonition next to the block, the admonition will stretch to the full width of the viewport, e.g. on mobile viewports. Supported types \u00a4 See https://squidfunk.github.io/mkdocs-material/reference/admonitions/ Developer Tip See also the md-replace feature, for custom admonitions like this one. Critic \u00a4 This was marked This was inserted This was deleted - ==This was marked== - ^^This was inserted^^ - ~~This was deleted~~ See https://squidfunk.github.io/mkdocs-material/reference/formatting/ Details \u00a4 Open styled details Nested details! And more content again. ???+ note \"Open styled details\" ??? danger \"Nested details!\" And more content again. Footnotes \u00a4 Footnotes 1 have a label 2 and the footnote's content. Footnotes[^1] have a label[^@#$%] and the footnote's content. and elsewhere: [^1]: This is a footnote content. [^@#$%]: A footnote on the label: \"@#$%\". Icons and Emojis \u00a4 See here for an emoji search box. \u2013 .icons/material/account-circle.svg :fontawesome-regular-laugh-wink: \u2013 .icons/fontawesome/regular/laugh-wink.svg :octicons-octoface-24: \u2013 .icons/octicons/octoface-24.svg \u2013 Twitter, colorized, using style attr :fontawesome-brands-linux: :smile: - :material-account-circle: \u2013 `.icons/material/account-circle.svg` - :fontawesome-regular-laugh-wink: \u2013 `.icons/fontawesome/regular/laugh-wink.svg` - :octicons-octoface-24: \u2013 `.icons/octicons/octoface-24.svg` - :fontawesome-brands-twitter:{: style=\"color: #1da1f2\" } \u2013 Twitter, colorized, using style attr Keyboard Symbols \u00a4 This ++ctrl+alt+delete++ is rendered: Ctrl + Alt + Del Snippets \u00a4 Allow to embed complex other content into your markdown. In your mkdocs.yml you can then supply custom base paths, containing e.g. your own abbreviations, libraries or whatever you require on certain pages. This is a demo . The actual link is provided by an import of a text file (e.g. here docs/links.txt ), loaded via a snippet. This is [a demo][demo]. And elsewhere, e.g. at the bottom embed the links: --8<-- links.txt --8<-- Note that you can provide, in mkdocs.yml , custom locations for such snippets, i.e. within project. Style Attributes / Images \u00a4 Source ![](img/linux.png){: style=\"height:200px\" align=right loading=lazy .zoom } for the zoom you need the snippet: Tables \u00a4 Table header click to sort: Method Description GET Fetch resource PUT Update resource DELETE Delete resource | Method | Description | | ----------- | ------------------------------------ | | `GET` | :material-check: Fetch resource | | `PUT` | :material-check-all: Update resource | | `DELETE` | :material-close: Delete resource | Tabs \u00a4 First Tab Second Tab Source header First Nested Tab Second Nested Tab markdown content of first nested tab markdown content of second nested tab markdown content of second tab === \"First Tab\" header === \"First Nested Tab\" markdown content of first nested tab === \"Second Nested Tab\" markdown content of second nested tab === \"Second Tab\" markdown content of second tab Tasklists \u00a4 Task List item 1 item A item B more text item a Task List - [X] item 1 * [X] item A * [ ] item B more text + [x] item a + [ ] item b See https://squidfunk.github.io/mkdocs-material/reference/icons-emojis/ about styling. Md in HTML \u00a4 Works even within markdown, i.e. within tabs: Source Source A Markdown paragraph within html setting the background color to purple. A list item. A second list item. # and some fenced code within the html foo = \"bar\" <div markdown=\"block\" style=\"background-color: purple\"> A *Markdown* paragraph within html setting the background color to purple. * A list item. * A second list item. ```python # and some fenced code within the html foo = \"bar\" ``` </div> This is a footnote content. \u21a9 A footnote on the label: \"@#$%\". \u21a9 typeof start_lc === \"undefined\" ? 0 : start_lc()","title":"Third Party"},{"location":"features/third/#plugins","text":"docutools will install 3rd party plugins for mkdocs, ready for use right away. See pyproject.toml , for the packages we depend on. Size Those plugins increase the initial download time of documentation, if enabled in mkdocs.yml . Users which stay on your documentation page, having the libs cached at subsequent visits.","title":"Plugins"},{"location":"features/third/#which","text":"We have pretty much all of these: https://squidfunk.github.io/mkdocs-material/reference/abbreviations/ . And a few of these: https://facelessuser.github.io/pymdown-extensions/extensions/superfences/ Plus some standard markdown extensions, e.g. tables. And also our own ones, described in this documentation. See the mkdocs.yml file to get an overview. Below a few important extensions - but check the above pages for details on usage:","title":"Which"},{"location":"features/third/#admonitions","text":"A hint this is an admonition. !!! hint \"A hint\" this is an admonition.","title":"Admonitions"},{"location":"features/third/#inline-admonitions","text":"Admonitions can also be rendered as inline blocks (i.e. for sidebars), placing them to the right using the inline + end modifiers, or to the left using only the inline modifier: inline end inline Info Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. The content block we put the admon next to (can be anything, incl. an admonition) Use inline end to align to the right (left for rtl languages). Info Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. The content block we put the admon next to Use inline to align to the left (right for rtl languages). Important : admonitions that use the inline modifiers must be declared prior to the content block you want to place them beside. If there's insufficient space to render the admonition next to the block, the admonition will stretch to the full width of the viewport, e.g. on mobile viewports.","title":"Inline Admonitions"},{"location":"features/third/#supported-types","text":"See https://squidfunk.github.io/mkdocs-material/reference/admonitions/ Developer Tip See also the md-replace feature, for custom admonitions like this one.","title":"Supported types"},{"location":"features/third/#critic","text":"This was marked This was inserted This was deleted - ==This was marked== - ^^This was inserted^^ - ~~This was deleted~~ See https://squidfunk.github.io/mkdocs-material/reference/formatting/","title":"Critic"},{"location":"features/third/#details","text":"Open styled details Nested details! And more content again. ???+ note \"Open styled details\" ??? danger \"Nested details!\" And more content again.","title":"Details"},{"location":"features/third/#footnotes","text":"Footnotes 1 have a label 2 and the footnote's content. Footnotes[^1] have a label[^@#$%] and the footnote's content. and elsewhere: [^1]: This is a footnote content. [^@#$%]: A footnote on the label: \"@#$%\".","title":"Footnotes"},{"location":"features/third/#icons-and-emojis","text":"See here for an emoji search box. \u2013 .icons/material/account-circle.svg :fontawesome-regular-laugh-wink: \u2013 .icons/fontawesome/regular/laugh-wink.svg :octicons-octoface-24: \u2013 .icons/octicons/octoface-24.svg \u2013 Twitter, colorized, using style attr :fontawesome-brands-linux: :smile: - :material-account-circle: \u2013 `.icons/material/account-circle.svg` - :fontawesome-regular-laugh-wink: \u2013 `.icons/fontawesome/regular/laugh-wink.svg` - :octicons-octoface-24: \u2013 `.icons/octicons/octoface-24.svg` - :fontawesome-brands-twitter:{: style=\"color: #1da1f2\" } \u2013 Twitter, colorized, using style attr","title":"Icons and Emojis"},{"location":"features/third/#keyboard-symbols","text":"This ++ctrl+alt+delete++ is rendered: Ctrl + Alt + Del","title":"Keyboard Symbols"},{"location":"features/third/#snippets","text":"Allow to embed complex other content into your markdown. In your mkdocs.yml you can then supply custom base paths, containing e.g. your own abbreviations, libraries or whatever you require on certain pages. This is a demo . The actual link is provided by an import of a text file (e.g. here docs/links.txt ), loaded via a snippet. This is [a demo][demo]. And elsewhere, e.g. at the bottom embed the links: --8<-- links.txt --8<-- Note that you can provide, in mkdocs.yml , custom locations for such snippets, i.e. within project.","title":"Snippets"},{"location":"features/third/#style-attributes-images","text":"Source ![](img/linux.png){: style=\"height:200px\" align=right loading=lazy .zoom } for the zoom you need the snippet:","title":"Style Attributes / Images"},{"location":"features/third/#tables","text":"Table header click to sort: Method Description GET Fetch resource PUT Update resource DELETE Delete resource | Method | Description | | ----------- | ------------------------------------ | | `GET` | :material-check: Fetch resource | | `PUT` | :material-check-all: Update resource | | `DELETE` | :material-close: Delete resource |","title":"Tables"},{"location":"features/third/#tabs","text":"First Tab Second Tab Source header First Nested Tab Second Nested Tab markdown content of first nested tab markdown content of second nested tab markdown content of second tab === \"First Tab\" header === \"First Nested Tab\" markdown content of first nested tab === \"Second Nested Tab\" markdown content of second nested tab === \"Second Tab\" markdown content of second tab","title":"Tabs"},{"location":"features/third/#tasklists","text":"Task List item 1 item A item B more text item a Task List - [X] item 1 * [X] item A * [ ] item B more text + [x] item a + [ ] item b See https://squidfunk.github.io/mkdocs-material/reference/icons-emojis/ about styling.","title":"Tasklists"},{"location":"features/third/#md-in-html","text":"Works even within markdown, i.e. within tabs: Source Source A Markdown paragraph within html setting the background color to purple. A list item. A second list item. # and some fenced code within the html foo = \"bar\" <div markdown=\"block\" style=\"background-color: purple\"> A *Markdown* paragraph within html setting the background color to purple. * A list item. * A second list item. ```python # and some fenced code within the html foo = \"bar\" ``` </div> This is a footnote content. \u21a9 A footnote on the label: \"@#$%\". \u21a9 typeof start_lc === \"undefined\" ? 0 : start_lc()","title":"Md in HTML"},{"location":"features/blacklist/","text":"@media only screen and (min-width: 76.25em) { .md-main__inner { max-width: none; } .md-sidebar--primary { left: 0; } .md-sidebar--secondary { right: 0; margin-left: 0; -webkit-transform: none; transform: none; } } Blacklist \u00a4 Usage: lcd-blacklist When any word of $blacklisted_words (e.g. \"mypass::mycompany::myuser\") occurs in non git ignored sources, the build will fail. This prevents private information being pushed to a public repo. Set $blacklisted_words e.g. via $(pass show my/sensitive_words) in an environ file, sourced at local builds. The build will fail if such words occur in your docs Example: This repo's environ:blacklisted file. This is run after config is read and scans all docs folder content, not just the .md files. Requires the rg ( ripgrep ) tool. typeof start_lc === \"undefined\" ? 0 : start_lc()","title":"Blacklist"},{"location":"features/blacklist/#blacklist","text":"Usage: lcd-blacklist When any word of $blacklisted_words (e.g. \"mypass::mycompany::myuser\") occurs in non git ignored sources, the build will fail. This prevents private information being pushed to a public repo. Set $blacklisted_words e.g. via $(pass show my/sensitive_words) in an environ file, sourced at local builds. The build will fail if such words occur in your docs Example: This repo's environ:blacklisted file. This is run after config is read and scans all docs folder content, not just the .md files. Requires the rg ( ripgrep ) tool. typeof start_lc === \"undefined\" ? 0 : start_lc()","title":"Blacklist "},{"location":"features/find-pages/","text":"@media only screen and (min-width: 76.25em) { .md-main__inner { max-width: none; } .md-sidebar--primary { left: 0; } .md-sidebar--secondary { right: 0; margin-left: 0; -webkit-transform: none; transform: none; } } Find-Pages \u00a4 Adds pages to your nav tree, even when not referenced in mkdocs.yml . The adding is done by inspecting the location of the files within the docs tree. Example: The Literate Programming plugin docs are added to nav via find-pages: In this repos's mkdocs.yml we have - lcd-lp - lcd-find-pages : find-pages : - features/lp/plugs/ lcd-lp plugin will, at config hook time, link all existing plugin docs to the docs tree lcd-find-pages, with config above adds them to nav Notes: find_pages can be also additionally supplied via an environ variable. correct insertion requires a well defined h1 header - we will take all upper cased words. If there are none, we will take filename without .md or container directory, if filename is index.md . correct insertion also requires, that the insertion point of the first doc page not declared in nav is following the intended page before it, when you sort ALL filenames, declared and undeclared, alphabetically. You can also force a certain insertion point, by supplying the searched dir together with an after key as dict(s), like: nav : - Overview : index.md - Blueprint : - Overview : blueprint/index.md - About : (...) - lcd-find-pages : find-pages : - dir : blueprint after : blueprint/index.md typeof start_lc === \"undefined\" ? 0 : start_lc()","title":"Find Pages"},{"location":"features/find-pages/#find-pages","text":"Adds pages to your nav tree, even when not referenced in mkdocs.yml . The adding is done by inspecting the location of the files within the docs tree. Example: The Literate Programming plugin docs are added to nav via find-pages: In this repos's mkdocs.yml we have - lcd-lp - lcd-find-pages : find-pages : - features/lp/plugs/ lcd-lp plugin will, at config hook time, link all existing plugin docs to the docs tree lcd-find-pages, with config above adds them to nav Notes: find_pages can be also additionally supplied via an environ variable. correct insertion requires a well defined h1 header - we will take all upper cased words. If there are none, we will take filename without .md or container directory, if filename is index.md . correct insertion also requires, that the insertion point of the first doc page not declared in nav is following the intended page before it, when you sort ALL filenames, declared and undeclared, alphabetically. You can also force a certain insertion point, by supplying the searched dir together with an after key as dict(s), like: nav : - Overview : index.md - Blueprint : - Overview : blueprint/index.md - About : (...) - lcd-find-pages : find-pages : - dir : blueprint after : blueprint/index.md typeof start_lc === \"undefined\" ? 0 : start_lc()","title":"Find-Pages "},{"location":"features/lp/","text":"@media only screen and (min-width: 76.25em) { .md-main__inner { max-width: none; } .md-sidebar--primary { left: 0; } .md-sidebar--secondary { right: 0; margin-left: 0; -webkit-transform: none; transform: none; } } Literate Programming \u00a4 The \"LP\" feature of docutools allows to embed executable parametrizable code within markdown sources and insert into the rendering result the evaluated output, before html build time, including possibly javascript helper libraries javascript code styles. This is done through a plugin, with an on_markdown hook, i.e. before html is generated. Motivation \u00a4 The main benefit of the LP plugin is to keep documentation in sync with the system you are documenting. And vice versa . Note The plugin is heavily inspired by emacs' org-babel . Feature Highlights \u00a4 Concise Syntax : Does not distract when reading source Stateless and Stateful Evaluation, using tmux Means you can inspect and even change what's going on, before, after and during page evaluation. Anything set within the tmux session (e.g. environ, variables) is available in later mkdocs build runs, except when you decide to kill the session. Assertions : You can assert on the evaluation result, i.e. you can turn the code blocks into a functional test suite, documented through your markdown around the blocks. Various Output Formats Various Builtin Evaluation Plugins . Extendable with your own. Caching : Results are cached and only re-evaluated when source changes. You can edit the markdown around, w/o triggering possibly expensive evaluation runs. By deciding to commit the cache files you can opt to prevent CI from executing code which is only runnable on certain machines (e.g. where you have your cloud infra keys) Debugging : Execution can be halted and context inspected Full Terminal Color Support : Colorized terminal output via xterm.js Async Results Fetching : Big evaluation results may be fetched only on demand, e.g. on click on otherwise non expanded \"Output\" tabs Coverage Backrefs : Dynamic coverage contexts, optionally with backrefs to the markdown source line of the LP block, triggering the evaluation Here the list of parameters for the default mode: Evaluation in a (bash) shell. Usage: lcd-lp within your mkdocs.yml file, section plugins. Requirements \u00a4 tmux (sessions for the default evaluation mode: bash) ripgrep (code searching) fd (file finding) Security \u00a4 Documentation is source code. Documentation Building Runs Arbitrary Code Consequence: Treat other people's documentation sources with the same care than you treat e.g. their test code: Untrusted sources should be built only within proper sandboxes! Alternatives \u00a4 For rather code centric documentation have a look at these Pheasant Auto generation of outputs for a fenced code block or inline code in Markdown source using Jupyter client. The code language is not restricted to Python. Auto numbering of headers, figures, tables, and etc. Numbered objects can be linked from other Markdown sources. https://pypi.org/project/mkdocs-jupyter/ There are other notebook converters as well typeof start_lc === \"undefined\" ? 0 : start_lc()","title":"Overview"},{"location":"features/lp/#literate-programming","text":"The \"LP\" feature of docutools allows to embed executable parametrizable code within markdown sources and insert into the rendering result the evaluated output, before html build time, including possibly javascript helper libraries javascript code styles. This is done through a plugin, with an on_markdown hook, i.e. before html is generated.","title":"Literate Programming "},{"location":"features/lp/#motivation","text":"The main benefit of the LP plugin is to keep documentation in sync with the system you are documenting. And vice versa . Note The plugin is heavily inspired by emacs' org-babel .","title":"Motivation"},{"location":"features/lp/#feature-highlights","text":"Concise Syntax : Does not distract when reading source Stateless and Stateful Evaluation, using tmux Means you can inspect and even change what's going on, before, after and during page evaluation. Anything set within the tmux session (e.g. environ, variables) is available in later mkdocs build runs, except when you decide to kill the session. Assertions : You can assert on the evaluation result, i.e. you can turn the code blocks into a functional test suite, documented through your markdown around the blocks. Various Output Formats Various Builtin Evaluation Plugins . Extendable with your own. Caching : Results are cached and only re-evaluated when source changes. You can edit the markdown around, w/o triggering possibly expensive evaluation runs. By deciding to commit the cache files you can opt to prevent CI from executing code which is only runnable on certain machines (e.g. where you have your cloud infra keys) Debugging : Execution can be halted and context inspected Full Terminal Color Support : Colorized terminal output via xterm.js Async Results Fetching : Big evaluation results may be fetched only on demand, e.g. on click on otherwise non expanded \"Output\" tabs Coverage Backrefs : Dynamic coverage contexts, optionally with backrefs to the markdown source line of the LP block, triggering the evaluation Here the list of parameters for the default mode: Evaluation in a (bash) shell. Usage: lcd-lp within your mkdocs.yml file, section plugins.","title":"Feature Highlights"},{"location":"features/lp/#requirements","text":"tmux (sessions for the default evaluation mode: bash) ripgrep (code searching) fd (file finding)","title":"Requirements"},{"location":"features/lp/#security","text":"Documentation is source code. Documentation Building Runs Arbitrary Code Consequence: Treat other people's documentation sources with the same care than you treat e.g. their test code: Untrusted sources should be built only within proper sandboxes!","title":"Security"},{"location":"features/lp/#alternatives","text":"For rather code centric documentation have a look at these Pheasant Auto generation of outputs for a fenced code block or inline code in Markdown source using Jupyter client. The code language is not restricted to Python. Auto numbering of headers, figures, tables, and etc. Numbered objects can be linked from other Markdown sources. https://pypi.org/project/mkdocs-jupyter/ There are other notebook converters as well typeof start_lc === \"undefined\" ? 0 : start_lc()","title":"Alternatives"},{"location":"features/lp/async/","text":"@media only screen and (min-width: 76.25em) { .md-main__inner { max-width: none; } .md-sidebar--primary { left: 0; } .md-sidebar--secondary { right: 0; margin-left: 0; -webkit-transform: none; transform: none; } } Asynchronous (Lazy) Results Fetching \u00a4 When results are big, you can prevent the user browser having to fetch them at every page load but only on demand. When the fmt parameter puts the results into a tab which is not open at page load, this will significantly improve page load times and transfer volume, when users do not open the tabs. Mechanics \u00a4 Simply add the fetch parameter into the header. Example: ```bash lp fetch=md_async_example <heavy results causing evaluation> ``` Result: At evaluation, the results will then not be put into the markdown directly but something like that instead (see src/lcdoc/lp.py ). < xterm /> remote_content ![](./media/mypage.md_async_example.ansi) The results will be written into a .ansi file, next to the original markdown page (into a subdirectory \"media\") fn_frm will be the link to that file. The javascript shipped with lp will pick up the xterm tags and render them. When it sees 'remote_content`, it will send an XHR to the server, downloading the results. That way the server can still remain static. Note The results are fetched only when the xterm tag is to be displayed - i.e. not while the tab containing it is closed. typeof start_lc === \"undefined\" ? 0 : start_lc()","title":"Async Fetching"},{"location":"features/lp/async/#asynchronous-lazy-results-fetching","text":"When results are big, you can prevent the user browser having to fetch them at every page load but only on demand. When the fmt parameter puts the results into a tab which is not open at page load, this will significantly improve page load times and transfer volume, when users do not open the tabs.","title":"Asynchronous (Lazy) Results Fetching"},{"location":"features/lp/async/#mechanics","text":"Simply add the fetch parameter into the header. Example: ```bash lp fetch=md_async_example <heavy results causing evaluation> ``` Result: At evaluation, the results will then not be put into the markdown directly but something like that instead (see src/lcdoc/lp.py ). < xterm /> remote_content ![](./media/mypage.md_async_example.ansi) The results will be written into a .ansi file, next to the original markdown page (into a subdirectory \"media\") fn_frm will be the link to that file. The javascript shipped with lp will pick up the xterm tags and render them. When it sees 'remote_content`, it will send an XHR to the server, downloading the results. That way the server can still remain static. Note The results are fetched only when the xterm tag is to be displayed - i.e. not while the tab containing it is closed. typeof start_lc === \"undefined\" ? 0 : start_lc()","title":"Mechanics"},{"location":"features/lp/eval/","text":"@media only screen and (min-width: 76.25em) { .md-main__inner { max-width: none; } .md-sidebar--primary { left: 0; } .md-sidebar--secondary { right: 0; margin-left: 0; -webkit-transform: none; transform: none; } } Evaluation and Caching \u00a4 Note Understanding and controlling when blocks are evaluated is important for the author of docsets, (not the reader. Best Practice \u00a4 These are the recommended base settings to control evaluation: Before mkdocs build: export lp_eval=always Before mkdocs serve: export lp_eval=on_page_change They are also set by the make file (functions docs , docs_serve ). Within the page header you might want to set eval page wide to on_page_change , in order to prevent CI/CD to re-evaluate the page and commit the .lp.py file for those pages. Here the Details: Hashing \u00a4 When the plugin identifies and parses lp blocks within your docset, it builds a hash to identify them. The hash is built over the complete lp body plus a specific set of header parameters, which might, when changed, result in a different outcome of the evaluation: Code # those header params will prevent to use caching when changed, they go into the hash of # a block which is the cache key: hashed_headers = [ 'asserts' , 'body' , 'chmod' , 'cwd' , 'delim' , 'dir' , 'expect' , 'mode' , 'new_session' , 'pdb' , 'post' , 'pre' , 'session' , 'timeout' , ] https://github.com/axiros/docutools/blob/master/src/lcdoc/mkdocs/lp/__init__.py#L113 Warning It should be clear that the evaluation result might change, even without any change in those headers, due to side-effects outside of our control. It remains upone the author of LP stanzas to decide upon re-evaluation. Cache Files \u00a4 After a page was evaluated, a file is written, next to the .md source file, ending with .lp.py . The file contains a hash map, with keys the hashes of each block and value the raw (unformatted) result of the evaluation. The eval parameter determines now, if, at page build time, a new evaluation is performed or the result from the cache is taken, if available. Patching the mkdocs file watcher \u00a4 At first start of mkdocs we have to patch the filewatcher of mkdocs, in order to ignore .lp.py files. That prevents putting them into the site directory but also helps avoid evaluation loops. implementation Code def patch_mkdocs_to_ignore_res_file_changes (): \"\"\"sad. we must prevent mkdocs serve to rebuild each time we write a result file And we want those result files close to the docs, they should be in that tree. Also we save tons of rebuilds when preventing to monitor imgs - since often autocreated, e.g. from kroki or drawio. \"\"\" import mkdocs fn = mkdocs . __file__ . rsplit ( '/' , 1 )[ 0 ] fn += '/livereload/__init__.py' if not exists ( fn ): return app . warning ( 'Cannot patch mkdocs - version mismatch' , missing = fn ) s = read_file ( fn ) S = 'event.is_directory' if not S in s : return app . warning ( 'Cannot patch mkdocs - version mismatch' , missing = fn ) if lp_res_ext in s : return app . info ( 'mkdocs is already patched to ignore %s ' % lp_res_ext , fn = fn ) os . system ( 'cp \" %s \" \" %s .orig\"' % ( fn , fn )) new = S for ext in [ lp_res_ext , '.svg' , '.png' ]: new += ' or event.src_path.endswith(\" %s \") ' % ext new += ' or \"/autodocs\" in event.src_path ' # cannot write a comment due to the ':' s = s . replace ( S , new ) write_file ( fn , s ) diff = os . popen ( 'diff \" %s .orig\" \" %s \"' % ( fn , fn )) . read () . splitlines () app . info ( 'Diff' , json = diff ) msg = ( 'Have patched mkdocs to not watch %s and .svg files. Please restart.' % lp_res_ext ) app . die ( msg , fn = fn ) https://github.com/axiros/docutools/blob/master/src/lcdoc/mkdocs/lp/__init__.py#L664 CI/CD: Comitting Cache Files? \u00a4 Sometimes lp blocks can or should only be evaluated on your local machine - but not on CI/CD elsewhere. Example: You document how to set up a Kubernetes cluster in the cloud, using your cloud provider credentials, plus it takes 30 minutes until completed. You want to be able to prevent CI/CD to evaluate the specific blocks - or whole pages -, when running, i.e. when CI/CD is building the docs. Solution: Set eval to \"on_change\" or \"on_page_change\" You commit the .lp.py cache files of these pages and set eval to \"on_change\" or \"on_page_change\". The result (cache) files, for pages which should be evaluated on CI/CD (e.g. for additional testing purposes) you do NOT commit. Then the final docs will display the result from your local run, for the pages you committed the cache files for. The eval Parameter \u00a4 Adjusting eval is key for having fast edit-render cycles, while authoring pages. Predefined Values \u00a4 Code class Eval : never = 'never' # not even when not cached always = 'always' # even when cached. except skipped on_change = 'on_change' # only when block changed on_page_change = 'on_page_change' # whan any block (md irrelevant) on page changed # Default: anything else would confuse user. e.g. cat <filename> would show old still when it changed but no lp change involved: default = 'always' https://github.com/axiros/docutools/blob/master/src/lcdoc/mkdocs/lp/__init__.py#L138 never: No evaluation. Typically given on page level, while writing a bunch of LP statements. Will never eval, even with a cache miss. on_change: Re-evaluation when the hash changes on_page_change: Re-evaluation of all blocks, when any hash changes on the page always: Always evaluate (the default) Arbitrary Matching \u00a4 When working on a block or a page, you can also restrict evaluation to the current page or even block only, by specifying the eval parameter like so: <page match>[:<block match>] . Typically you do this via an environ parameter at start up of mkdocs build|serve : Warning Such a page match is checked against the full source path to markdown pages, from / (root) folder! So lp_eval=docs/index would match exactly on your main index.md. $ lp_eval = \"mypage\" mkdocs build $ lp_eval = \"mypage:myblockmatch\" mkdocs build When a block match was given, you can just add the match string within the header, e.g. as a boolean value. Example: ```bash lp myblockmatch < statements to eval> ``` When the block is correctly functioning, you can delete the match string and have the result in the cache file, moving on to the next block. Any non matching block is set to eval=\"never\" , i.e. results will be from cache - or when not present rendered as skipped. Hint To cause more than one block evaluated simply add the matching keyword argument in the header for all blocks you want. Skips \u00a4 The header exclusive argument <lang> lp skip_<this|other|below|above> will skip block execution accordingly, i.e. you can work your way towards a completely evaluatable page, from block to block. Note Behind the scenes, the eval parameter does nothing else than adding skip_this parameters to non evaluated blocks. typeof start_lc === \"undefined\" ? 0 : start_lc()","title":"Evaluation and Caching"},{"location":"features/lp/eval/#evaluation-and-caching","text":"Note Understanding and controlling when blocks are evaluated is important for the author of docsets, (not the reader.","title":"Evaluation and Caching"},{"location":"features/lp/eval/#best-practice","text":"These are the recommended base settings to control evaluation: Before mkdocs build: export lp_eval=always Before mkdocs serve: export lp_eval=on_page_change They are also set by the make file (functions docs , docs_serve ). Within the page header you might want to set eval page wide to on_page_change , in order to prevent CI/CD to re-evaluate the page and commit the .lp.py file for those pages. Here the Details:","title":"Best Practice"},{"location":"features/lp/eval/#hashing","text":"When the plugin identifies and parses lp blocks within your docset, it builds a hash to identify them. The hash is built over the complete lp body plus a specific set of header parameters, which might, when changed, result in a different outcome of the evaluation: Code # those header params will prevent to use caching when changed, they go into the hash of # a block which is the cache key: hashed_headers = [ 'asserts' , 'body' , 'chmod' , 'cwd' , 'delim' , 'dir' , 'expect' , 'mode' , 'new_session' , 'pdb' , 'post' , 'pre' , 'session' , 'timeout' , ] https://github.com/axiros/docutools/blob/master/src/lcdoc/mkdocs/lp/__init__.py#L113 Warning It should be clear that the evaluation result might change, even without any change in those headers, due to side-effects outside of our control. It remains upone the author of LP stanzas to decide upon re-evaluation.","title":"Hashing"},{"location":"features/lp/eval/#cache-files","text":"After a page was evaluated, a file is written, next to the .md source file, ending with .lp.py . The file contains a hash map, with keys the hashes of each block and value the raw (unformatted) result of the evaluation. The eval parameter determines now, if, at page build time, a new evaluation is performed or the result from the cache is taken, if available.","title":"Cache Files"},{"location":"features/lp/eval/#patching-the-mkdocs-file-watcher","text":"At first start of mkdocs we have to patch the filewatcher of mkdocs, in order to ignore .lp.py files. That prevents putting them into the site directory but also helps avoid evaluation loops. implementation Code def patch_mkdocs_to_ignore_res_file_changes (): \"\"\"sad. we must prevent mkdocs serve to rebuild each time we write a result file And we want those result files close to the docs, they should be in that tree. Also we save tons of rebuilds when preventing to monitor imgs - since often autocreated, e.g. from kroki or drawio. \"\"\" import mkdocs fn = mkdocs . __file__ . rsplit ( '/' , 1 )[ 0 ] fn += '/livereload/__init__.py' if not exists ( fn ): return app . warning ( 'Cannot patch mkdocs - version mismatch' , missing = fn ) s = read_file ( fn ) S = 'event.is_directory' if not S in s : return app . warning ( 'Cannot patch mkdocs - version mismatch' , missing = fn ) if lp_res_ext in s : return app . info ( 'mkdocs is already patched to ignore %s ' % lp_res_ext , fn = fn ) os . system ( 'cp \" %s \" \" %s .orig\"' % ( fn , fn )) new = S for ext in [ lp_res_ext , '.svg' , '.png' ]: new += ' or event.src_path.endswith(\" %s \") ' % ext new += ' or \"/autodocs\" in event.src_path ' # cannot write a comment due to the ':' s = s . replace ( S , new ) write_file ( fn , s ) diff = os . popen ( 'diff \" %s .orig\" \" %s \"' % ( fn , fn )) . read () . splitlines () app . info ( 'Diff' , json = diff ) msg = ( 'Have patched mkdocs to not watch %s and .svg files. Please restart.' % lp_res_ext ) app . die ( msg , fn = fn ) https://github.com/axiros/docutools/blob/master/src/lcdoc/mkdocs/lp/__init__.py#L664","title":"Patching the mkdocs file watcher"},{"location":"features/lp/eval/#cicd-comitting-cache-files","text":"Sometimes lp blocks can or should only be evaluated on your local machine - but not on CI/CD elsewhere. Example: You document how to set up a Kubernetes cluster in the cloud, using your cloud provider credentials, plus it takes 30 minutes until completed. You want to be able to prevent CI/CD to evaluate the specific blocks - or whole pages -, when running, i.e. when CI/CD is building the docs. Solution: Set eval to \"on_change\" or \"on_page_change\" You commit the .lp.py cache files of these pages and set eval to \"on_change\" or \"on_page_change\". The result (cache) files, for pages which should be evaluated on CI/CD (e.g. for additional testing purposes) you do NOT commit. Then the final docs will display the result from your local run, for the pages you committed the cache files for.","title":"CI/CD: Comitting Cache Files?"},{"location":"features/lp/eval/#the-eval-parameter","text":"Adjusting eval is key for having fast edit-render cycles, while authoring pages.","title":"The eval Parameter"},{"location":"features/lp/eval/#predefined-values","text":"Code class Eval : never = 'never' # not even when not cached always = 'always' # even when cached. except skipped on_change = 'on_change' # only when block changed on_page_change = 'on_page_change' # whan any block (md irrelevant) on page changed # Default: anything else would confuse user. e.g. cat <filename> would show old still when it changed but no lp change involved: default = 'always' https://github.com/axiros/docutools/blob/master/src/lcdoc/mkdocs/lp/__init__.py#L138 never: No evaluation. Typically given on page level, while writing a bunch of LP statements. Will never eval, even with a cache miss. on_change: Re-evaluation when the hash changes on_page_change: Re-evaluation of all blocks, when any hash changes on the page always: Always evaluate (the default)","title":"Predefined Values"},{"location":"features/lp/eval/#arbitrary-matching","text":"When working on a block or a page, you can also restrict evaluation to the current page or even block only, by specifying the eval parameter like so: <page match>[:<block match>] . Typically you do this via an environ parameter at start up of mkdocs build|serve : Warning Such a page match is checked against the full source path to markdown pages, from / (root) folder! So lp_eval=docs/index would match exactly on your main index.md. $ lp_eval = \"mypage\" mkdocs build $ lp_eval = \"mypage:myblockmatch\" mkdocs build When a block match was given, you can just add the match string within the header, e.g. as a boolean value. Example: ```bash lp myblockmatch < statements to eval> ``` When the block is correctly functioning, you can delete the match string and have the result in the cache file, moving on to the next block. Any non matching block is set to eval=\"never\" , i.e. results will be from cache - or when not present rendered as skipped. Hint To cause more than one block evaluated simply add the matching keyword argument in the header for all blocks you want.","title":"Arbitrary Matching"},{"location":"features/lp/eval/#skips","text":"The header exclusive argument <lang> lp skip_<this|other|below|above> will skip block execution accordingly, i.e. you can work your way towards a completely evaluatable page, from block to block. Note Behind the scenes, the eval parameter does nothing else than adding skip_this parameters to non evaluated blocks. typeof start_lc === \"undefined\" ? 0 : start_lc()","title":"Skips"},{"location":"features/lp/examples/","text":"@media only screen and (min-width: 76.25em) { .md-main__inner { max-width: none; } .md-sidebar--primary { left: 0; } .md-sidebar--secondary { right: 0; margin-left: 0; -webkit-transform: none; transform: none; } } LP Examples \u00a4 LP Source: ``` bash lp asserts = Hello fmt = xt_flat session = foo echo \"Hello World!\" ``` Result: $ echo \"Hello World!\" Hello World! LP Source: ``` bash lp asserts = Hello fmt = xt_flat ls -lta /etc | grep hosts # lp: asserts=hosts echo \"Hello World!\" # lp: asserts=\"[World and Hello] or Foo\" ``` Result: $ ls -lta /etc | grep hosts -rw-r--r-- 1 root root 484 Apr 11 14:54 hosts -rw-r--r-- 1 root root 411 Apr 4 21:40 hosts.allow -rw-r--r-- 1 root root 711 Apr 4 21:40 hosts.deny $ echo \"Hello World!\" Hello World! Defining a function for later use: LP Source: ``` bash lp new_session = test say_hello () { echo -e \"Hello, from \\n\" $( env | grep -i tmux ) \"\" ; } ``` Result: Cmd Output $ say_hello () { echo -e \"Hello, from \\n\"$(env | grep -i tmux)\"\"; } $ say_hello () { > echo -e \"Hello, from \\n\"$(env | grep -i tmux)\"\"; > } $ Heredocs \u00a4 the example includes the previously defined function: LP Source: ``` bash lp session = test asserts = TMUX echo $0 # lp: expect=bash export -f say_hello /bin/bash # lp: expect= echo $0 # lp: expect=bash say_hello R = \"\\x1b[\" ; r = \" ${ R } 1;31m\" echo -e \"Means: We do have > - $r Cross block sessions ${ R } 0m > - $r Blocking commands/subshells ${ R } 0m > - and... ${ R } 4m $r Full Ansi > \" ``` Result: Cmd Output $ echo $0 $ export -f say_hello $ /bin/bash $ echo $0 $ say_hello $ R = \"\\x1b[\" ; r = \" ${ R } 1;31m\" $ echo -e \"Means: We do have - $r Cross block sessions ${R}0m - $r Blocking commands/subshells ${R}0m - and...${R}4m$r Full Ansi \" $ echo $0 -bash $ $ export -f say_hello $ /bin/bash runner@fv-az177-760:~/work/docutools/docutools$ runner@fv-az177-760:~/work/docutools/docutools$ echo $0 /bin/bash runner@fv-az177-760:~/work/docutools/docutools$ runner@fv-az177-760:~/work/docutools/docutools$ say_hello Hello, from TMUX=/tmp/tmux-1001/default,2649,20 conda_project_tools=tmux poetry graphviz imagemagick TMUX_PANE=%20 TERM_PROGRAM=tmux BASH_FUNC_say_hello%%=() { echo -e \"Hello, from \"$(env | grep -i tmux)\"\" runner@fv-az177-760:~/work/docutools/docutools$ R=\"\\x1b[\"; r=\"${R}1;31m\" runner@fv-az177-760:~/work/docutools/docutools$ echo -e \"Means: We do have > - $r Cross block sessions ${R}0m > - $r Blocking commands/subshells ${R}0m > - and...${R}4m$r Full Ansi > \" Means: We do have - \u001b[1m\u001b[31m Cross block sessions \u001b[0m\u001b[39m\u001b[49m - \u001b[1m\u001b[31m Blocking commands/subshells \u001b[0m\u001b[39m\u001b[49m - and...\u001b[1;4m\u001b[31m Full Ansi\u001b[0m\u001b[39m\u001b[49m \u001b[1;4m\u001b[31mrunner@fv-az177-760:~/work/docutools/docutools$ \u001b[0m\u001b[39m\u001b[49m \u001b[1;4m\u001b[31m You can tmux att -t test to inspect what is going on. typeof start_lc === \"undefined\" ? 0 : start_lc() @media screen and (min-width: 2000px) { .md-grid { max-width: initial;} .lp-row { display: flex; } .lp-column { padding: 0; margin-left: 2%; margin-right: 2%; flex: 50.0%; max-width: 1000px; } }","title":"Examples"},{"location":"features/lp/examples/#lp-examples","text":"LP Source: ``` bash lp asserts = Hello fmt = xt_flat session = foo echo \"Hello World!\" ``` Result: $ echo \"Hello World!\" Hello World! LP Source: ``` bash lp asserts = Hello fmt = xt_flat ls -lta /etc | grep hosts # lp: asserts=hosts echo \"Hello World!\" # lp: asserts=\"[World and Hello] or Foo\" ``` Result: $ ls -lta /etc | grep hosts -rw-r--r-- 1 root root 484 Apr 11 14:54 hosts -rw-r--r-- 1 root root 411 Apr 4 21:40 hosts.allow -rw-r--r-- 1 root root 711 Apr 4 21:40 hosts.deny $ echo \"Hello World!\" Hello World! Defining a function for later use: LP Source: ``` bash lp new_session = test say_hello () { echo -e \"Hello, from \\n\" $( env | grep -i tmux ) \"\" ; } ``` Result: Cmd Output $ say_hello () { echo -e \"Hello, from \\n\"$(env | grep -i tmux)\"\"; } $ say_hello () { > echo -e \"Hello, from \\n\"$(env | grep -i tmux)\"\"; > } $","title":"LP Examples"},{"location":"features/lp/examples/#heredocs","text":"the example includes the previously defined function: LP Source: ``` bash lp session = test asserts = TMUX echo $0 # lp: expect=bash export -f say_hello /bin/bash # lp: expect= echo $0 # lp: expect=bash say_hello R = \"\\x1b[\" ; r = \" ${ R } 1;31m\" echo -e \"Means: We do have > - $r Cross block sessions ${ R } 0m > - $r Blocking commands/subshells ${ R } 0m > - and... ${ R } 4m $r Full Ansi > \" ``` Result: Cmd Output $ echo $0 $ export -f say_hello $ /bin/bash $ echo $0 $ say_hello $ R = \"\\x1b[\" ; r = \" ${ R } 1;31m\" $ echo -e \"Means: We do have - $r Cross block sessions ${R}0m - $r Blocking commands/subshells ${R}0m - and...${R}4m$r Full Ansi \" $ echo $0 -bash $ $ export -f say_hello $ /bin/bash runner@fv-az177-760:~/work/docutools/docutools$ runner@fv-az177-760:~/work/docutools/docutools$ echo $0 /bin/bash runner@fv-az177-760:~/work/docutools/docutools$ runner@fv-az177-760:~/work/docutools/docutools$ say_hello Hello, from TMUX=/tmp/tmux-1001/default,2649,20 conda_project_tools=tmux poetry graphviz imagemagick TMUX_PANE=%20 TERM_PROGRAM=tmux BASH_FUNC_say_hello%%=() { echo -e \"Hello, from \"$(env | grep -i tmux)\"\" runner@fv-az177-760:~/work/docutools/docutools$ R=\"\\x1b[\"; r=\"${R}1;31m\" runner@fv-az177-760:~/work/docutools/docutools$ echo -e \"Means: We do have > - $r Cross block sessions ${R}0m > - $r Blocking commands/subshells ${R}0m > - and...${R}4m$r Full Ansi > \" Means: We do have - \u001b[1m\u001b[31m Cross block sessions \u001b[0m\u001b[39m\u001b[49m - \u001b[1m\u001b[31m Blocking commands/subshells \u001b[0m\u001b[39m\u001b[49m - and...\u001b[1;4m\u001b[31m Full Ansi\u001b[0m\u001b[39m\u001b[49m \u001b[1;4m\u001b[31mrunner@fv-az177-760:~/work/docutools/docutools$ \u001b[0m\u001b[39m\u001b[49m \u001b[1;4m\u001b[31m You can tmux att -t test to inspect what is going on. typeof start_lc === \"undefined\" ? 0 : start_lc() @media screen and (min-width: 2000px) { .md-grid { max-width: initial;} .lp-row { display: flex; } .lp-column { padding: 0; margin-left: 2%; margin-right: 2%; flex: 50.0%; max-width: 1000px; } }","title":"Heredocs"},{"location":"features/lp/parameters/","text":"@media only screen and (min-width: 76.25em) { .md-main__inner { max-width: none; } .md-sidebar--primary { left: 0; } .md-sidebar--secondary { right: 0; margin-left: 0; -webkit-transform: none; transform: none; } } Supported Parameters \u00a4 Except when otherwise noted, these parameters can be given - per environment - per page - per block and - per statement They work in session or non session mode. Syntax details here . Parameter Support Note that most but not all parameters do make sense for all plugins, e.g. prompt . The ones listed are all supported for bash shell mode. The session specific params make sense only for plugins which do support sessions ( bash , python ) addsrc / addsrc= <fmt|title> \u00a4 ( boolean or source format or title) Adds the lp source into the rendered page All examples on this page use that header, set on page level. See AddSrcFormats regarding available formats. When you say addsrc=<a string> then we'll use format number 4 and set that string as the title. Example: ```bash lp addsrc=Example fmt=mk_console ls /etc | head -n 3 ``` Renders: Example Source $ ls /etc | head -n 3 adduser.conf alternatives apache2 ``` bash lp addsrc = Example fmt = mk_console ls /etc | head -n 3 ``` asserts \u00a4 asserts=<match string or condition> Raises an exception, if the expected string is not found in the result of an evaluation. Via this you can use LP as an (additional) functional test suite (and avoid broken docu). You may specify a single string or a pycond expression. bash lp asserts dwrx or bash lp asserts=['root', 'dwrx'] or even `bash lp asserts='[root and dwrx] and not fubar' (see here for valid expressions) Your docu build will exit with error on an assertion failure. Example LP Source: ``` bash lp asserts = etc ls / # statement specific assertion: echo hi # lp: asserts=\"hi and not [bar or etc]\" ``` Result: Cmd Output $ ls / $ # statement specific assertion: $ echo hi $ ls / bin boot data dev etc home imagegeneration lib lib32 lib64 libx32 lost+found media mnt opt proc root run sbin snap srv sys tmp usr var $ # statement specific assertion: $ echo hi hi As you can see, if given at block level all results of all evaluations of the block are matched. body \u00a4 body=<lp body string> Provides the body of the LP statement If you only have a short body you may use the short form and provide it within the header using that parameter. Caution If you have a real body as well and it is a string, then we will prefix it with this header value. Example LP Source (shortform): `lp:bash cwd='/etc', asserts='hosts', body='ls . | grep host'` Result: Cmd Output $ ls . | grep host $ ls . | grep host host.conf hostname hosts hosts.allow hosts.deny cwd \u00a4 cwd=<directory> change directory before running the command Example LP Source: ``` bash lp cwd = /etc asserts = hosts ls . | grep hosts ``` Result: Cmd Output $ ls . | grep hosts $ ls . | grep hosts hosts hosts.allow hosts.deny eval \u00a4 eval=<never|always|on_change|on_page_change|<page match[:block match]> Determines which blocks to evaluate at mkdocs build or mkdocs serve Please see the specific chapter about eval . expect \u00a4 expect=<match string or condition> or False Wait for this string to show up in the output Makes no much sense in singleshot mode, where we simply run commands, until they complete. In singleshot mode use asserts to fail if an expected result is not showing up. Useful e.g. when, within sessions, a command blocks forever. As soon as the string occurs within the output, we stop listening and return as result what we have seen so far. If set to False then all we stop collecting results when timeout is reached (no timeout error then). Warning If the session is not stopped or Ctrl-C is sent (see example), then the command will be running even after mkdocs build . Example We set to False, causing evaluation to stop after the timeout - otherwise this would run forever: LP Source: ``` bash lp timeout = 0 .1 session = test while true ; do date ; sleep 0 .05 ; done # lp: expect=false send-keys: C-c # we will reuse that session, so we send ctrl-c ``` Result: Cmd Output $ while true ; do date ; sleep 0 .05 ; done runner@fv-az177-760:~/work/docutools/docutools$ while true; do date; sleep 0.05; done Mon 11 Apr 2022 02:55:30 PM UTC Mon 11 Apr 2022 02:55:30 PM UTC Mon 11 Apr 2022 02:55:30 PM UTC fetch \u00a4 fetch=<use_case_name> Async Result Fetching from Server The evaluation output content is fetched after page load as soon as the user clicks on the output tab. This significantly improves pages load times, when there is a lot of output. Example LP Source: ``` bash lp session = test fetch = async_example ls -lt /usr/bin | head -n 12 ``` Result: Cmd Output $ ls -lt /usr/bin | head -n 12 remote_content Here is more about the mechanics. fmt \u00a4 fmt=<mk_console|mk_cmd_out|xt_flat> Determines Markdown Representation of Results mk_cmd_out : Displays two tabs, with command and output xt_flat : Command and output in one go, xterm formatted ANSI escape codes mk_console : An mkdocs console fenced code statement is produced, no ANSI escape formatting by xterm (the command is highlighted by mkdocs). xt_flat output must be visible at page load Due to a technical restriction you currently cannot hide embedded or fetched xt_flat output within closed admonitions. You may use ???+ note \"title\" style closeable admonitions though. Default is mk_cmd_out Examples mk_console LP Source: ``` bash lp fmt = mk_console echo Hello ``` Result: $ echo Hello Hello xt_flat LP Source: ``` bash lp fmt = xt_flat echo Hello ``` Result: $ echo Hello Hello mk_cmd_out LP Source: ``` bash lp fmt = mk_cmd_out echo Hello ``` Result: Cmd Output $ echo Hello $ echo Hello Hello Custom Formats Plugins can also decide to deliver their own formatted markdown. hide_cmd \u00a4 ( boolean ) When set to True then command itself wont' be displayed. Currently this is only supported in singleshot mode. Example LP Source: ``` bash lp cwd = /etc hide_cmd ls . | grep hosts ``` Result: hosts hosts.allow hosts.deny kill_session \u00a4 ( boolean ) When set to True then the session will be killed after evaluation By definition, this is only supported in session mode. Example LP Source: ``` bash lp kill_session session = kill_test tmux list-sessions | grep kill_test ls . | grep hosts ``` Result: Cmd Output $ tmux list-sessions | grep kill_test $ ls . | grep hosts $ tmux list-sessions | grep kill_test kill_test: 1 windows (created Mon Apr 11 14:55:31 2022) $ ls . | grep hosts LP Source: ``` bash lp asserts = \"not kill_test\" tmux list-sessions | grep test || true ``` Result: Cmd Output $ tmux list-sessions | grep test || true $ tmux list-sessions | grep test || true docutest: 1 windows (created Mon Apr 11 14:55:11 2022) dt_test: 1 windows (created Mon Apr 11 14:55:13 2022) nodejs_test: 1 windows (created Mon Apr 11 14:55:12 2022) test: 1 windows (created Mon Apr 11 14:55:30 2022) test1: 1 windows (created Mon Apr 11 14:55:02 2022) lang \u00a4 lang=<code block highlighting language> Sets the highlighting language for code blocks In the normal form the lang param is taken from the word after the fences, e.g. \"foo\" for ```foo lp ... ``` When using the shortform we lack that information and the lang parameter allows to set it. E.g. for srcrefs : `lp:show_src delim=insert_readme_badges dir=src/lcdoc lang=python` mode \u00a4 mode=<plugin name> or <lang> lp:<mode> Pass evaluation into various plugins See here for a list of included plugins. The value \" page \" is a special mode, not specifying a plugin but setting the following header parameters page wide for all blocks as defaults. Example: lp:page timeout=20 (short form used) new_session \u00a4 new_session=<tmux session name> Runs the block within a new tmux session If the session already exists, it will be destroyed before running. Example LP Source: ``` bash lp new_session = docutest date tmux list-sessions | grep docutest ``` Result: Cmd Output $ date $ tmux list-sessions | grep docutest $ date Mon 11 Apr 2022 02:55:31 PM UTC $ tmux list-sessions | grep docutest docutest: 1 windows (created Mon Apr 11 14:55:31 2022) Here is more about sessions. pdb \u00a4 ( boolean ) Enter debug mode before and after evaluation Example ```bash lp pdb ls . ``` The execution will be halted and you get the chance to inspect variables and step through the code. post \u00a4 post=<some command> Runs something after the (output recorded) commands Examples Block level: ```bash lp=True, cwd='/tmp', asserts='barfoo', pre='touch barfoo|true', post='rm barfoo' ls | grep barfoo - Statement level: <!-- id: 769df295faa580e12128bda02816d4d6 --> LP Source: ```bash ```bash lp cwd=/tmp asserts=foobar session=test [{'pre': 'touch foobar|true', 'cmd': 'ls foo*', 'asserts': 'foobar', 'post': 'rm foobar'}, 'ls foobar # lp: asserts=\"cannot\"'] ``` Result: Cmd Output $ ls foo* $ ls foobar # lp: asserts=\"cannot\" runner@fv-az177-760:/tmp$ ls foo* foobar runner@fv-az177-760:/tmp$ ls foobar # lp: asserts=\"cannot\" ls: cannot access 'foobar': No such file or directory runner@fv-az177-760:/tmp$ Given at block level, the post command is only run once, even if there are more than one individual statements within the body of the block. pre \u00a4 pre=<some command> Runs something, before the (output recorded) commands Examples Block level: ```bash lp=True, cwd='/tmp', asserts='barfoo', pre='touch barfoo|true' ls | grep bar - Statement level: <!-- id: 965b08f5197dc837bb67c52329d528b6 --> LP Source: ```bash ```bash lp cwd=/tmp asserts=foobar session=test {'pre': 'touch foobar|true', 'cmd': 'ls foo*', 'asserts': 'foobar'} ``` Result: Cmd Output $ ls foo* runner@fv-az177-760:/tmp$ ls foo* foobar Given at block level, the pre command is only run once, even if there are more than one individual statements within the body of the block. prompt \u00a4 prompt=<prompt> Sets the prompt string Default is '$ '. Example LP Source: ``` bash lp prompt = \"/foo/bar>\" session = docutest echo -e '$ foo' ``` Result: Cmd Output /foo/bar> echo -e '$ foo' $ echo -e '$ foo' $ foo In sessions we do this by exporting $PS1 to the given value, plus a space, at beginning of the session. runner \u00a4 ( boolean ) Will run LP block locally The runner parameter will include the LP block into those which are run, when a user calls the URL with the mdrun script . Note Currently only for bash mode, with or without sessions. session \u00a4 session=<tmux session name> Runs the block within a tmux session If the session already exists, it will be re-used. Example LP Source: ``` bash lp session = docutest tmux list-sessions | grep docutest ``` Result: Cmd Output $ tmux list-sessions | grep docutest $ tmux list-sessions | grep docutest docutest: 1 windows (created Mon Apr 11 14:55:31 2022) Here is more about sessions. silent \u00a4 ( boolean ) Run the command(s) normally but do not create any markdown Examples LP Source: ``` bash lp rm /tmp/silent_test || true ``` Result: Cmd Output $ rm /tmp/silent_test || true $ rm /tmp/silent_test || true rm: cannot remove '/tmp/silent_test': No such file or directory LP Source: ``` bash lp silent touch /tmp/silent_test ``` Result: nothing is shown for block execution but the command was executed: LP Source: ``` bash lp ls -lta /tmp/silent_test rm /tmp/silent_test # lp: silent ``` Result: Cmd Output $ ls -lta /tmp/silent_test $ ls -lta /tmp/silent_test -rw-r--r-- 1 runner docker 0 Apr 11 14:55 /tmp/silent_test The last line shows silent on statement level. src \u00a4 src=<filename, relative to page or absolute> References a source file This header parameter standardizes the use of external sources, e.g. for diagrams (plantuml, drawio, mermaid, ...). Their mtime (last modification time) goes into the hash of the whole LP block, thus triggering re-evaluation (e.g. a diagram to svg conversion) when the source changed. Note that the lp block stays constant, i.e. we would otherwise not re-eval the block when eval policy is the usual on_change . For plugin convenience this automatically also adds an abs_src parameter into the header arguments, with the page's absolute directory resolved. timeout \u00a4 timeout=<seconds> (session only cmd) Time until timeout error is raised, waiting for results in sessions Example This would fail with timeout error: ```bash lp timeout=0.1 session=test sleep 0.2 ``` with_paths \u00a4 ( boolean ) (session only cmd) Before a sequence of commands is run, we export $PATH and $PYTHONPATH of the calling process within tmux A tmux session is started by issuing the tmux command - which starts the tmux server process, when there is non running. It might have a different process environment than the mkdocs process. With with_paths we export the two critical parameters before starting tmux. typeof start_lc === \"undefined\" ? 0 : start_lc()","title":"Parameters"},{"location":"features/lp/parameters/#supported-parameters","text":"Except when otherwise noted, these parameters can be given - per environment - per page - per block and - per statement They work in session or non session mode. Syntax details here . Parameter Support Note that most but not all parameters do make sense for all plugins, e.g. prompt . The ones listed are all supported for bash shell mode. The session specific params make sense only for plugins which do support sessions ( bash , python )","title":"Supported Parameters"},{"location":"features/lp/parameters/#addsrc-addsrcfmttitle","text":"( boolean or source format or title) Adds the lp source into the rendered page All examples on this page use that header, set on page level. See AddSrcFormats regarding available formats. When you say addsrc=<a string> then we'll use format number 4 and set that string as the title. Example: ```bash lp addsrc=Example fmt=mk_console ls /etc | head -n 3 ``` Renders: Example Source $ ls /etc | head -n 3 adduser.conf alternatives apache2 ``` bash lp addsrc = Example fmt = mk_console ls /etc | head -n 3 ```","title":"addsrc / addsrc=&lt;fmt|title&gt;"},{"location":"features/lp/parameters/#asserts","text":"asserts=<match string or condition> Raises an exception, if the expected string is not found in the result of an evaluation. Via this you can use LP as an (additional) functional test suite (and avoid broken docu). You may specify a single string or a pycond expression. bash lp asserts dwrx or bash lp asserts=['root', 'dwrx'] or even `bash lp asserts='[root and dwrx] and not fubar' (see here for valid expressions) Your docu build will exit with error on an assertion failure. Example LP Source: ``` bash lp asserts = etc ls / # statement specific assertion: echo hi # lp: asserts=\"hi and not [bar or etc]\" ``` Result: Cmd Output $ ls / $ # statement specific assertion: $ echo hi $ ls / bin boot data dev etc home imagegeneration lib lib32 lib64 libx32 lost+found media mnt opt proc root run sbin snap srv sys tmp usr var $ # statement specific assertion: $ echo hi hi As you can see, if given at block level all results of all evaluations of the block are matched.","title":"asserts"},{"location":"features/lp/parameters/#body","text":"body=<lp body string> Provides the body of the LP statement If you only have a short body you may use the short form and provide it within the header using that parameter. Caution If you have a real body as well and it is a string, then we will prefix it with this header value. Example LP Source (shortform): `lp:bash cwd='/etc', asserts='hosts', body='ls . | grep host'` Result: Cmd Output $ ls . | grep host $ ls . | grep host host.conf hostname hosts hosts.allow hosts.deny","title":"body"},{"location":"features/lp/parameters/#cwd","text":"cwd=<directory> change directory before running the command Example LP Source: ``` bash lp cwd = /etc asserts = hosts ls . | grep hosts ``` Result: Cmd Output $ ls . | grep hosts $ ls . | grep hosts hosts hosts.allow hosts.deny","title":"cwd"},{"location":"features/lp/parameters/#eval","text":"eval=<never|always|on_change|on_page_change|<page match[:block match]> Determines which blocks to evaluate at mkdocs build or mkdocs serve Please see the specific chapter about eval .","title":"eval"},{"location":"features/lp/parameters/#expect","text":"expect=<match string or condition> or False Wait for this string to show up in the output Makes no much sense in singleshot mode, where we simply run commands, until they complete. In singleshot mode use asserts to fail if an expected result is not showing up. Useful e.g. when, within sessions, a command blocks forever. As soon as the string occurs within the output, we stop listening and return as result what we have seen so far. If set to False then all we stop collecting results when timeout is reached (no timeout error then). Warning If the session is not stopped or Ctrl-C is sent (see example), then the command will be running even after mkdocs build . Example We set to False, causing evaluation to stop after the timeout - otherwise this would run forever: LP Source: ``` bash lp timeout = 0 .1 session = test while true ; do date ; sleep 0 .05 ; done # lp: expect=false send-keys: C-c # we will reuse that session, so we send ctrl-c ``` Result: Cmd Output $ while true ; do date ; sleep 0 .05 ; done runner@fv-az177-760:~/work/docutools/docutools$ while true; do date; sleep 0.05; done Mon 11 Apr 2022 02:55:30 PM UTC Mon 11 Apr 2022 02:55:30 PM UTC Mon 11 Apr 2022 02:55:30 PM UTC","title":"expect"},{"location":"features/lp/parameters/#fetch","text":"fetch=<use_case_name> Async Result Fetching from Server The evaluation output content is fetched after page load as soon as the user clicks on the output tab. This significantly improves pages load times, when there is a lot of output. Example LP Source: ``` bash lp session = test fetch = async_example ls -lt /usr/bin | head -n 12 ``` Result: Cmd Output $ ls -lt /usr/bin | head -n 12 remote_content Here is more about the mechanics.","title":"fetch"},{"location":"features/lp/parameters/#fmt","text":"fmt=<mk_console|mk_cmd_out|xt_flat> Determines Markdown Representation of Results mk_cmd_out : Displays two tabs, with command and output xt_flat : Command and output in one go, xterm formatted ANSI escape codes mk_console : An mkdocs console fenced code statement is produced, no ANSI escape formatting by xterm (the command is highlighted by mkdocs). xt_flat output must be visible at page load Due to a technical restriction you currently cannot hide embedded or fetched xt_flat output within closed admonitions. You may use ???+ note \"title\" style closeable admonitions though. Default is mk_cmd_out Examples mk_console LP Source: ``` bash lp fmt = mk_console echo Hello ``` Result: $ echo Hello Hello xt_flat LP Source: ``` bash lp fmt = xt_flat echo Hello ``` Result: $ echo Hello Hello mk_cmd_out LP Source: ``` bash lp fmt = mk_cmd_out echo Hello ``` Result: Cmd Output $ echo Hello $ echo Hello Hello Custom Formats Plugins can also decide to deliver their own formatted markdown.","title":"fmt"},{"location":"features/lp/parameters/#hide_cmd","text":"( boolean ) When set to True then command itself wont' be displayed. Currently this is only supported in singleshot mode. Example LP Source: ``` bash lp cwd = /etc hide_cmd ls . | grep hosts ``` Result: hosts hosts.allow hosts.deny","title":"hide_cmd"},{"location":"features/lp/parameters/#kill_session","text":"( boolean ) When set to True then the session will be killed after evaluation By definition, this is only supported in session mode. Example LP Source: ``` bash lp kill_session session = kill_test tmux list-sessions | grep kill_test ls . | grep hosts ``` Result: Cmd Output $ tmux list-sessions | grep kill_test $ ls . | grep hosts $ tmux list-sessions | grep kill_test kill_test: 1 windows (created Mon Apr 11 14:55:31 2022) $ ls . | grep hosts LP Source: ``` bash lp asserts = \"not kill_test\" tmux list-sessions | grep test || true ``` Result: Cmd Output $ tmux list-sessions | grep test || true $ tmux list-sessions | grep test || true docutest: 1 windows (created Mon Apr 11 14:55:11 2022) dt_test: 1 windows (created Mon Apr 11 14:55:13 2022) nodejs_test: 1 windows (created Mon Apr 11 14:55:12 2022) test: 1 windows (created Mon Apr 11 14:55:30 2022) test1: 1 windows (created Mon Apr 11 14:55:02 2022)","title":"kill_session"},{"location":"features/lp/parameters/#lang","text":"lang=<code block highlighting language> Sets the highlighting language for code blocks In the normal form the lang param is taken from the word after the fences, e.g. \"foo\" for ```foo lp ... ``` When using the shortform we lack that information and the lang parameter allows to set it. E.g. for srcrefs : `lp:show_src delim=insert_readme_badges dir=src/lcdoc lang=python`","title":"lang"},{"location":"features/lp/parameters/#mode","text":"mode=<plugin name> or <lang> lp:<mode> Pass evaluation into various plugins See here for a list of included plugins. The value \" page \" is a special mode, not specifying a plugin but setting the following header parameters page wide for all blocks as defaults. Example: lp:page timeout=20 (short form used)","title":"mode"},{"location":"features/lp/parameters/#new_session","text":"new_session=<tmux session name> Runs the block within a new tmux session If the session already exists, it will be destroyed before running. Example LP Source: ``` bash lp new_session = docutest date tmux list-sessions | grep docutest ``` Result: Cmd Output $ date $ tmux list-sessions | grep docutest $ date Mon 11 Apr 2022 02:55:31 PM UTC $ tmux list-sessions | grep docutest docutest: 1 windows (created Mon Apr 11 14:55:31 2022) Here is more about sessions.","title":"new_session"},{"location":"features/lp/parameters/#pdb","text":"( boolean ) Enter debug mode before and after evaluation Example ```bash lp pdb ls . ``` The execution will be halted and you get the chance to inspect variables and step through the code.","title":"pdb"},{"location":"features/lp/parameters/#post","text":"post=<some command> Runs something after the (output recorded) commands Examples Block level: ```bash lp=True, cwd='/tmp', asserts='barfoo', pre='touch barfoo|true', post='rm barfoo' ls | grep barfoo - Statement level: <!-- id: 769df295faa580e12128bda02816d4d6 --> LP Source: ```bash ```bash lp cwd=/tmp asserts=foobar session=test [{'pre': 'touch foobar|true', 'cmd': 'ls foo*', 'asserts': 'foobar', 'post': 'rm foobar'}, 'ls foobar # lp: asserts=\"cannot\"'] ``` Result: Cmd Output $ ls foo* $ ls foobar # lp: asserts=\"cannot\" runner@fv-az177-760:/tmp$ ls foo* foobar runner@fv-az177-760:/tmp$ ls foobar # lp: asserts=\"cannot\" ls: cannot access 'foobar': No such file or directory runner@fv-az177-760:/tmp$ Given at block level, the post command is only run once, even if there are more than one individual statements within the body of the block.","title":"post"},{"location":"features/lp/parameters/#pre","text":"pre=<some command> Runs something, before the (output recorded) commands Examples Block level: ```bash lp=True, cwd='/tmp', asserts='barfoo', pre='touch barfoo|true' ls | grep bar - Statement level: <!-- id: 965b08f5197dc837bb67c52329d528b6 --> LP Source: ```bash ```bash lp cwd=/tmp asserts=foobar session=test {'pre': 'touch foobar|true', 'cmd': 'ls foo*', 'asserts': 'foobar'} ``` Result: Cmd Output $ ls foo* runner@fv-az177-760:/tmp$ ls foo* foobar Given at block level, the pre command is only run once, even if there are more than one individual statements within the body of the block.","title":"pre"},{"location":"features/lp/parameters/#prompt","text":"prompt=<prompt> Sets the prompt string Default is '$ '. Example LP Source: ``` bash lp prompt = \"/foo/bar>\" session = docutest echo -e '$ foo' ``` Result: Cmd Output /foo/bar> echo -e '$ foo' $ echo -e '$ foo' $ foo In sessions we do this by exporting $PS1 to the given value, plus a space, at beginning of the session.","title":"prompt"},{"location":"features/lp/parameters/#runner","text":"( boolean ) Will run LP block locally The runner parameter will include the LP block into those which are run, when a user calls the URL with the mdrun script . Note Currently only for bash mode, with or without sessions.","title":"runner"},{"location":"features/lp/parameters/#session","text":"session=<tmux session name> Runs the block within a tmux session If the session already exists, it will be re-used. Example LP Source: ``` bash lp session = docutest tmux list-sessions | grep docutest ``` Result: Cmd Output $ tmux list-sessions | grep docutest $ tmux list-sessions | grep docutest docutest: 1 windows (created Mon Apr 11 14:55:31 2022) Here is more about sessions.","title":"session"},{"location":"features/lp/parameters/#silent","text":"( boolean ) Run the command(s) normally but do not create any markdown Examples LP Source: ``` bash lp rm /tmp/silent_test || true ``` Result: Cmd Output $ rm /tmp/silent_test || true $ rm /tmp/silent_test || true rm: cannot remove '/tmp/silent_test': No such file or directory LP Source: ``` bash lp silent touch /tmp/silent_test ``` Result: nothing is shown for block execution but the command was executed: LP Source: ``` bash lp ls -lta /tmp/silent_test rm /tmp/silent_test # lp: silent ``` Result: Cmd Output $ ls -lta /tmp/silent_test $ ls -lta /tmp/silent_test -rw-r--r-- 1 runner docker 0 Apr 11 14:55 /tmp/silent_test The last line shows silent on statement level.","title":"silent"},{"location":"features/lp/parameters/#src","text":"src=<filename, relative to page or absolute> References a source file This header parameter standardizes the use of external sources, e.g. for diagrams (plantuml, drawio, mermaid, ...). Their mtime (last modification time) goes into the hash of the whole LP block, thus triggering re-evaluation (e.g. a diagram to svg conversion) when the source changed. Note that the lp block stays constant, i.e. we would otherwise not re-eval the block when eval policy is the usual on_change . For plugin convenience this automatically also adds an abs_src parameter into the header arguments, with the page's absolute directory resolved.","title":"src"},{"location":"features/lp/parameters/#timeout","text":"timeout=<seconds> (session only cmd) Time until timeout error is raised, waiting for results in sessions Example This would fail with timeout error: ```bash lp timeout=0.1 session=test sleep 0.2 ```","title":"timeout"},{"location":"features/lp/parameters/#with_paths","text":"( boolean ) (session only cmd) Before a sequence of commands is run, we export $PATH and $PYTHONPATH of the calling process within tmux A tmux session is started by issuing the tmux command - which starts the tmux server process, when there is non running. It might have a different process environment than the mkdocs process. With with_paths we export the two critical parameters before starting tmux. typeof start_lc === \"undefined\" ? 0 : start_lc()","title":"with_paths"},{"location":"features/lp/sessions/","text":"@media only screen and (min-width: 76.25em) { .md-main__inner { max-width: none; } .md-sidebar--primary { left: 0; } .md-sidebar--secondary { right: 0; margin-left: 0; -webkit-transform: none; transform: none; } } Sessions \u00a4 Some plugins, currently bash and python support sessions, via which you can transfer state between LP blocks. See the specific plugins for technical details. Here we only explain the differences. The Multipurpose Shell Session \u00a4 Spawns a tmux process, sends commands in, read results out. Can be used not only for code but e.g. also to control REPLs: Example Node Session \u00a4 Typically this would be silent Starting nodejs Source $ node Welcome to Node.js v16.14.2. Type \".help\" for more information. > ```javascript lp new_session=nodejs_test addsrc=\"Starting nodejs\" timeout=10 expect=> fmt=xt_flat node ``` Now you have a node session and can do things - but first keep params at one place: First interaction: LP Source: ```javascript lp answer = 42 ``` Result: > answer = 42 \u001b[33m42\u001b[39m > Second interaction: LP Source: ```javascript lp console.log('The answer to everything is:', answer) ``` Result: > console.log('The answer to everything is:', answer) The answer to everything is: \u001b[33m42\u001b[39m \u001b[90mundefined\u001b[39m > Note As you can see the coloring is from nodejs, not from the javascript html pretty print. We have javascript as language only for syntax highlighting within the editor. The LP sources are shown only due to the addsrc parameter in our block headers. The Python Session \u00a4 While tmux sessions are run within a subprocess, python session state is resident within the mkdocs build process itself - no need to send and read strings via the tmux api here (mkdocs is a python process). typeof start_lc === \"undefined\" ? 0 : start_lc()","title":"Sessions"},{"location":"features/lp/sessions/#sessions","text":"Some plugins, currently bash and python support sessions, via which you can transfer state between LP blocks. See the specific plugins for technical details. Here we only explain the differences.","title":"Sessions"},{"location":"features/lp/sessions/#the-multipurpose-shell-session","text":"Spawns a tmux process, sends commands in, read results out. Can be used not only for code but e.g. also to control REPLs:","title":"The Multipurpose Shell Session"},{"location":"features/lp/sessions/#example-node-session","text":"Typically this would be silent Starting nodejs Source $ node Welcome to Node.js v16.14.2. Type \".help\" for more information. > ```javascript lp new_session=nodejs_test addsrc=\"Starting nodejs\" timeout=10 expect=> fmt=xt_flat node ``` Now you have a node session and can do things - but first keep params at one place: First interaction: LP Source: ```javascript lp answer = 42 ``` Result: > answer = 42 \u001b[33m42\u001b[39m > Second interaction: LP Source: ```javascript lp console.log('The answer to everything is:', answer) ``` Result: > console.log('The answer to everything is:', answer) The answer to everything is: \u001b[33m42\u001b[39m \u001b[90mundefined\u001b[39m > Note As you can see the coloring is from nodejs, not from the javascript html pretty print. We have javascript as language only for syntax highlighting within the editor. The LP sources are shown only due to the addsrc parameter in our block headers.","title":"Example Node Session"},{"location":"features/lp/sessions/#the-python-session","text":"While tmux sessions are run within a subprocess, python session state is resident within the mkdocs build process itself - no need to send and read strings via the tmux api here (mkdocs is a python process). typeof start_lc === \"undefined\" ? 0 : start_lc()","title":"The Python Session"},{"location":"features/lp/syntax/","text":"@media only screen and (min-width: 76.25em) { .md-main__inner { max-width: none; } .md-sidebar--primary { left: 0; } .md-sidebar--secondary { right: 0; margin-left: 0; -webkit-transform: none; transform: none; } } Literate Programming (lp) Syntax \u00a4 Normal Form \u00a4 lp blocks are special fenced code blocks within a markdown page and look like so: LP Source: ``` bash lp addsrc fmt = mk_console echo \"Hello ${ User :- World } \" ``` Result: $ echo \"Hello ${ User :- World } \" Hello World or more general: ```<lang> lp[:mode] [block level (=header) parameters] <---- lp block header statement 1 [per statement parameters] (...) <---- lp block body [statement n] ``` mode : The mode parameter determines the block processing mode. Default is shell mode (\"bash\") may also be supplied via a keyword parameter: lang lp:foo equal to lang lp mode=foo . lang : The word before \"lp\" is for Markdown not for LP. It is declaring the code block formatting language, and is not relevant for LP itself. Short Form \u00a4 There is a short form , for blocks without a body: `lp:<mode> [parameters]` In the short form the mode must be added to lp: . See below for more about the short form. Detection \u00a4 We parse the markdown source line by line. We have a state variable fenced , initially False . Normal Form \u00a4 Block Start \u00a4 fenced is False A line must start with n spaces ( n \u2265 0 ) Followed by 3 backticks. fenced is set to True . Followed by a word (any letter except space), the formatting language Followed by \" lp \" then a space OR \" lp: \" then a word, the mode parameter All following lines are the block body - until: Block End \u00a4 fenced is True A line starts with m spaces ( m = n ) Followed by 3 backticks Followed by any number of spaces. fenced is set to False Example \u00a4 An Admonition With An Inner LP Block LP Source: ``` bash lp addsrc echo \"hello world\" ``` Result: Cmd Output $ echo \"hello world\" $ echo \"hello world\" hello world Summary \u00a4 In general this means that LP blocks look like normal fenced code blocks except: The first (header) line has more parameters than just the formatting language They are also detected within HTML, if the criteria are met: HTML Example: < div style = \"color:gray\" > ```_ lp:python import time; now = time.ctime(); show(f\"Hello from python, at < b > {now} </ b > !\") ``` </ div > Result: Hello from python, at Mon Apr 11 14:55:32 2022 ! See here regarding the show function. Short Form \u00a4 fenced is False A line must start with n spaces ( n \u2265 0 ) Followed by 1 backtick Followed by lp: Followed by k characters except space, with k \u2265 1 ) The line ends with a backtick, followed by any number of spaces. Parametrization \u00a4 Evaluation is parametrized by keys and values, which may be given via the environment, per page, per block and per statement, with priority in this order. Here is the list of supported parameters, for the default mode: bash . Environment \u00a4 A parameter foo may be set to value bar for all lp blocks within your docs set like so: LP_foo = bar mkdocs build export LP_foo = bar ; mkdocs build # and for convenience also the lower case form: lp_foo = bar mkdocs build Page Level \u00a4 You may specify a parameter for all blocks within a specific markdown page like so: Normal Form: ```my_lang lp:page foo=bar # or: ```my_lang lp mode=page foo=bar ``` Short Form: `lp:page foo=bar` i.e. by specifying the keyword \" page \" as mode Position matters The parameters in mode=page headers are only valid for all lp blocks below the declaration. You may set to a different value, mid-page. You may use more than one page block. Block Level \u00a4 This sets the value for just one block: ```bash lp foo=bar echo Hello ``` Statement Level \u00a4 This set the value for just one statement: ```bash lp echo Hello # lp: foo=bar echo World # while executing this, foo is NOT set (except when defined elsewhere) ``` Parameter Syntax \u00a4 Parameters may either be delivered python signature compliant or \"easy args\" style: # easy args (=true is default): ``` bash lp foo = bar f = 1 .23 foo = true bar asserts = \"foo and bar\" # python signature compliant form: ``` bash lp foo = 'bar' , f = 1 .23, foo = True, bar = True, asserts = \"foo and bar\" When easy args parsing fails, then python signature mode is tried. Easy Args Conventions and Restrictions No spaces in key=value allowed for easy args, except when value between double or single quotes ( \" or ' ). mykey allowed, identical to mykey=true Casting canonical: 1.123 considered float, 42 considered int, true considered bool, else string Presets \u00a4 These keywords will be dynamically replaced within headers: key value dir_repo Set to directory of the repository dir_project Set to project root directory Examples: ```bash lp session=project cwd=dir_repo # easy args style ```bash lp session='project', cwd=dir_repo # sig args style Available Environment Variables \u00a4 If you want to work with/generate assets relative to your docu, these should be practical: $ env | grep LP_ # any env var starting with lp_ or LP_ is put into the session LP_DOCU_FILE=/home/runner/work/docutools/docutools/docs/features/lp/syntax.md LP_DOCU_ROOT=/home/runner/work/docutools/docutools/docs LP_PROJECT_ROOT=/home/runner/work/docutools/docutools LP_DOCU_DIR=/home/runner/work/docutools/docutools/docs/features/lp These are also put into new tmux sessions (at new_session ): $ env | grep LP_ LP_DOCU_FILE=/home/runner/work/docutools/docutools/docs/features/lp/syntax.md LP_DOCU_ROOT=/home/runner/work/docutools/docutools/docs LP_PROJECT_ROOT=/home/runner/work/docutools/docutools LP_DOCU_DIR=/home/runner/work/docutools/docutools/docs/features/lp $ env | grep TMUX TMUX=/tmp/tmux-1001/default,2649,24 TMUX_PANE=%24 You can reference any env var as a \"dollar var\" within your header args. Short Form for LP Plugins Without Body \u00a4 Some plugins do not need a body to evaluate. Then you can also express lp blocks via the short form: `lp:<mode(plugin name)> [header params like normal]` Example: `lp:lightbox match=img` Must be within separate lines The short form can not work as inline statement (i.e. between other words in a line). You (still) need to have exclusively one statement per line. If you do have a (short) body, you may supply it via the body parameter: `lp:python body=print(42)` Evaluation \u00a4 Statements \u00a4 Within an lp block can be more than one statement contained. We run the statements consecutively. Staments can be given per line or a in a structured way: ```bash lp echo hello # lp: asserts=hello echo world ``` is equivalent to ``` bash lp [{ 'cmd' : 'echo hello' , 'asserts' : 'hello' }, { 'cmd' : 'echo world' }] ``` Hint In structured mode you can omit the list notation, if there is just one command and simply supply a dict with cmd and parameters . Multiline Commands / Here Docs \u00a4 Here Docs come handy when you have dynamic variable from a previous command, which you need to set into a file. Like this, i.e. use the '> ' indicator at beginning of lines, which should be run as single commands. LP Source: ``` bash lp addsrc session = DO asserts = foobarbazXsecond_line foo () { echo bar ; } cat << EOF > test.pyc > foo$(foo)baz > second_line > EOF cat test.pyc | sed -z \"s/\\n/X/g\" | grep 'foobarbazXsecond_line' ``` Result: Cmd Output $ foo () { echo bar ; } $ cat << EOF > test.pyc foo$(foo)baz second_line EOF $ cat test.pyc | sed -z \"s/\\n/X/g\" | grep 'foobarbazXsecond_line' $ foo () { echo bar; } $ cat << EOF > test.pyc > foo$(foo)baz > second_line > EOF $ $ cat test.pyc | sed -z \"s/\\n/X/g\" | grep 'foobarbazXsecond_line' foobarbazXsecond_lineX Picky Syntax The second space is requred after the '>' No lines with content may start with a space Special Statements \u00a4 wait 1.2 : Causing the process to sleep that long w/o logging (tmux only). You can attach and check output. send-keys: C-c : Sends a tmux key combination (here Ctrl-C). Exceptions \u00a4 On Execution Exit Codes \u00a4 Whenever a statement fails, we stop evaluation and except. Hint If you want to continue even when a statement fails, than add the usual || true after the statement. Example Cmd Output $ ls /notexisting || true # would except here without the `|| true` $ ls /etc | grep hosts $ ls /notexisting || true # would except here without the `|| true` ls: cannot access '/notexisting': No such file or directory $ ls /etc |grep hosts hosts hosts.allow hosts.deny On Timeouts \u00a4 In session mode, we expect commands to complete within a given time, otherwise we raise. On Assertions \u00a4 We can also force normally exitting commands to fail, when certain strings are not occuring in the result, see the asserts parameter. That way you can turn lp into a stateful ( sessions ) or stateless functional testsuite. typeof start_lc === \"undefined\" ? 0 : start_lc() @media screen and (min-width: 2000px) { .md-grid { max-width: initial;} .lp-row { display: flex; } .lp-column { padding: 0; margin-left: 2%; margin-right: 2%; flex: 50.0%; max-width: 1000px; } }","title":"Syntax"},{"location":"features/lp/syntax/#literate-programming-lp-syntax","text":"","title":"Literate Programming (lp) Syntax"},{"location":"features/lp/syntax/#normal-form","text":"lp blocks are special fenced code blocks within a markdown page and look like so: LP Source: ``` bash lp addsrc fmt = mk_console echo \"Hello ${ User :- World } \" ``` Result: $ echo \"Hello ${ User :- World } \" Hello World or more general: ```<lang> lp[:mode] [block level (=header) parameters] <---- lp block header statement 1 [per statement parameters] (...) <---- lp block body [statement n] ``` mode : The mode parameter determines the block processing mode. Default is shell mode (\"bash\") may also be supplied via a keyword parameter: lang lp:foo equal to lang lp mode=foo . lang : The word before \"lp\" is for Markdown not for LP. It is declaring the code block formatting language, and is not relevant for LP itself.","title":"Normal Form"},{"location":"features/lp/syntax/#short-form","text":"There is a short form , for blocks without a body: `lp:<mode> [parameters]` In the short form the mode must be added to lp: . See below for more about the short form.","title":"Short Form"},{"location":"features/lp/syntax/#detection","text":"We parse the markdown source line by line. We have a state variable fenced , initially False .","title":"Detection"},{"location":"features/lp/syntax/#normal-form_1","text":"","title":"Normal Form"},{"location":"features/lp/syntax/#block-start","text":"fenced is False A line must start with n spaces ( n \u2265 0 ) Followed by 3 backticks. fenced is set to True . Followed by a word (any letter except space), the formatting language Followed by \" lp \" then a space OR \" lp: \" then a word, the mode parameter All following lines are the block body - until:","title":"Block Start"},{"location":"features/lp/syntax/#block-end","text":"fenced is True A line starts with m spaces ( m = n ) Followed by 3 backticks Followed by any number of spaces. fenced is set to False","title":"Block End"},{"location":"features/lp/syntax/#example","text":"An Admonition With An Inner LP Block LP Source: ``` bash lp addsrc echo \"hello world\" ``` Result: Cmd Output $ echo \"hello world\" $ echo \"hello world\" hello world","title":"Example"},{"location":"features/lp/syntax/#summary","text":"In general this means that LP blocks look like normal fenced code blocks except: The first (header) line has more parameters than just the formatting language They are also detected within HTML, if the criteria are met: HTML Example: < div style = \"color:gray\" > ```_ lp:python import time; now = time.ctime(); show(f\"Hello from python, at < b > {now} </ b > !\") ``` </ div > Result: Hello from python, at Mon Apr 11 14:55:32 2022 ! See here regarding the show function.","title":"Summary"},{"location":"features/lp/syntax/#short-form_1","text":"fenced is False A line must start with n spaces ( n \u2265 0 ) Followed by 1 backtick Followed by lp: Followed by k characters except space, with k \u2265 1 ) The line ends with a backtick, followed by any number of spaces.","title":"Short Form"},{"location":"features/lp/syntax/#parametrization","text":"Evaluation is parametrized by keys and values, which may be given via the environment, per page, per block and per statement, with priority in this order. Here is the list of supported parameters, for the default mode: bash .","title":"Parametrization"},{"location":"features/lp/syntax/#environment","text":"A parameter foo may be set to value bar for all lp blocks within your docs set like so: LP_foo = bar mkdocs build export LP_foo = bar ; mkdocs build # and for convenience also the lower case form: lp_foo = bar mkdocs build","title":"Environment"},{"location":"features/lp/syntax/#page-level","text":"You may specify a parameter for all blocks within a specific markdown page like so: Normal Form: ```my_lang lp:page foo=bar # or: ```my_lang lp mode=page foo=bar ``` Short Form: `lp:page foo=bar` i.e. by specifying the keyword \" page \" as mode Position matters The parameters in mode=page headers are only valid for all lp blocks below the declaration. You may set to a different value, mid-page. You may use more than one page block.","title":"Page Level"},{"location":"features/lp/syntax/#block-level","text":"This sets the value for just one block: ```bash lp foo=bar echo Hello ```","title":"Block Level"},{"location":"features/lp/syntax/#statement-level","text":"This set the value for just one statement: ```bash lp echo Hello # lp: foo=bar echo World # while executing this, foo is NOT set (except when defined elsewhere) ```","title":"Statement Level"},{"location":"features/lp/syntax/#parameter-syntax","text":"Parameters may either be delivered python signature compliant or \"easy args\" style: # easy args (=true is default): ``` bash lp foo = bar f = 1 .23 foo = true bar asserts = \"foo and bar\" # python signature compliant form: ``` bash lp foo = 'bar' , f = 1 .23, foo = True, bar = True, asserts = \"foo and bar\" When easy args parsing fails, then python signature mode is tried. Easy Args Conventions and Restrictions No spaces in key=value allowed for easy args, except when value between double or single quotes ( \" or ' ). mykey allowed, identical to mykey=true Casting canonical: 1.123 considered float, 42 considered int, true considered bool, else string","title":"Parameter Syntax"},{"location":"features/lp/syntax/#presets","text":"These keywords will be dynamically replaced within headers: key value dir_repo Set to directory of the repository dir_project Set to project root directory Examples: ```bash lp session=project cwd=dir_repo # easy args style ```bash lp session='project', cwd=dir_repo # sig args style","title":"Presets"},{"location":"features/lp/syntax/#available-environment-variables","text":"If you want to work with/generate assets relative to your docu, these should be practical: $ env | grep LP_ # any env var starting with lp_ or LP_ is put into the session LP_DOCU_FILE=/home/runner/work/docutools/docutools/docs/features/lp/syntax.md LP_DOCU_ROOT=/home/runner/work/docutools/docutools/docs LP_PROJECT_ROOT=/home/runner/work/docutools/docutools LP_DOCU_DIR=/home/runner/work/docutools/docutools/docs/features/lp These are also put into new tmux sessions (at new_session ): $ env | grep LP_ LP_DOCU_FILE=/home/runner/work/docutools/docutools/docs/features/lp/syntax.md LP_DOCU_ROOT=/home/runner/work/docutools/docutools/docs LP_PROJECT_ROOT=/home/runner/work/docutools/docutools LP_DOCU_DIR=/home/runner/work/docutools/docutools/docs/features/lp $ env | grep TMUX TMUX=/tmp/tmux-1001/default,2649,24 TMUX_PANE=%24 You can reference any env var as a \"dollar var\" within your header args.","title":"Available Environment Variables"},{"location":"features/lp/syntax/#short-form-for-lp-plugins-without-body","text":"Some plugins do not need a body to evaluate. Then you can also express lp blocks via the short form: `lp:<mode(plugin name)> [header params like normal]` Example: `lp:lightbox match=img` Must be within separate lines The short form can not work as inline statement (i.e. between other words in a line). You (still) need to have exclusively one statement per line. If you do have a (short) body, you may supply it via the body parameter: `lp:python body=print(42)`","title":"Short Form for LP Plugins Without Body"},{"location":"features/lp/syntax/#evaluation","text":"","title":"Evaluation"},{"location":"features/lp/syntax/#statements","text":"Within an lp block can be more than one statement contained. We run the statements consecutively. Staments can be given per line or a in a structured way: ```bash lp echo hello # lp: asserts=hello echo world ``` is equivalent to ``` bash lp [{ 'cmd' : 'echo hello' , 'asserts' : 'hello' }, { 'cmd' : 'echo world' }] ``` Hint In structured mode you can omit the list notation, if there is just one command and simply supply a dict with cmd and parameters .","title":"Statements"},{"location":"features/lp/syntax/#multiline-commands-here-docs","text":"Here Docs come handy when you have dynamic variable from a previous command, which you need to set into a file. Like this, i.e. use the '> ' indicator at beginning of lines, which should be run as single commands. LP Source: ``` bash lp addsrc session = DO asserts = foobarbazXsecond_line foo () { echo bar ; } cat << EOF > test.pyc > foo$(foo)baz > second_line > EOF cat test.pyc | sed -z \"s/\\n/X/g\" | grep 'foobarbazXsecond_line' ``` Result: Cmd Output $ foo () { echo bar ; } $ cat << EOF > test.pyc foo$(foo)baz second_line EOF $ cat test.pyc | sed -z \"s/\\n/X/g\" | grep 'foobarbazXsecond_line' $ foo () { echo bar; } $ cat << EOF > test.pyc > foo$(foo)baz > second_line > EOF $ $ cat test.pyc | sed -z \"s/\\n/X/g\" | grep 'foobarbazXsecond_line' foobarbazXsecond_lineX Picky Syntax The second space is requred after the '>' No lines with content may start with a space","title":"Multiline Commands / Here Docs"},{"location":"features/lp/syntax/#special-statements","text":"wait 1.2 : Causing the process to sleep that long w/o logging (tmux only). You can attach and check output. send-keys: C-c : Sends a tmux key combination (here Ctrl-C).","title":"Special Statements"},{"location":"features/lp/syntax/#exceptions","text":"","title":"Exceptions"},{"location":"features/lp/syntax/#on-execution-exit-codes","text":"Whenever a statement fails, we stop evaluation and except. Hint If you want to continue even when a statement fails, than add the usual || true after the statement. Example Cmd Output $ ls /notexisting || true # would except here without the `|| true` $ ls /etc | grep hosts $ ls /notexisting || true # would except here without the `|| true` ls: cannot access '/notexisting': No such file or directory $ ls /etc |grep hosts hosts hosts.allow hosts.deny","title":"On Execution Exit Codes"},{"location":"features/lp/syntax/#on-timeouts","text":"In session mode, we expect commands to complete within a given time, otherwise we raise.","title":"On Timeouts"},{"location":"features/lp/syntax/#on-assertions","text":"We can also force normally exitting commands to fail, when certain strings are not occuring in the result, see the asserts parameter. That way you can turn lp into a stateful ( sessions ) or stateless functional testsuite. typeof start_lc === \"undefined\" ? 0 : start_lc() @media screen and (min-width: 2000px) { .md-grid { max-width: initial;} .lp-row { display: flex; } .lp-column { padding: 0; margin-left: 2%; margin-right: 2%; flex: 50.0%; max-width: 1000px; } }","title":"On Assertions"},{"location":"features/lp/tips/","text":"@media only screen and (min-width: 76.25em) { .md-main__inner { max-width: none; } .md-sidebar--primary { left: 0; } .md-sidebar--secondary { right: 0; margin-left: 0; -webkit-transform: none; transform: none; } } Tips \u00a4 Developing Long Running Multiple Command Sequences \u00a4 Say we want to document how you set up a complete cloud system. Alone the initial node creation takes minutes. It would take ages to always restart from scratch and fix command by command. Here sessions and testbeds are very practical: Kick off a tmux session with e.g. new_session=AWS in an initial lp block Evaluate: lp_eval=mycloud_tutorial mkdocs build -> tmux is running the session In a terminal attach: tmux att -t AWS . You can now fix broken command residues and always start over at any point of the sequence. In a helper page, say test.md , then try the next commands, e.g. droplet creation, then configuration, ... all one by one Interactively you can manually fix broken commands, look around, test. Evaluate test.md until the next command is working Copy it over into mycloud_tutorial.md Rinse and repeat until all is working. Alternative: Use block level skips The header exclusive argument <lang> lp skip_<this|other|below|above> will skip block execution accordingly, i.e. you can also work from within the original page, from block to block. Evaluating Single LP Blocks \u00a4 When you want to test only certain blocks within a longer document, then add \" mymatch \" to the header and evaluate like this: lp_eval=mymatch mkdocs build This restricts evaluation to matching blocks only (in the given lp documents). Hint To cause more than one block evaluated simply add the \"bogus\" keyword argument in all the headers For consecutive or single blocks please mind the <lang> lp skip_<this|other|below|above> header argument. Forcing Re-Evaluation \u00a4 Warning The following only applies if the block is not skipped or eval is set to never or another page. The cache hash (which determines re-evaluation on change) is built just including certain headers , in order to allow format changes, w/o having to re-eval. BUT: The full body, including whitespaces is always going into the hash. I.e. to force a re-evaluation, simply add an empty line or a space in the body of an lp block. Gevent / Async Framework \u00a4 When python code you'll run within the mkdocs process will be calling gevent patch, then we have to do this early . You might otherwise get warnings like this one: /home/runner/work/devapps/devapps/src/devapp/gevent_patched.py:9: MonkeyPatchWarning: Monkey-patching ssl after ssl has already been imported may lead to errors, including RecursionError on Python 3.6. It may also silently lead to incorrect behaviour on Python 3.7. Please monkey-patch earlier. Set this environ variable and gevent patch will be done early: export try_preload = gevent # or export async_framework = gevent A good place to do this might be your environ file. Multiline Commands / Here Docs in Sessions \u00a4 Tip Here Docs come handy when you have dynamic variable from a previous command, which you need to set into a file. Like this, i.e. use the '> ' indicator at beginning of lines, which should be run as single commands. ``` bash lp session = DO asserts = foobarbazXsecond_line foo () { echo bar ; } cat << EOF > test.pyc > foo$(foo)baz > second_line > EOF cat test.pyc | sed -z \"s/\\n/X/g\" | grep 'foobarbazXsecond_line' ``` Cmd Output $ foo () { echo bar ; } $ cat << EOF > test.pyc foo$(foo)baz second_line EOF $ cat test.pyc | sed -z \"s/\\n/X/g\" | grep 'foobarbazXsecond_line' $ foo () { echo bar; } $ cat << EOF > test.pyc > foo$(foo)baz > second_line > EOF $ $ cat test.pyc | sed -z \"s/\\n/X/g\" | grep 'foobarbazXsecond_line' foobarbazXsecond_lineX Picky Syntax The second space is requred after the '>' No lines with content may start with a space CI/CD \u00a4 When building pages on CI/CD servers, keep in mind that builds which may succeed on your local machine may fail on clean CI/CD environments due to timeouts, building e.g. caches. Consider the pros and cons of keeping those caches present over repeated builds versus longer build times but higher reproducability. - You can adjust the timeout of commands as shown above. - You can have hybrid setups, partially created by CI/CD, partially locally, by committing result files and setting lp_eval=on_page_change in a page lp block. typeof start_lc === \"undefined\" ? 0 : start_lc()","title":"Tips"},{"location":"features/lp/tips/#tips","text":"","title":"Tips"},{"location":"features/lp/tips/#developing-long-running-multiple-command-sequences","text":"Say we want to document how you set up a complete cloud system. Alone the initial node creation takes minutes. It would take ages to always restart from scratch and fix command by command. Here sessions and testbeds are very practical: Kick off a tmux session with e.g. new_session=AWS in an initial lp block Evaluate: lp_eval=mycloud_tutorial mkdocs build -> tmux is running the session In a terminal attach: tmux att -t AWS . You can now fix broken command residues and always start over at any point of the sequence. In a helper page, say test.md , then try the next commands, e.g. droplet creation, then configuration, ... all one by one Interactively you can manually fix broken commands, look around, test. Evaluate test.md until the next command is working Copy it over into mycloud_tutorial.md Rinse and repeat until all is working. Alternative: Use block level skips The header exclusive argument <lang> lp skip_<this|other|below|above> will skip block execution accordingly, i.e. you can also work from within the original page, from block to block.","title":"Developing Long Running Multiple Command Sequences"},{"location":"features/lp/tips/#evaluating-single-lp-blocks","text":"When you want to test only certain blocks within a longer document, then add \" mymatch \" to the header and evaluate like this: lp_eval=mymatch mkdocs build This restricts evaluation to matching blocks only (in the given lp documents). Hint To cause more than one block evaluated simply add the \"bogus\" keyword argument in all the headers For consecutive or single blocks please mind the <lang> lp skip_<this|other|below|above> header argument.","title":"Evaluating Single LP Blocks"},{"location":"features/lp/tips/#forcing-re-evaluation","text":"Warning The following only applies if the block is not skipped or eval is set to never or another page. The cache hash (which determines re-evaluation on change) is built just including certain headers , in order to allow format changes, w/o having to re-eval. BUT: The full body, including whitespaces is always going into the hash. I.e. to force a re-evaluation, simply add an empty line or a space in the body of an lp block.","title":"Forcing Re-Evaluation"},{"location":"features/lp/tips/#gevent-async-framework","text":"When python code you'll run within the mkdocs process will be calling gevent patch, then we have to do this early . You might otherwise get warnings like this one: /home/runner/work/devapps/devapps/src/devapp/gevent_patched.py:9: MonkeyPatchWarning: Monkey-patching ssl after ssl has already been imported may lead to errors, including RecursionError on Python 3.6. It may also silently lead to incorrect behaviour on Python 3.7. Please monkey-patch earlier. Set this environ variable and gevent patch will be done early: export try_preload = gevent # or export async_framework = gevent A good place to do this might be your environ file.","title":"Gevent / Async Framework"},{"location":"features/lp/tips/#multiline-commands-here-docs-in-sessions","text":"Tip Here Docs come handy when you have dynamic variable from a previous command, which you need to set into a file. Like this, i.e. use the '> ' indicator at beginning of lines, which should be run as single commands. ``` bash lp session = DO asserts = foobarbazXsecond_line foo () { echo bar ; } cat << EOF > test.pyc > foo$(foo)baz > second_line > EOF cat test.pyc | sed -z \"s/\\n/X/g\" | grep 'foobarbazXsecond_line' ``` Cmd Output $ foo () { echo bar ; } $ cat << EOF > test.pyc foo$(foo)baz second_line EOF $ cat test.pyc | sed -z \"s/\\n/X/g\" | grep 'foobarbazXsecond_line' $ foo () { echo bar; } $ cat << EOF > test.pyc > foo$(foo)baz > second_line > EOF $ $ cat test.pyc | sed -z \"s/\\n/X/g\" | grep 'foobarbazXsecond_line' foobarbazXsecond_lineX Picky Syntax The second space is requred after the '>' No lines with content may start with a space","title":"Multiline Commands / Here Docs in Sessions"},{"location":"features/lp/tips/#cicd","text":"When building pages on CI/CD servers, keep in mind that builds which may succeed on your local machine may fail on clean CI/CD environments due to timeouts, building e.g. caches. Consider the pros and cons of keeping those caches present over repeated builds versus longer build times but higher reproducability. - You can adjust the timeout of commands as shown above. - You can have hybrid setups, partially created by CI/CD, partially locally, by committing result files and setting lp_eval=on_page_change in a page lp block. typeof start_lc === \"undefined\" ? 0 : start_lc()","title":"CI/CD"},{"location":"features/lp/xterm/","text":"@media only screen and (min-width: 76.25em) { .md-main__inner { max-width: none; } .md-sidebar--primary { left: 0; } .md-sidebar--secondary { right: 0; margin-left: 0; -webkit-transform: none; transform: none; } } Terminal Color Support \u00a4 Normal fenced code blocks can 'only' highlight per language - but cannot \"understand\" terminal output and their color escape sequences . Therefore during the mkdocs build we include xtermjs and a helper script into your assets , which renders the escape codes correctly within HTML. This is far more efficient than using svg or png formats. Demo Script $ cat /tmp/colordemo.sh echo -e '<attribute background foreground>' echo -e \"\\nSpecifying the background color\" for bg in 40 41 42 43 44 45 46 47 do for att in 0 1 2 5 7 4 do for fg in 30 31 32 33 34 35 36 37 do # -n option is not valid here. Instead, \\c is used. echo -e \"\\x1b[ ${ att } ; ${ bg } ; ${ fg } m< ${ att } ${ bg } ${ fg } > \\x1b[0m\\c\" done echo -e \" \" done echo -e \" \" done echo -e '\\nNot specifying the background color' for att in 0 1 2 5 7 4 do for fg in 30 31 32 33 34 35 36 37 do echo -e \"\\x1b[ ${ att } ; ${ fg } m< ${ att } NA ${ fg } > \\x1b[0m\\c\" done echo -e \" \" done echo -e \"\\nTesting 256 colors\" i = 0 while [ $i -lt 16 ] do j = 0 while [ $j -lt 16 ] do n = $(( i * 16 + j )) ns = $( printf \"%03d\" $n ) echo -e \"\\x1b[48;5; ${ n } m ${ ns } \\x1b[0m\\c\" j = $(( j + 1 )) done i = $(( i + 1 )) echo -e \" \" done echo -e \" * * * *\" i = 0 while [ $i -lt 16 ] do j = 0 while [ $j -lt 16 ] do n = $(( i * 16 + j )) ns = $( printf \"%03d\" $n ) echo -e \"\\x1b[4;38;5; ${ n } m ${ ns } \\x1b[0m\\c\" j = $(( j + 1 )) done i = $(( i + 1 )) echo -e \" \" done echo -e \"Bye!\" $ bash -c /tmp/colordemo.sh <attribute background foreground> Specifying the background color \u001b[0;40;30m<0 40 30> \u001b[0m\u001b[0;40;31m<0 40 31> \u001b[0m\u001b[0;40;32m<0 40 32> \u001b[0m\u001b[0;40;33m<0 40 33> \u001b[0m\u001b[0;40;34m<0 40 34> \u001b[0m\u001b[0;40;35m<0 40 35> \u001b[0m\u001b[0;40;36m<0 40 36> \u001b[0m\u001b[0;40;37m<0 40 37> \u001b[0m \u001b[1;40;30m<1 40 30> \u001b[0m\u001b[1;40;31m<1 40 31> \u001b[0m\u001b[1;40;32m<1 40 32> \u001b[0m\u001b[1;40;33m<1 40 33> \u001b[0m\u001b[1;40;34m<1 40 34> \u001b[0m\u001b[1;40;35m<1 40 35> \u001b[0m\u001b[1;40;36m<1 40 36> \u001b[0m\u001b[1;40;37m<1 40 37> \u001b[0m \u001b[2;40;30m<2 40 30> \u001b[0m\u001b[2;40;31m<2 40 31> \u001b[0m\u001b[2;40;32m<2 40 32> \u001b[0m\u001b[2;40;33m<2 40 33> \u001b[0m\u001b[2;40;34m<2 40 34> \u001b[0m\u001b[2;40;35m<2 40 35> \u001b[0m\u001b[2;40;36m<2 40 36> \u001b[0m\u001b[2;40;37m<2 40 37> \u001b[0m \u001b[5;40;30m<5 40 30> \u001b[0m\u001b[5;40;31m<5 40 31> \u001b[0m\u001b[5;40;32m<5 40 32> \u001b[0m\u001b[5;40;33m<5 40 33> \u001b[0m\u001b[5;40;34m<5 40 34> \u001b[0m\u001b[5;40;35m<5 40 35> \u001b[0m\u001b[5;40;36m<5 40 36> \u001b[0m\u001b[5;40;37m<5 40 37> \u001b[0m \u001b[7;40;30m<7 40 30> \u001b[0m\u001b[7;40;31m<7 40 31> \u001b[0m\u001b[7;40;32m<7 40 32> \u001b[0m\u001b[7;40;33m<7 40 33> \u001b[0m\u001b[7;40;34m<7 40 34> \u001b[0m\u001b[7;40;35m<7 40 35> \u001b[0m\u001b[7;40;36m<7 40 36> \u001b[0m\u001b[7;40;37m<7 40 37> \u001b[0m \u001b[4;40;30m<4 40 30> \u001b[0m\u001b[4;40;31m<4 40 31> \u001b[0m\u001b[4;40;32m<4 40 32> \u001b[0m\u001b[4;40;33m<4 40 33> \u001b[0m\u001b[4;40;34m<4 40 34> \u001b[0m\u001b[4;40;35m<4 40 35> \u001b[0m\u001b[4;40;36m<4 40 36> \u001b[0m\u001b[4;40;37m<4 40 37> \u001b[0m \u001b[0;41;30m<0 41 30> \u001b[0m\u001b[0;41;31m<0 41 31> \u001b[0m\u001b[0;41;32m<0 41 32> \u001b[0m\u001b[0;41;33m<0 41 33> \u001b[0m\u001b[0;41;34m<0 41 34> \u001b[0m\u001b[0;41;35m<0 41 35> \u001b[0m\u001b[0;41;36m<0 41 36> \u001b[0m\u001b[0;41;37m<0 41 37> \u001b[0m \u001b[1;41;30m<1 41 30> \u001b[0m\u001b[1;41;31m<1 41 31> \u001b[0m\u001b[1;41;32m<1 41 32> \u001b[0m\u001b[1;41;33m<1 41 33> \u001b[0m\u001b[1;41;34m<1 41 34> \u001b[0m\u001b[1;41;35m<1 41 35> \u001b[0m\u001b[1;41;36m<1 41 36> \u001b[0m\u001b[1;41;37m<1 41 37> \u001b[0m \u001b[2;41;30m<2 41 30> \u001b[0m\u001b[2;41;31m<2 41 31> \u001b[0m\u001b[2;41;32m<2 41 32> \u001b[0m\u001b[2;41;33m<2 41 33> \u001b[0m\u001b[2;41;34m<2 41 34> \u001b[0m\u001b[2;41;35m<2 41 35> \u001b[0m\u001b[2;41;36m<2 41 36> \u001b[0m\u001b[2;41;37m<2 41 37> \u001b[0m \u001b[5;41;30m<5 41 30> \u001b[0m\u001b[5;41;31m<5 41 31> \u001b[0m\u001b[5;41;32m<5 41 32> \u001b[0m\u001b[5;41;33m<5 41 33> \u001b[0m\u001b[5;41;34m<5 41 34> \u001b[0m\u001b[5;41;35m<5 41 35> \u001b[0m\u001b[5;41;36m<5 41 36> \u001b[0m\u001b[5;41;37m<5 41 37> \u001b[0m \u001b[7;41;30m<7 41 30> \u001b[0m\u001b[7;41;31m<7 41 31> \u001b[0m\u001b[7;41;32m<7 41 32> \u001b[0m\u001b[7;41;33m<7 41 33> \u001b[0m\u001b[7;41;34m<7 41 34> \u001b[0m\u001b[7;41;35m<7 41 35> \u001b[0m\u001b[7;41;36m<7 41 36> \u001b[0m\u001b[7;41;37m<7 41 37> \u001b[0m \u001b[4;41;30m<4 41 30> \u001b[0m\u001b[4;41;31m<4 41 31> \u001b[0m\u001b[4;41;32m<4 41 32> \u001b[0m\u001b[4;41;33m<4 41 33> \u001b[0m\u001b[4;41;34m<4 41 34> \u001b[0m\u001b[4;41;35m<4 41 35> \u001b[0m\u001b[4;41;36m<4 41 36> \u001b[0m\u001b[4;41;37m<4 41 37> \u001b[0m \u001b[0;42;30m<0 42 30> \u001b[0m\u001b[0;42;31m<0 42 31> \u001b[0m\u001b[0;42;32m<0 42 32> \u001b[0m\u001b[0;42;33m<0 42 33> \u001b[0m\u001b[0;42;34m<0 42 34> \u001b[0m\u001b[0;42;35m<0 42 35> \u001b[0m\u001b[0;42;36m<0 42 36> \u001b[0m\u001b[0;42;37m<0 42 37> \u001b[0m \u001b[1;42;30m<1 42 30> \u001b[0m\u001b[1;42;31m<1 42 31> \u001b[0m\u001b[1;42;32m<1 42 32> \u001b[0m\u001b[1;42;33m<1 42 33> \u001b[0m\u001b[1;42;34m<1 42 34> \u001b[0m\u001b[1;42;35m<1 42 35> \u001b[0m\u001b[1;42;36m<1 42 36> \u001b[0m\u001b[1;42;37m<1 42 37> \u001b[0m \u001b[2;42;30m<2 42 30> \u001b[0m\u001b[2;42;31m<2 42 31> \u001b[0m\u001b[2;42;32m<2 42 32> \u001b[0m\u001b[2;42;33m<2 42 33> \u001b[0m\u001b[2;42;34m<2 42 34> \u001b[0m\u001b[2;42;35m<2 42 35> \u001b[0m\u001b[2;42;36m<2 42 36> \u001b[0m\u001b[2;42;37m<2 42 37> \u001b[0m \u001b[5;42;30m<5 42 30> \u001b[0m\u001b[5;42;31m<5 42 31> \u001b[0m\u001b[5;42;32m<5 42 32> \u001b[0m\u001b[5;42;33m<5 42 33> \u001b[0m\u001b[5;42;34m<5 42 34> \u001b[0m\u001b[5;42;35m<5 42 35> \u001b[0m\u001b[5;42;36m<5 42 36> \u001b[0m\u001b[5;42;37m<5 42 37> \u001b[0m \u001b[7;42;30m<7 42 30> \u001b[0m\u001b[7;42;31m<7 42 31> \u001b[0m\u001b[7;42;32m<7 42 32> \u001b[0m\u001b[7;42;33m<7 42 33> \u001b[0m\u001b[7;42;34m<7 42 34> \u001b[0m\u001b[7;42;35m<7 42 35> \u001b[0m\u001b[7;42;36m<7 42 36> \u001b[0m\u001b[7;42;37m<7 42 37> \u001b[0m \u001b[4;42;30m<4 42 30> \u001b[0m\u001b[4;42;31m<4 42 31> \u001b[0m\u001b[4;42;32m<4 42 32> \u001b[0m\u001b[4;42;33m<4 42 33> \u001b[0m\u001b[4;42;34m<4 42 34> \u001b[0m\u001b[4;42;35m<4 42 35> \u001b[0m\u001b[4;42;36m<4 42 36> \u001b[0m\u001b[4;42;37m<4 42 37> \u001b[0m \u001b[0;43;30m<0 43 30> \u001b[0m\u001b[0;43;31m<0 43 31> \u001b[0m\u001b[0;43;32m<0 43 32> \u001b[0m\u001b[0;43;33m<0 43 33> \u001b[0m\u001b[0;43;34m<0 43 34> \u001b[0m\u001b[0;43;35m<0 43 35> \u001b[0m\u001b[0;43;36m<0 43 36> \u001b[0m\u001b[0;43;37m<0 43 37> \u001b[0m \u001b[1;43;30m<1 43 30> \u001b[0m\u001b[1;43;31m<1 43 31> \u001b[0m\u001b[1;43;32m<1 43 32> \u001b[0m\u001b[1;43;33m<1 43 33> \u001b[0m\u001b[1;43;34m<1 43 34> \u001b[0m\u001b[1;43;35m<1 43 35> \u001b[0m\u001b[1;43;36m<1 43 36> \u001b[0m\u001b[1;43;37m<1 43 37> \u001b[0m \u001b[2;43;30m<2 43 30> \u001b[0m\u001b[2;43;31m<2 43 31> \u001b[0m\u001b[2;43;32m<2 43 32> \u001b[0m\u001b[2;43;33m<2 43 33> \u001b[0m\u001b[2;43;34m<2 43 34> \u001b[0m\u001b[2;43;35m<2 43 35> \u001b[0m\u001b[2;43;36m<2 43 36> \u001b[0m\u001b[2;43;37m<2 43 37> \u001b[0m \u001b[5;43;30m<5 43 30> \u001b[0m\u001b[5;43;31m<5 43 31> \u001b[0m\u001b[5;43;32m<5 43 32> \u001b[0m\u001b[5;43;33m<5 43 33> \u001b[0m\u001b[5;43;34m<5 43 34> \u001b[0m\u001b[5;43;35m<5 43 35> \u001b[0m\u001b[5;43;36m<5 43 36> \u001b[0m\u001b[5;43;37m<5 43 37> \u001b[0m \u001b[7;43;30m<7 43 30> \u001b[0m\u001b[7;43;31m<7 43 31> \u001b[0m\u001b[7;43;32m<7 43 32> \u001b[0m\u001b[7;43;33m<7 43 33> \u001b[0m\u001b[7;43;34m<7 43 34> \u001b[0m\u001b[7;43;35m<7 43 35> \u001b[0m\u001b[7;43;36m<7 43 36> \u001b[0m\u001b[7;43;37m<7 43 37> \u001b[0m \u001b[4;43;30m<4 43 30> \u001b[0m\u001b[4;43;31m<4 43 31> \u001b[0m\u001b[4;43;32m<4 43 32> \u001b[0m\u001b[4;43;33m<4 43 33> \u001b[0m\u001b[4;43;34m<4 43 34> \u001b[0m\u001b[4;43;35m<4 43 35> \u001b[0m\u001b[4;43;36m<4 43 36> \u001b[0m\u001b[4;43;37m<4 43 37> \u001b[0m \u001b[0;44;30m<0 44 30> \u001b[0m\u001b[0;44;31m<0 44 31> \u001b[0m\u001b[0;44;32m<0 44 32> \u001b[0m\u001b[0;44;33m<0 44 33> \u001b[0m\u001b[0;44;34m<0 44 34> \u001b[0m\u001b[0;44;35m<0 44 35> \u001b[0m\u001b[0;44;36m<0 44 36> \u001b[0m\u001b[0;44;37m<0 44 37> \u001b[0m \u001b[1;44;30m<1 44 30> \u001b[0m\u001b[1;44;31m<1 44 31> \u001b[0m\u001b[1;44;32m<1 44 32> \u001b[0m\u001b[1;44;33m<1 44 33> \u001b[0m\u001b[1;44;34m<1 44 34> \u001b[0m\u001b[1;44;35m<1 44 35> \u001b[0m\u001b[1;44;36m<1 44 36> \u001b[0m\u001b[1;44;37m<1 44 37> \u001b[0m \u001b[2;44;30m<2 44 30> \u001b[0m\u001b[2;44;31m<2 44 31> \u001b[0m\u001b[2;44;32m<2 44 32> \u001b[0m\u001b[2;44;33m<2 44 33> \u001b[0m\u001b[2;44;34m<2 44 34> \u001b[0m\u001b[2;44;35m<2 44 35> \u001b[0m\u001b[2;44;36m<2 44 36> \u001b[0m\u001b[2;44;37m<2 44 37> \u001b[0m \u001b[5;44;30m<5 44 30> \u001b[0m\u001b[5;44;31m<5 44 31> \u001b[0m\u001b[5;44;32m<5 44 32> \u001b[0m\u001b[5;44;33m<5 44 33> \u001b[0m\u001b[5;44;34m<5 44 34> \u001b[0m\u001b[5;44;35m<5 44 35> \u001b[0m\u001b[5;44;36m<5 44 36> \u001b[0m\u001b[5;44;37m<5 44 37> \u001b[0m \u001b[7;44;30m<7 44 30> \u001b[0m\u001b[7;44;31m<7 44 31> \u001b[0m\u001b[7;44;32m<7 44 32> \u001b[0m\u001b[7;44;33m<7 44 33> \u001b[0m\u001b[7;44;34m<7 44 34> \u001b[0m\u001b[7;44;35m<7 44 35> \u001b[0m\u001b[7;44;36m<7 44 36> \u001b[0m\u001b[7;44;37m<7 44 37> \u001b[0m \u001b[4;44;30m<4 44 30> \u001b[0m\u001b[4;44;31m<4 44 31> \u001b[0m\u001b[4;44;32m<4 44 32> \u001b[0m\u001b[4;44;33m<4 44 33> \u001b[0m\u001b[4;44;34m<4 44 34> \u001b[0m\u001b[4;44;35m<4 44 35> \u001b[0m\u001b[4;44;36m<4 44 36> \u001b[0m\u001b[4;44;37m<4 44 37> \u001b[0m \u001b[0;45;30m<0 45 30> \u001b[0m\u001b[0;45;31m<0 45 31> \u001b[0m\u001b[0;45;32m<0 45 32> \u001b[0m\u001b[0;45;33m<0 45 33> \u001b[0m\u001b[0;45;34m<0 45 34> \u001b[0m\u001b[0;45;35m<0 45 35> \u001b[0m\u001b[0;45;36m<0 45 36> \u001b[0m\u001b[0;45;37m<0 45 37> \u001b[0m \u001b[1;45;30m<1 45 30> \u001b[0m\u001b[1;45;31m<1 45 31> \u001b[0m\u001b[1;45;32m<1 45 32> \u001b[0m\u001b[1;45;33m<1 45 33> \u001b[0m\u001b[1;45;34m<1 45 34> \u001b[0m\u001b[1;45;35m<1 45 35> \u001b[0m\u001b[1;45;36m<1 45 36> \u001b[0m\u001b[1;45;37m<1 45 37> \u001b[0m \u001b[2;45;30m<2 45 30> \u001b[0m\u001b[2;45;31m<2 45 31> \u001b[0m\u001b[2;45;32m<2 45 32> \u001b[0m\u001b[2;45;33m<2 45 33> \u001b[0m\u001b[2;45;34m<2 45 34> \u001b[0m\u001b[2;45;35m<2 45 35> \u001b[0m\u001b[2;45;36m<2 45 36> \u001b[0m\u001b[2;45;37m<2 45 37> \u001b[0m \u001b[5;45;30m<5 45 30> \u001b[0m\u001b[5;45;31m<5 45 31> \u001b[0m\u001b[5;45;32m<5 45 32> \u001b[0m\u001b[5;45;33m<5 45 33> \u001b[0m\u001b[5;45;34m<5 45 34> \u001b[0m\u001b[5;45;35m<5 45 35> \u001b[0m\u001b[5;45;36m<5 45 36> \u001b[0m\u001b[5;45;37m<5 45 37> \u001b[0m \u001b[7;45;30m<7 45 30> \u001b[0m\u001b[7;45;31m<7 45 31> \u001b[0m\u001b[7;45;32m<7 45 32> \u001b[0m\u001b[7;45;33m<7 45 33> \u001b[0m\u001b[7;45;34m<7 45 34> \u001b[0m\u001b[7;45;35m<7 45 35> \u001b[0m\u001b[7;45;36m<7 45 36> \u001b[0m\u001b[7;45;37m<7 45 37> \u001b[0m \u001b[4;45;30m<4 45 30> \u001b[0m\u001b[4;45;31m<4 45 31> \u001b[0m\u001b[4;45;32m<4 45 32> \u001b[0m\u001b[4;45;33m<4 45 33> \u001b[0m\u001b[4;45;34m<4 45 34> \u001b[0m\u001b[4;45;35m<4 45 35> \u001b[0m\u001b[4;45;36m<4 45 36> \u001b[0m\u001b[4;45;37m<4 45 37> \u001b[0m \u001b[0;46;30m<0 46 30> \u001b[0m\u001b[0;46;31m<0 46 31> \u001b[0m\u001b[0;46;32m<0 46 32> \u001b[0m\u001b[0;46;33m<0 46 33> \u001b[0m\u001b[0;46;34m<0 46 34> \u001b[0m\u001b[0;46;35m<0 46 35> \u001b[0m\u001b[0;46;36m<0 46 36> \u001b[0m\u001b[0;46;37m<0 46 37> \u001b[0m \u001b[1;46;30m<1 46 30> \u001b[0m\u001b[1;46;31m<1 46 31> \u001b[0m\u001b[1;46;32m<1 46 32> \u001b[0m\u001b[1;46;33m<1 46 33> \u001b[0m\u001b[1;46;34m<1 46 34> \u001b[0m\u001b[1;46;35m<1 46 35> \u001b[0m\u001b[1;46;36m<1 46 36> \u001b[0m\u001b[1;46;37m<1 46 37> \u001b[0m \u001b[2;46;30m<2 46 30> \u001b[0m\u001b[2;46;31m<2 46 31> \u001b[0m\u001b[2;46;32m<2 46 32> \u001b[0m\u001b[2;46;33m<2 46 33> \u001b[0m\u001b[2;46;34m<2 46 34> \u001b[0m\u001b[2;46;35m<2 46 35> \u001b[0m\u001b[2;46;36m<2 46 36> \u001b[0m\u001b[2;46;37m<2 46 37> \u001b[0m \u001b[5;46;30m<5 46 30> \u001b[0m\u001b[5;46;31m<5 46 31> \u001b[0m\u001b[5;46;32m<5 46 32> \u001b[0m\u001b[5;46;33m<5 46 33> \u001b[0m\u001b[5;46;34m<5 46 34> \u001b[0m\u001b[5;46;35m<5 46 35> \u001b[0m\u001b[5;46;36m<5 46 36> \u001b[0m\u001b[5;46;37m<5 46 37> \u001b[0m \u001b[7;46;30m<7 46 30> \u001b[0m\u001b[7;46;31m<7 46 31> \u001b[0m\u001b[7;46;32m<7 46 32> \u001b[0m\u001b[7;46;33m<7 46 33> \u001b[0m\u001b[7;46;34m<7 46 34> \u001b[0m\u001b[7;46;35m<7 46 35> \u001b[0m\u001b[7;46;36m<7 46 36> \u001b[0m\u001b[7;46;37m<7 46 37> \u001b[0m \u001b[4;46;30m<4 46 30> \u001b[0m\u001b[4;46;31m<4 46 31> \u001b[0m\u001b[4;46;32m<4 46 32> \u001b[0m\u001b[4;46;33m<4 46 33> \u001b[0m\u001b[4;46;34m<4 46 34> \u001b[0m\u001b[4;46;35m<4 46 35> \u001b[0m\u001b[4;46;36m<4 46 36> \u001b[0m\u001b[4;46;37m<4 46 37> \u001b[0m \u001b[0;47;30m<0 47 30> \u001b[0m\u001b[0;47;31m<0 47 31> \u001b[0m\u001b[0;47;32m<0 47 32> \u001b[0m\u001b[0;47;33m<0 47 33> \u001b[0m\u001b[0;47;34m<0 47 34> \u001b[0m\u001b[0;47;35m<0 47 35> \u001b[0m\u001b[0;47;36m<0 47 36> \u001b[0m\u001b[0;47;37m<0 47 37> \u001b[0m \u001b[1;47;30m<1 47 30> \u001b[0m\u001b[1;47;31m<1 47 31> \u001b[0m\u001b[1;47;32m<1 47 32> \u001b[0m\u001b[1;47;33m<1 47 33> \u001b[0m\u001b[1;47;34m<1 47 34> \u001b[0m\u001b[1;47;35m<1 47 35> \u001b[0m\u001b[1;47;36m<1 47 36> \u001b[0m\u001b[1;47;37m<1 47 37> \u001b[0m \u001b[2;47;30m<2 47 30> \u001b[0m\u001b[2;47;31m<2 47 31> \u001b[0m\u001b[2;47;32m<2 47 32> \u001b[0m\u001b[2;47;33m<2 47 33> \u001b[0m\u001b[2;47;34m<2 47 34> \u001b[0m\u001b[2;47;35m<2 47 35> \u001b[0m\u001b[2;47;36m<2 47 36> \u001b[0m\u001b[2;47;37m<2 47 37> \u001b[0m \u001b[5;47;30m<5 47 30> \u001b[0m\u001b[5;47;31m<5 47 31> \u001b[0m\u001b[5;47;32m<5 47 32> \u001b[0m\u001b[5;47;33m<5 47 33> \u001b[0m\u001b[5;47;34m<5 47 34> \u001b[0m\u001b[5;47;35m<5 47 35> \u001b[0m\u001b[5;47;36m<5 47 36> \u001b[0m\u001b[5;47;37m<5 47 37> \u001b[0m \u001b[7;47;30m<7 47 30> \u001b[0m\u001b[7;47;31m<7 47 31> \u001b[0m\u001b[7;47;32m<7 47 32> \u001b[0m\u001b[7;47;33m<7 47 33> \u001b[0m\u001b[7;47;34m<7 47 34> \u001b[0m\u001b[7;47;35m<7 47 35> \u001b[0m\u001b[7;47;36m<7 47 36> \u001b[0m\u001b[7;47;37m<7 47 37> \u001b[0m \u001b[4;47;30m<4 47 30> \u001b[0m\u001b[4;47;31m<4 47 31> \u001b[0m\u001b[4;47;32m<4 47 32> \u001b[0m\u001b[4;47;33m<4 47 33> \u001b[0m\u001b[4;47;34m<4 47 34> \u001b[0m\u001b[4;47;35m<4 47 35> \u001b[0m\u001b[4;47;36m<4 47 36> \u001b[0m\u001b[4;47;37m<4 47 37> \u001b[0m Not specifying the background color \u001b[0;30m<0 NA 30> \u001b[0m\u001b[0;31m<0 NA 31> \u001b[0m\u001b[0;32m<0 NA 32> \u001b[0m\u001b[0;33m<0 NA 33> \u001b[0m\u001b[0;34m<0 NA 34> \u001b[0m\u001b[0;35m<0 NA 35> \u001b[0m\u001b[0;36m<0 NA 36> \u001b[0m\u001b[0;37m<0 NA 37> \u001b[0m \u001b[1;30m<1 NA 30> \u001b[0m\u001b[1;31m<1 NA 31> \u001b[0m\u001b[1;32m<1 NA 32> \u001b[0m\u001b[1;33m<1 NA 33> \u001b[0m\u001b[1;34m<1 NA 34> \u001b[0m\u001b[1;35m<1 NA 35> \u001b[0m\u001b[1;36m<1 NA 36> \u001b[0m\u001b[1;37m<1 NA 37> \u001b[0m \u001b[2;30m<2 NA 30> \u001b[0m\u001b[2;31m<2 NA 31> \u001b[0m\u001b[2;32m<2 NA 32> \u001b[0m\u001b[2;33m<2 NA 33> \u001b[0m\u001b[2;34m<2 NA 34> \u001b[0m\u001b[2;35m<2 NA 35> \u001b[0m\u001b[2;36m<2 NA 36> \u001b[0m\u001b[2;37m<2 NA 37> \u001b[0m \u001b[5;30m<5 NA 30> \u001b[0m\u001b[5;31m<5 NA 31> \u001b[0m\u001b[5;32m<5 NA 32> \u001b[0m\u001b[5;33m<5 NA 33> \u001b[0m\u001b[5;34m<5 NA 34> \u001b[0m\u001b[5;35m<5 NA 35> \u001b[0m\u001b[5;36m<5 NA 36> \u001b[0m\u001b[5;37m<5 NA 37> \u001b[0m \u001b[7;30m<7 NA 30> \u001b[0m\u001b[7;31m<7 NA 31> \u001b[0m\u001b[7;32m<7 NA 32> \u001b[0m\u001b[7;33m<7 NA 33> \u001b[0m\u001b[7;34m<7 NA 34> \u001b[0m\u001b[7;35m<7 NA 35> \u001b[0m\u001b[7;36m<7 NA 36> \u001b[0m\u001b[7;37m<7 NA 37> \u001b[0m \u001b[4;30m<4 NA 30> \u001b[0m\u001b[4;31m<4 NA 31> \u001b[0m\u001b[4;32m<4 NA 32> \u001b[0m\u001b[4;33m<4 NA 33> \u001b[0m\u001b[4;34m<4 NA 34> \u001b[0m\u001b[4;35m<4 NA 35> \u001b[0m\u001b[4;36m<4 NA 36> \u001b[0m\u001b[4;37m<4 NA 37> \u001b[0m Testing 256 colors \u001b[48;5;0m 000 \u001b[0m\u001b[48;5;1m 001 \u001b[0m\u001b[48;5;2m 002 \u001b[0m\u001b[48;5;3m 003 \u001b[0m\u001b[48;5;4m 004 \u001b[0m\u001b[48;5;5m 005 \u001b[0m\u001b[48;5;6m 006 \u001b[0m\u001b[48;5;7m 007 \u001b[0m\u001b[48;5;8m 008 \u001b[0m\u001b[48;5;9m 009 \u001b[0m\u001b[48;5;10m 010 \u001b[0m\u001b[48;5;11m 011 \u001b[0m\u001b[48;5;12m 012 \u001b[0m\u001b[48;5;13m 013 \u001b[0m\u001b[48;5;14m 014 \u001b[0m\u001b[48;5;15m 015 \u001b[0m \u001b[48;5;16m 016 \u001b[0m\u001b[48;5;17m 017 \u001b[0m\u001b[48;5;18m 018 \u001b[0m\u001b[48;5;19m 019 \u001b[0m\u001b[48;5;20m 020 \u001b[0m\u001b[48;5;21m 021 \u001b[0m\u001b[48;5;22m 022 \u001b[0m\u001b[48;5;23m 023 \u001b[0m\u001b[48;5;24m 024 \u001b[0m\u001b[48;5;25m 025 \u001b[0m\u001b[48;5;26m 026 \u001b[0m\u001b[48;5;27m 027 \u001b[0m\u001b[48;5;28m 028 \u001b[0m\u001b[48;5;29m 029 \u001b[0m\u001b[48;5;30m 030 \u001b[0m\u001b[48;5;31m 031 \u001b[0m \u001b[48;5;32m 032 \u001b[0m\u001b[48;5;33m 033 \u001b[0m\u001b[48;5;34m 034 \u001b[0m\u001b[48;5;35m 035 \u001b[0m\u001b[48;5;36m 036 \u001b[0m\u001b[48;5;37m 037 \u001b[0m\u001b[48;5;38m 038 \u001b[0m\u001b[48;5;39m 039 \u001b[0m\u001b[48;5;40m 040 \u001b[0m\u001b[48;5;41m 041 \u001b[0m\u001b[48;5;42m 042 \u001b[0m\u001b[48;5;43m 043 \u001b[0m\u001b[48;5;44m 044 \u001b[0m\u001b[48;5;45m 045 \u001b[0m\u001b[48;5;46m 046 \u001b[0m\u001b[48;5;47m 047 \u001b[0m \u001b[48;5;48m 048 \u001b[0m\u001b[48;5;49m 049 \u001b[0m\u001b[48;5;50m 050 \u001b[0m\u001b[48;5;51m 051 \u001b[0m\u001b[48;5;52m 052 \u001b[0m\u001b[48;5;53m 053 \u001b[0m\u001b[48;5;54m 054 \u001b[0m\u001b[48;5;55m 055 \u001b[0m\u001b[48;5;56m 056 \u001b[0m\u001b[48;5;57m 057 \u001b[0m\u001b[48;5;58m 058 \u001b[0m\u001b[48;5;59m 059 \u001b[0m\u001b[48;5;60m 060 \u001b[0m\u001b[48;5;61m 061 \u001b[0m\u001b[48;5;62m 062 \u001b[0m\u001b[48;5;63m 063 \u001b[0m \u001b[48;5;64m 064 \u001b[0m\u001b[48;5;65m 065 \u001b[0m\u001b[48;5;66m 066 \u001b[0m\u001b[48;5;67m 067 \u001b[0m\u001b[48;5;68m 068 \u001b[0m\u001b[48;5;69m 069 \u001b[0m\u001b[48;5;70m 070 \u001b[0m\u001b[48;5;71m 071 \u001b[0m\u001b[48;5;72m 072 \u001b[0m\u001b[48;5;73m 073 \u001b[0m\u001b[48;5;74m 074 \u001b[0m\u001b[48;5;75m 075 \u001b[0m\u001b[48;5;76m 076 \u001b[0m\u001b[48;5;77m 077 \u001b[0m\u001b[48;5;78m 078 \u001b[0m\u001b[48;5;79m 079 \u001b[0m \u001b[48;5;80m 080 \u001b[0m\u001b[48;5;81m 081 \u001b[0m\u001b[48;5;82m 082 \u001b[0m\u001b[48;5;83m 083 \u001b[0m\u001b[48;5;84m 084 \u001b[0m\u001b[48;5;85m 085 \u001b[0m\u001b[48;5;86m 086 \u001b[0m\u001b[48;5;87m 087 \u001b[0m\u001b[48;5;88m 088 \u001b[0m\u001b[48;5;89m 089 \u001b[0m\u001b[48;5;90m 090 \u001b[0m\u001b[48;5;91m 091 \u001b[0m\u001b[48;5;92m 092 \u001b[0m\u001b[48;5;93m 093 \u001b[0m\u001b[48;5;94m 094 \u001b[0m\u001b[48;5;95m 095 \u001b[0m \u001b[48;5;96m 096 \u001b[0m\u001b[48;5;97m 097 \u001b[0m\u001b[48;5;98m 098 \u001b[0m\u001b[48;5;99m 099 \u001b[0m\u001b[48;5;100m 100 \u001b[0m\u001b[48;5;101m 101 \u001b[0m\u001b[48;5;102m 102 \u001b[0m\u001b[48;5;103m 103 \u001b[0m\u001b[48;5;104m 104 \u001b[0m\u001b[48;5;105m 105 \u001b[0m\u001b[48;5;106m 106 \u001b[0m\u001b[48;5;107m 107 \u001b[0m\u001b[48;5;108m 108 \u001b[0m\u001b[48;5;109m 109 \u001b[0m\u001b[48;5;110m 110 \u001b[0m\u001b[48;5;111m 111 \u001b[0m \u001b[48;5;112m 112 \u001b[0m\u001b[48;5;113m 113 \u001b[0m\u001b[48;5;114m 114 \u001b[0m\u001b[48;5;115m 115 \u001b[0m\u001b[48;5;116m 116 \u001b[0m\u001b[48;5;117m 117 \u001b[0m\u001b[48;5;118m 118 \u001b[0m\u001b[48;5;119m 119 \u001b[0m\u001b[48;5;120m 120 \u001b[0m\u001b[48;5;121m 121 \u001b[0m\u001b[48;5;122m 122 \u001b[0m\u001b[48;5;123m 123 \u001b[0m\u001b[48;5;124m 124 \u001b[0m\u001b[48;5;125m 125 \u001b[0m\u001b[48;5;126m 126 \u001b[0m\u001b[48;5;127m 127 \u001b[0m \u001b[48;5;128m 128 \u001b[0m\u001b[48;5;129m 129 \u001b[0m\u001b[48;5;130m 130 \u001b[0m\u001b[48;5;131m 131 \u001b[0m\u001b[48;5;132m 132 \u001b[0m\u001b[48;5;133m 133 \u001b[0m\u001b[48;5;134m 134 \u001b[0m\u001b[48;5;135m 135 \u001b[0m\u001b[48;5;136m 136 \u001b[0m\u001b[48;5;137m 137 \u001b[0m\u001b[48;5;138m 138 \u001b[0m\u001b[48;5;139m 139 \u001b[0m\u001b[48;5;140m 140 \u001b[0m\u001b[48;5;141m 141 \u001b[0m\u001b[48;5;142m 142 \u001b[0m\u001b[48;5;143m 143 \u001b[0m \u001b[48;5;144m 144 \u001b[0m\u001b[48;5;145m 145 \u001b[0m\u001b[48;5;146m 146 \u001b[0m\u001b[48;5;147m 147 \u001b[0m\u001b[48;5;148m 148 \u001b[0m\u001b[48;5;149m 149 \u001b[0m\u001b[48;5;150m 150 \u001b[0m\u001b[48;5;151m 151 \u001b[0m\u001b[48;5;152m 152 \u001b[0m\u001b[48;5;153m 153 \u001b[0m\u001b[48;5;154m 154 \u001b[0m\u001b[48;5;155m 155 \u001b[0m\u001b[48;5;156m 156 \u001b[0m\u001b[48;5;157m 157 \u001b[0m\u001b[48;5;158m 158 \u001b[0m\u001b[48;5;159m 159 \u001b[0m \u001b[48;5;160m 160 \u001b[0m\u001b[48;5;161m 161 \u001b[0m\u001b[48;5;162m 162 \u001b[0m\u001b[48;5;163m 163 \u001b[0m\u001b[48;5;164m 164 \u001b[0m\u001b[48;5;165m 165 \u001b[0m\u001b[48;5;166m 166 \u001b[0m\u001b[48;5;167m 167 \u001b[0m\u001b[48;5;168m 168 \u001b[0m\u001b[48;5;169m 169 \u001b[0m\u001b[48;5;170m 170 \u001b[0m\u001b[48;5;171m 171 \u001b[0m\u001b[48;5;172m 172 \u001b[0m\u001b[48;5;173m 173 \u001b[0m\u001b[48;5;174m 174 \u001b[0m\u001b[48;5;175m 175 \u001b[0m \u001b[48;5;176m 176 \u001b[0m\u001b[48;5;177m 177 \u001b[0m\u001b[48;5;178m 178 \u001b[0m\u001b[48;5;179m 179 \u001b[0m\u001b[48;5;180m 180 \u001b[0m\u001b[48;5;181m 181 \u001b[0m\u001b[48;5;182m 182 \u001b[0m\u001b[48;5;183m 183 \u001b[0m\u001b[48;5;184m 184 \u001b[0m\u001b[48;5;185m 185 \u001b[0m\u001b[48;5;186m 186 \u001b[0m\u001b[48;5;187m 187 \u001b[0m\u001b[48;5;188m 188 \u001b[0m\u001b[48;5;189m 189 \u001b[0m\u001b[48;5;190m 190 \u001b[0m\u001b[48;5;191m 191 \u001b[0m \u001b[48;5;192m 192 \u001b[0m\u001b[48;5;193m 193 \u001b[0m\u001b[48;5;194m 194 \u001b[0m\u001b[48;5;195m 195 \u001b[0m\u001b[48;5;196m 196 \u001b[0m\u001b[48;5;197m 197 \u001b[0m\u001b[48;5;198m 198 \u001b[0m\u001b[48;5;199m 199 \u001b[0m\u001b[48;5;200m 200 \u001b[0m\u001b[48;5;201m 201 \u001b[0m\u001b[48;5;202m 202 \u001b[0m\u001b[48;5;203m 203 \u001b[0m\u001b[48;5;204m 204 \u001b[0m\u001b[48;5;205m 205 \u001b[0m\u001b[48;5;206m 206 \u001b[0m\u001b[48;5;207m 207 \u001b[0m \u001b[48;5;208m 208 \u001b[0m\u001b[48;5;209m 209 \u001b[0m\u001b[48;5;210m 210 \u001b[0m\u001b[48;5;211m 211 \u001b[0m\u001b[48;5;212m 212 \u001b[0m\u001b[48;5;213m 213 \u001b[0m\u001b[48;5;214m 214 \u001b[0m\u001b[48;5;215m 215 \u001b[0m\u001b[48;5;216m 216 \u001b[0m\u001b[48;5;217m 217 \u001b[0m\u001b[48;5;218m 218 \u001b[0m\u001b[48;5;219m 219 \u001b[0m\u001b[48;5;220m 220 \u001b[0m\u001b[48;5;221m 221 \u001b[0m\u001b[48;5;222m 222 \u001b[0m\u001b[48;5;223m 223 \u001b[0m \u001b[48;5;224m 224 \u001b[0m\u001b[48;5;225m 225 \u001b[0m\u001b[48;5;226m 226 \u001b[0m\u001b[48;5;227m 227 \u001b[0m\u001b[48;5;228m 228 \u001b[0m\u001b[48;5;229m 229 \u001b[0m\u001b[48;5;230m 230 \u001b[0m\u001b[48;5;231m 231 \u001b[0m\u001b[48;5;232m 232 \u001b[0m\u001b[48;5;233m 233 \u001b[0m\u001b[48;5;234m 234 \u001b[0m\u001b[48;5;235m 235 \u001b[0m\u001b[48;5;236m 236 \u001b[0m\u001b[48;5;237m 237 \u001b[0m\u001b[48;5;238m 238 \u001b[0m\u001b[48;5;239m 239 \u001b[0m \u001b[48;5;240m 240 \u001b[0m\u001b[48;5;241m 241 \u001b[0m\u001b[48;5;242m 242 \u001b[0m\u001b[48;5;243m 243 \u001b[0m\u001b[48;5;244m 244 \u001b[0m\u001b[48;5;245m 245 \u001b[0m\u001b[48;5;246m 246 \u001b[0m\u001b[48;5;247m 247 \u001b[0m\u001b[48;5;248m 248 \u001b[0m\u001b[48;5;249m 249 \u001b[0m\u001b[48;5;250m 250 \u001b[0m\u001b[48;5;251m 251 \u001b[0m\u001b[48;5;252m 252 \u001b[0m\u001b[48;5;253m 253 \u001b[0m\u001b[48;5;254m 254 \u001b[0m\u001b[48;5;255m 255 \u001b[0m * * * * \u001b[4;38;5;0m 000 \u001b[0m\u001b[4;38;5;1m 001 \u001b[0m\u001b[4;38;5;2m 002 \u001b[0m\u001b[4;38;5;3m 003 \u001b[0m\u001b[4;38;5;4m 004 \u001b[0m\u001b[4;38;5;5m 005 \u001b[0m\u001b[4;38;5;6m 006 \u001b[0m\u001b[4;38;5;7m 007 \u001b[0m\u001b[4;38;5;8m 008 \u001b[0m\u001b[4;38;5;9m 009 \u001b[0m\u001b[4;38;5;10m 010 \u001b[0m\u001b[4;38;5;11m 011 \u001b[0m\u001b[4;38;5;12m 012 \u001b[0m\u001b[4;38;5;13m 013 \u001b[0m\u001b[4;38;5;14m 014 \u001b[0m\u001b[4;38;5;15m 015 \u001b[0m \u001b[4;38;5;16m 016 \u001b[0m\u001b[4;38;5;17m 017 \u001b[0m\u001b[4;38;5;18m 018 \u001b[0m\u001b[4;38;5;19m 019 \u001b[0m\u001b[4;38;5;20m 020 \u001b[0m\u001b[4;38;5;21m 021 \u001b[0m\u001b[4;38;5;22m 022 \u001b[0m\u001b[4;38;5;23m 023 \u001b[0m\u001b[4;38;5;24m 024 \u001b[0m\u001b[4;38;5;25m 025 \u001b[0m\u001b[4;38;5;26m 026 \u001b[0m\u001b[4;38;5;27m 027 \u001b[0m\u001b[4;38;5;28m 028 \u001b[0m\u001b[4;38;5;29m 029 \u001b[0m\u001b[4;38;5;30m 030 \u001b[0m\u001b[4;38;5;31m 031 \u001b[0m \u001b[4;38;5;32m 032 \u001b[0m\u001b[4;38;5;33m 033 \u001b[0m\u001b[4;38;5;34m 034 \u001b[0m\u001b[4;38;5;35m 035 \u001b[0m\u001b[4;38;5;36m 036 \u001b[0m\u001b[4;38;5;37m 037 \u001b[0m\u001b[4;38;5;38m 038 \u001b[0m\u001b[4;38;5;39m 039 \u001b[0m\u001b[4;38;5;40m 040 \u001b[0m\u001b[4;38;5;41m 041 \u001b[0m\u001b[4;38;5;42m 042 \u001b[0m\u001b[4;38;5;43m 043 \u001b[0m\u001b[4;38;5;44m 044 \u001b[0m\u001b[4;38;5;45m 045 \u001b[0m\u001b[4;38;5;46m 046 \u001b[0m\u001b[4;38;5;47m 047 \u001b[0m \u001b[4;38;5;48m 048 \u001b[0m\u001b[4;38;5;49m 049 \u001b[0m\u001b[4;38;5;50m 050 \u001b[0m\u001b[4;38;5;51m 051 \u001b[0m\u001b[4;38;5;52m 052 \u001b[0m\u001b[4;38;5;53m 053 \u001b[0m\u001b[4;38;5;54m 054 \u001b[0m\u001b[4;38;5;55m 055 \u001b[0m\u001b[4;38;5;56m 056 \u001b[0m\u001b[4;38;5;57m 057 \u001b[0m\u001b[4;38;5;58m 058 \u001b[0m\u001b[4;38;5;59m 059 \u001b[0m\u001b[4;38;5;60m 060 \u001b[0m\u001b[4;38;5;61m 061 \u001b[0m\u001b[4;38;5;62m 062 \u001b[0m\u001b[4;38;5;63m 063 \u001b[0m \u001b[4;38;5;64m 064 \u001b[0m\u001b[4;38;5;65m 065 \u001b[0m\u001b[4;38;5;66m 066 \u001b[0m\u001b[4;38;5;67m 067 \u001b[0m\u001b[4;38;5;68m 068 \u001b[0m\u001b[4;38;5;69m 069 \u001b[0m\u001b[4;38;5;70m 070 \u001b[0m\u001b[4;38;5;71m 071 \u001b[0m\u001b[4;38;5;72m 072 \u001b[0m\u001b[4;38;5;73m 073 \u001b[0m\u001b[4;38;5;74m 074 \u001b[0m\u001b[4;38;5;75m 075 \u001b[0m\u001b[4;38;5;76m 076 \u001b[0m\u001b[4;38;5;77m 077 \u001b[0m\u001b[4;38;5;78m 078 \u001b[0m\u001b[4;38;5;79m 079 \u001b[0m \u001b[4;38;5;80m 080 \u001b[0m\u001b[4;38;5;81m 081 \u001b[0m\u001b[4;38;5;82m 082 \u001b[0m\u001b[4;38;5;83m 083 \u001b[0m\u001b[4;38;5;84m 084 \u001b[0m\u001b[4;38;5;85m 085 \u001b[0m\u001b[4;38;5;86m 086 \u001b[0m\u001b[4;38;5;87m 087 \u001b[0m\u001b[4;38;5;88m 088 \u001b[0m\u001b[4;38;5;89m 089 \u001b[0m\u001b[4;38;5;90m 090 \u001b[0m\u001b[4;38;5;91m 091 \u001b[0m\u001b[4;38;5;92m 092 \u001b[0m\u001b[4;38;5;93m 093 \u001b[0m\u001b[4;38;5;94m 094 \u001b[0m\u001b[4;38;5;95m 095 \u001b[0m \u001b[4;38;5;96m 096 \u001b[0m\u001b[4;38;5;97m 097 \u001b[0m\u001b[4;38;5;98m 098 \u001b[0m\u001b[4;38;5;99m 099 \u001b[0m\u001b[4;38;5;100m 100 \u001b[0m\u001b[4;38;5;101m 101 \u001b[0m\u001b[4;38;5;102m 102 \u001b[0m\u001b[4;38;5;103m 103 \u001b[0m\u001b[4;38;5;104m 104 \u001b[0m\u001b[4;38;5;105m 105 \u001b[0m\u001b[4;38;5;106m 106 \u001b[0m\u001b[4;38;5;107m 107 \u001b[0m\u001b[4;38;5;108m 108 \u001b[0m\u001b[4;38;5;109m 109 \u001b[0m\u001b[4;38;5;110m 110 \u001b[0m\u001b[4;38;5;111m 111 \u001b[0m \u001b[4;38;5;112m 112 \u001b[0m\u001b[4;38;5;113m 113 \u001b[0m\u001b[4;38;5;114m 114 \u001b[0m\u001b[4;38;5;115m 115 \u001b[0m\u001b[4;38;5;116m 116 \u001b[0m\u001b[4;38;5;117m 117 \u001b[0m\u001b[4;38;5;118m 118 \u001b[0m\u001b[4;38;5;119m 119 \u001b[0m\u001b[4;38;5;120m 120 \u001b[0m\u001b[4;38;5;121m 121 \u001b[0m\u001b[4;38;5;122m 122 \u001b[0m\u001b[4;38;5;123m 123 \u001b[0m\u001b[4;38;5;124m 124 \u001b[0m\u001b[4;38;5;125m 125 \u001b[0m\u001b[4;38;5;126m 126 \u001b[0m\u001b[4;38;5;127m 127 \u001b[0m \u001b[4;38;5;128m 128 \u001b[0m\u001b[4;38;5;129m 129 \u001b[0m\u001b[4;38;5;130m 130 \u001b[0m\u001b[4;38;5;131m 131 \u001b[0m\u001b[4;38;5;132m 132 \u001b[0m\u001b[4;38;5;133m 133 \u001b[0m\u001b[4;38;5;134m 134 \u001b[0m\u001b[4;38;5;135m 135 \u001b[0m\u001b[4;38;5;136m 136 \u001b[0m\u001b[4;38;5;137m 137 \u001b[0m\u001b[4;38;5;138m 138 \u001b[0m\u001b[4;38;5;139m 139 \u001b[0m\u001b[4;38;5;140m 140 \u001b[0m\u001b[4;38;5;141m 141 \u001b[0m\u001b[4;38;5;142m 142 \u001b[0m\u001b[4;38;5;143m 143 \u001b[0m \u001b[4;38;5;144m 144 \u001b[0m\u001b[4;38;5;145m 145 \u001b[0m\u001b[4;38;5;146m 146 \u001b[0m\u001b[4;38;5;147m 147 \u001b[0m\u001b[4;38;5;148m 148 \u001b[0m\u001b[4;38;5;149m 149 \u001b[0m\u001b[4;38;5;150m 150 \u001b[0m\u001b[4;38;5;151m 151 \u001b[0m\u001b[4;38;5;152m 152 \u001b[0m\u001b[4;38;5;153m 153 \u001b[0m\u001b[4;38;5;154m 154 \u001b[0m\u001b[4;38;5;155m 155 \u001b[0m\u001b[4;38;5;156m 156 \u001b[0m\u001b[4;38;5;157m 157 \u001b[0m\u001b[4;38;5;158m 158 \u001b[0m\u001b[4;38;5;159m 159 \u001b[0m \u001b[4;38;5;160m 160 \u001b[0m\u001b[4;38;5;161m 161 \u001b[0m\u001b[4;38;5;162m 162 \u001b[0m\u001b[4;38;5;163m 163 \u001b[0m\u001b[4;38;5;164m 164 \u001b[0m\u001b[4;38;5;165m 165 \u001b[0m\u001b[4;38;5;166m 166 \u001b[0m\u001b[4;38;5;167m 167 \u001b[0m\u001b[4;38;5;168m 168 \u001b[0m\u001b[4;38;5;169m 169 \u001b[0m\u001b[4;38;5;170m 170 \u001b[0m\u001b[4;38;5;171m 171 \u001b[0m\u001b[4;38;5;172m 172 \u001b[0m\u001b[4;38;5;173m 173 \u001b[0m\u001b[4;38;5;174m 174 \u001b[0m\u001b[4;38;5;175m 175 \u001b[0m \u001b[4;38;5;176m 176 \u001b[0m\u001b[4;38;5;177m 177 \u001b[0m\u001b[4;38;5;178m 178 \u001b[0m\u001b[4;38;5;179m 179 \u001b[0m\u001b[4;38;5;180m 180 \u001b[0m\u001b[4;38;5;181m 181 \u001b[0m\u001b[4;38;5;182m 182 \u001b[0m\u001b[4;38;5;183m 183 \u001b[0m\u001b[4;38;5;184m 184 \u001b[0m\u001b[4;38;5;185m 185 \u001b[0m\u001b[4;38;5;186m 186 \u001b[0m\u001b[4;38;5;187m 187 \u001b[0m\u001b[4;38;5;188m 188 \u001b[0m\u001b[4;38;5;189m 189 \u001b[0m\u001b[4;38;5;190m 190 \u001b[0m\u001b[4;38;5;191m 191 \u001b[0m \u001b[4;38;5;192m 192 \u001b[0m\u001b[4;38;5;193m 193 \u001b[0m\u001b[4;38;5;194m 194 \u001b[0m\u001b[4;38;5;195m 195 \u001b[0m\u001b[4;38;5;196m 196 \u001b[0m\u001b[4;38;5;197m 197 \u001b[0m\u001b[4;38;5;198m 198 \u001b[0m\u001b[4;38;5;199m 199 \u001b[0m\u001b[4;38;5;200m 200 \u001b[0m\u001b[4;38;5;201m 201 \u001b[0m\u001b[4;38;5;202m 202 \u001b[0m\u001b[4;38;5;203m 203 \u001b[0m\u001b[4;38;5;204m 204 \u001b[0m\u001b[4;38;5;205m 205 \u001b[0m\u001b[4;38;5;206m 206 \u001b[0m\u001b[4;38;5;207m 207 \u001b[0m \u001b[4;38;5;208m 208 \u001b[0m\u001b[4;38;5;209m 209 \u001b[0m\u001b[4;38;5;210m 210 \u001b[0m\u001b[4;38;5;211m 211 \u001b[0m\u001b[4;38;5;212m 212 \u001b[0m\u001b[4;38;5;213m 213 \u001b[0m\u001b[4;38;5;214m 214 \u001b[0m\u001b[4;38;5;215m 215 \u001b[0m\u001b[4;38;5;216m 216 \u001b[0m\u001b[4;38;5;217m 217 \u001b[0m\u001b[4;38;5;218m 218 \u001b[0m\u001b[4;38;5;219m 219 \u001b[0m\u001b[4;38;5;220m 220 \u001b[0m\u001b[4;38;5;221m 221 \u001b[0m\u001b[4;38;5;222m 222 \u001b[0m\u001b[4;38;5;223m 223 \u001b[0m \u001b[4;38;5;224m 224 \u001b[0m\u001b[4;38;5;225m 225 \u001b[0m\u001b[4;38;5;226m 226 \u001b[0m\u001b[4;38;5;227m 227 \u001b[0m\u001b[4;38;5;228m 228 \u001b[0m\u001b[4;38;5;229m 229 \u001b[0m\u001b[4;38;5;230m 230 \u001b[0m\u001b[4;38;5;231m 231 \u001b[0m\u001b[4;38;5;232m 232 \u001b[0m\u001b[4;38;5;233m 233 \u001b[0m\u001b[4;38;5;234m 234 \u001b[0m\u001b[4;38;5;235m 235 \u001b[0m\u001b[4;38;5;236m 236 \u001b[0m\u001b[4;38;5;237m 237 \u001b[0m\u001b[4;38;5;238m 238 \u001b[0m\u001b[4;38;5;239m 239 \u001b[0m \u001b[4;38;5;240m 240 \u001b[0m\u001b[4;38;5;241m 241 \u001b[0m\u001b[4;38;5;242m 242 \u001b[0m\u001b[4;38;5;243m 243 \u001b[0m\u001b[4;38;5;244m 244 \u001b[0m\u001b[4;38;5;245m 245 \u001b[0m\u001b[4;38;5;246m 246 \u001b[0m\u001b[4;38;5;247m 247 \u001b[0m\u001b[4;38;5;248m 248 \u001b[0m\u001b[4;38;5;249m 249 \u001b[0m\u001b[4;38;5;250m 250 \u001b[0m\u001b[4;38;5;251m 251 \u001b[0m\u001b[4;38;5;252m 252 \u001b[0m\u001b[4;38;5;253m 253 \u001b[0m\u001b[4;38;5;254m 254 \u001b[0m\u001b[4;38;5;255m 255 \u001b[0m Bye! typeof start_lc === \"undefined\" ? 0 : start_lc()","title":"Terminal Colors"},{"location":"features/lp/xterm/#terminal-color-support","text":"Normal fenced code blocks can 'only' highlight per language - but cannot \"understand\" terminal output and their color escape sequences . Therefore during the mkdocs build we include xtermjs and a helper script into your assets , which renders the escape codes correctly within HTML. This is far more efficient than using svg or png formats. Demo Script $ cat /tmp/colordemo.sh echo -e '<attribute background foreground>' echo -e \"\\nSpecifying the background color\" for bg in 40 41 42 43 44 45 46 47 do for att in 0 1 2 5 7 4 do for fg in 30 31 32 33 34 35 36 37 do # -n option is not valid here. Instead, \\c is used. echo -e \"\\x1b[ ${ att } ; ${ bg } ; ${ fg } m< ${ att } ${ bg } ${ fg } > \\x1b[0m\\c\" done echo -e \" \" done echo -e \" \" done echo -e '\\nNot specifying the background color' for att in 0 1 2 5 7 4 do for fg in 30 31 32 33 34 35 36 37 do echo -e \"\\x1b[ ${ att } ; ${ fg } m< ${ att } NA ${ fg } > \\x1b[0m\\c\" done echo -e \" \" done echo -e \"\\nTesting 256 colors\" i = 0 while [ $i -lt 16 ] do j = 0 while [ $j -lt 16 ] do n = $(( i * 16 + j )) ns = $( printf \"%03d\" $n ) echo -e \"\\x1b[48;5; ${ n } m ${ ns } \\x1b[0m\\c\" j = $(( j + 1 )) done i = $(( i + 1 )) echo -e \" \" done echo -e \" * * * *\" i = 0 while [ $i -lt 16 ] do j = 0 while [ $j -lt 16 ] do n = $(( i * 16 + j )) ns = $( printf \"%03d\" $n ) echo -e \"\\x1b[4;38;5; ${ n } m ${ ns } \\x1b[0m\\c\" j = $(( j + 1 )) done i = $(( i + 1 )) echo -e \" \" done echo -e \"Bye!\" $ bash -c /tmp/colordemo.sh <attribute background foreground> Specifying the background color \u001b[0;40;30m<0 40 30> \u001b[0m\u001b[0;40;31m<0 40 31> \u001b[0m\u001b[0;40;32m<0 40 32> \u001b[0m\u001b[0;40;33m<0 40 33> \u001b[0m\u001b[0;40;34m<0 40 34> \u001b[0m\u001b[0;40;35m<0 40 35> \u001b[0m\u001b[0;40;36m<0 40 36> \u001b[0m\u001b[0;40;37m<0 40 37> \u001b[0m \u001b[1;40;30m<1 40 30> \u001b[0m\u001b[1;40;31m<1 40 31> \u001b[0m\u001b[1;40;32m<1 40 32> \u001b[0m\u001b[1;40;33m<1 40 33> \u001b[0m\u001b[1;40;34m<1 40 34> \u001b[0m\u001b[1;40;35m<1 40 35> \u001b[0m\u001b[1;40;36m<1 40 36> \u001b[0m\u001b[1;40;37m<1 40 37> \u001b[0m \u001b[2;40;30m<2 40 30> \u001b[0m\u001b[2;40;31m<2 40 31> \u001b[0m\u001b[2;40;32m<2 40 32> \u001b[0m\u001b[2;40;33m<2 40 33> \u001b[0m\u001b[2;40;34m<2 40 34> \u001b[0m\u001b[2;40;35m<2 40 35> \u001b[0m\u001b[2;40;36m<2 40 36> \u001b[0m\u001b[2;40;37m<2 40 37> \u001b[0m \u001b[5;40;30m<5 40 30> \u001b[0m\u001b[5;40;31m<5 40 31> \u001b[0m\u001b[5;40;32m<5 40 32> \u001b[0m\u001b[5;40;33m<5 40 33> \u001b[0m\u001b[5;40;34m<5 40 34> \u001b[0m\u001b[5;40;35m<5 40 35> \u001b[0m\u001b[5;40;36m<5 40 36> \u001b[0m\u001b[5;40;37m<5 40 37> \u001b[0m \u001b[7;40;30m<7 40 30> \u001b[0m\u001b[7;40;31m<7 40 31> \u001b[0m\u001b[7;40;32m<7 40 32> \u001b[0m\u001b[7;40;33m<7 40 33> \u001b[0m\u001b[7;40;34m<7 40 34> \u001b[0m\u001b[7;40;35m<7 40 35> \u001b[0m\u001b[7;40;36m<7 40 36> \u001b[0m\u001b[7;40;37m<7 40 37> \u001b[0m \u001b[4;40;30m<4 40 30> \u001b[0m\u001b[4;40;31m<4 40 31> \u001b[0m\u001b[4;40;32m<4 40 32> \u001b[0m\u001b[4;40;33m<4 40 33> \u001b[0m\u001b[4;40;34m<4 40 34> \u001b[0m\u001b[4;40;35m<4 40 35> \u001b[0m\u001b[4;40;36m<4 40 36> \u001b[0m\u001b[4;40;37m<4 40 37> \u001b[0m \u001b[0;41;30m<0 41 30> \u001b[0m\u001b[0;41;31m<0 41 31> \u001b[0m\u001b[0;41;32m<0 41 32> \u001b[0m\u001b[0;41;33m<0 41 33> \u001b[0m\u001b[0;41;34m<0 41 34> \u001b[0m\u001b[0;41;35m<0 41 35> \u001b[0m\u001b[0;41;36m<0 41 36> \u001b[0m\u001b[0;41;37m<0 41 37> \u001b[0m \u001b[1;41;30m<1 41 30> \u001b[0m\u001b[1;41;31m<1 41 31> \u001b[0m\u001b[1;41;32m<1 41 32> \u001b[0m\u001b[1;41;33m<1 41 33> \u001b[0m\u001b[1;41;34m<1 41 34> \u001b[0m\u001b[1;41;35m<1 41 35> \u001b[0m\u001b[1;41;36m<1 41 36> \u001b[0m\u001b[1;41;37m<1 41 37> \u001b[0m \u001b[2;41;30m<2 41 30> \u001b[0m\u001b[2;41;31m<2 41 31> \u001b[0m\u001b[2;41;32m<2 41 32> \u001b[0m\u001b[2;41;33m<2 41 33> \u001b[0m\u001b[2;41;34m<2 41 34> \u001b[0m\u001b[2;41;35m<2 41 35> \u001b[0m\u001b[2;41;36m<2 41 36> \u001b[0m\u001b[2;41;37m<2 41 37> \u001b[0m \u001b[5;41;30m<5 41 30> \u001b[0m\u001b[5;41;31m<5 41 31> \u001b[0m\u001b[5;41;32m<5 41 32> \u001b[0m\u001b[5;41;33m<5 41 33> \u001b[0m\u001b[5;41;34m<5 41 34> \u001b[0m\u001b[5;41;35m<5 41 35> \u001b[0m\u001b[5;41;36m<5 41 36> \u001b[0m\u001b[5;41;37m<5 41 37> \u001b[0m \u001b[7;41;30m<7 41 30> \u001b[0m\u001b[7;41;31m<7 41 31> \u001b[0m\u001b[7;41;32m<7 41 32> \u001b[0m\u001b[7;41;33m<7 41 33> \u001b[0m\u001b[7;41;34m<7 41 34> \u001b[0m\u001b[7;41;35m<7 41 35> \u001b[0m\u001b[7;41;36m<7 41 36> \u001b[0m\u001b[7;41;37m<7 41 37> \u001b[0m \u001b[4;41;30m<4 41 30> \u001b[0m\u001b[4;41;31m<4 41 31> \u001b[0m\u001b[4;41;32m<4 41 32> \u001b[0m\u001b[4;41;33m<4 41 33> \u001b[0m\u001b[4;41;34m<4 41 34> \u001b[0m\u001b[4;41;35m<4 41 35> \u001b[0m\u001b[4;41;36m<4 41 36> \u001b[0m\u001b[4;41;37m<4 41 37> \u001b[0m \u001b[0;42;30m<0 42 30> \u001b[0m\u001b[0;42;31m<0 42 31> \u001b[0m\u001b[0;42;32m<0 42 32> \u001b[0m\u001b[0;42;33m<0 42 33> \u001b[0m\u001b[0;42;34m<0 42 34> \u001b[0m\u001b[0;42;35m<0 42 35> \u001b[0m\u001b[0;42;36m<0 42 36> \u001b[0m\u001b[0;42;37m<0 42 37> \u001b[0m \u001b[1;42;30m<1 42 30> \u001b[0m\u001b[1;42;31m<1 42 31> \u001b[0m\u001b[1;42;32m<1 42 32> \u001b[0m\u001b[1;42;33m<1 42 33> \u001b[0m\u001b[1;42;34m<1 42 34> \u001b[0m\u001b[1;42;35m<1 42 35> \u001b[0m\u001b[1;42;36m<1 42 36> \u001b[0m\u001b[1;42;37m<1 42 37> \u001b[0m \u001b[2;42;30m<2 42 30> \u001b[0m\u001b[2;42;31m<2 42 31> \u001b[0m\u001b[2;42;32m<2 42 32> \u001b[0m\u001b[2;42;33m<2 42 33> \u001b[0m\u001b[2;42;34m<2 42 34> \u001b[0m\u001b[2;42;35m<2 42 35> \u001b[0m\u001b[2;42;36m<2 42 36> \u001b[0m\u001b[2;42;37m<2 42 37> \u001b[0m \u001b[5;42;30m<5 42 30> \u001b[0m\u001b[5;42;31m<5 42 31> \u001b[0m\u001b[5;42;32m<5 42 32> \u001b[0m\u001b[5;42;33m<5 42 33> \u001b[0m\u001b[5;42;34m<5 42 34> \u001b[0m\u001b[5;42;35m<5 42 35> \u001b[0m\u001b[5;42;36m<5 42 36> \u001b[0m\u001b[5;42;37m<5 42 37> \u001b[0m \u001b[7;42;30m<7 42 30> \u001b[0m\u001b[7;42;31m<7 42 31> \u001b[0m\u001b[7;42;32m<7 42 32> \u001b[0m\u001b[7;42;33m<7 42 33> \u001b[0m\u001b[7;42;34m<7 42 34> \u001b[0m\u001b[7;42;35m<7 42 35> \u001b[0m\u001b[7;42;36m<7 42 36> \u001b[0m\u001b[7;42;37m<7 42 37> \u001b[0m \u001b[4;42;30m<4 42 30> \u001b[0m\u001b[4;42;31m<4 42 31> \u001b[0m\u001b[4;42;32m<4 42 32> \u001b[0m\u001b[4;42;33m<4 42 33> \u001b[0m\u001b[4;42;34m<4 42 34> \u001b[0m\u001b[4;42;35m<4 42 35> \u001b[0m\u001b[4;42;36m<4 42 36> \u001b[0m\u001b[4;42;37m<4 42 37> \u001b[0m \u001b[0;43;30m<0 43 30> \u001b[0m\u001b[0;43;31m<0 43 31> \u001b[0m\u001b[0;43;32m<0 43 32> \u001b[0m\u001b[0;43;33m<0 43 33> \u001b[0m\u001b[0;43;34m<0 43 34> \u001b[0m\u001b[0;43;35m<0 43 35> \u001b[0m\u001b[0;43;36m<0 43 36> \u001b[0m\u001b[0;43;37m<0 43 37> \u001b[0m \u001b[1;43;30m<1 43 30> \u001b[0m\u001b[1;43;31m<1 43 31> \u001b[0m\u001b[1;43;32m<1 43 32> \u001b[0m\u001b[1;43;33m<1 43 33> \u001b[0m\u001b[1;43;34m<1 43 34> \u001b[0m\u001b[1;43;35m<1 43 35> \u001b[0m\u001b[1;43;36m<1 43 36> \u001b[0m\u001b[1;43;37m<1 43 37> \u001b[0m \u001b[2;43;30m<2 43 30> \u001b[0m\u001b[2;43;31m<2 43 31> \u001b[0m\u001b[2;43;32m<2 43 32> \u001b[0m\u001b[2;43;33m<2 43 33> \u001b[0m\u001b[2;43;34m<2 43 34> \u001b[0m\u001b[2;43;35m<2 43 35> \u001b[0m\u001b[2;43;36m<2 43 36> \u001b[0m\u001b[2;43;37m<2 43 37> \u001b[0m \u001b[5;43;30m<5 43 30> \u001b[0m\u001b[5;43;31m<5 43 31> \u001b[0m\u001b[5;43;32m<5 43 32> \u001b[0m\u001b[5;43;33m<5 43 33> \u001b[0m\u001b[5;43;34m<5 43 34> \u001b[0m\u001b[5;43;35m<5 43 35> \u001b[0m\u001b[5;43;36m<5 43 36> \u001b[0m\u001b[5;43;37m<5 43 37> \u001b[0m \u001b[7;43;30m<7 43 30> \u001b[0m\u001b[7;43;31m<7 43 31> \u001b[0m\u001b[7;43;32m<7 43 32> \u001b[0m\u001b[7;43;33m<7 43 33> \u001b[0m\u001b[7;43;34m<7 43 34> \u001b[0m\u001b[7;43;35m<7 43 35> \u001b[0m\u001b[7;43;36m<7 43 36> \u001b[0m\u001b[7;43;37m<7 43 37> \u001b[0m \u001b[4;43;30m<4 43 30> \u001b[0m\u001b[4;43;31m<4 43 31> \u001b[0m\u001b[4;43;32m<4 43 32> \u001b[0m\u001b[4;43;33m<4 43 33> \u001b[0m\u001b[4;43;34m<4 43 34> \u001b[0m\u001b[4;43;35m<4 43 35> \u001b[0m\u001b[4;43;36m<4 43 36> \u001b[0m\u001b[4;43;37m<4 43 37> \u001b[0m \u001b[0;44;30m<0 44 30> \u001b[0m\u001b[0;44;31m<0 44 31> \u001b[0m\u001b[0;44;32m<0 44 32> \u001b[0m\u001b[0;44;33m<0 44 33> \u001b[0m\u001b[0;44;34m<0 44 34> \u001b[0m\u001b[0;44;35m<0 44 35> \u001b[0m\u001b[0;44;36m<0 44 36> \u001b[0m\u001b[0;44;37m<0 44 37> \u001b[0m \u001b[1;44;30m<1 44 30> \u001b[0m\u001b[1;44;31m<1 44 31> \u001b[0m\u001b[1;44;32m<1 44 32> \u001b[0m\u001b[1;44;33m<1 44 33> \u001b[0m\u001b[1;44;34m<1 44 34> \u001b[0m\u001b[1;44;35m<1 44 35> \u001b[0m\u001b[1;44;36m<1 44 36> \u001b[0m\u001b[1;44;37m<1 44 37> \u001b[0m \u001b[2;44;30m<2 44 30> \u001b[0m\u001b[2;44;31m<2 44 31> \u001b[0m\u001b[2;44;32m<2 44 32> \u001b[0m\u001b[2;44;33m<2 44 33> \u001b[0m\u001b[2;44;34m<2 44 34> \u001b[0m\u001b[2;44;35m<2 44 35> \u001b[0m\u001b[2;44;36m<2 44 36> \u001b[0m\u001b[2;44;37m<2 44 37> \u001b[0m \u001b[5;44;30m<5 44 30> \u001b[0m\u001b[5;44;31m<5 44 31> \u001b[0m\u001b[5;44;32m<5 44 32> \u001b[0m\u001b[5;44;33m<5 44 33> \u001b[0m\u001b[5;44;34m<5 44 34> \u001b[0m\u001b[5;44;35m<5 44 35> \u001b[0m\u001b[5;44;36m<5 44 36> \u001b[0m\u001b[5;44;37m<5 44 37> \u001b[0m \u001b[7;44;30m<7 44 30> \u001b[0m\u001b[7;44;31m<7 44 31> \u001b[0m\u001b[7;44;32m<7 44 32> \u001b[0m\u001b[7;44;33m<7 44 33> \u001b[0m\u001b[7;44;34m<7 44 34> \u001b[0m\u001b[7;44;35m<7 44 35> \u001b[0m\u001b[7;44;36m<7 44 36> \u001b[0m\u001b[7;44;37m<7 44 37> \u001b[0m \u001b[4;44;30m<4 44 30> \u001b[0m\u001b[4;44;31m<4 44 31> \u001b[0m\u001b[4;44;32m<4 44 32> \u001b[0m\u001b[4;44;33m<4 44 33> \u001b[0m\u001b[4;44;34m<4 44 34> \u001b[0m\u001b[4;44;35m<4 44 35> \u001b[0m\u001b[4;44;36m<4 44 36> \u001b[0m\u001b[4;44;37m<4 44 37> \u001b[0m \u001b[0;45;30m<0 45 30> \u001b[0m\u001b[0;45;31m<0 45 31> \u001b[0m\u001b[0;45;32m<0 45 32> \u001b[0m\u001b[0;45;33m<0 45 33> \u001b[0m\u001b[0;45;34m<0 45 34> \u001b[0m\u001b[0;45;35m<0 45 35> \u001b[0m\u001b[0;45;36m<0 45 36> \u001b[0m\u001b[0;45;37m<0 45 37> \u001b[0m \u001b[1;45;30m<1 45 30> \u001b[0m\u001b[1;45;31m<1 45 31> \u001b[0m\u001b[1;45;32m<1 45 32> \u001b[0m\u001b[1;45;33m<1 45 33> \u001b[0m\u001b[1;45;34m<1 45 34> \u001b[0m\u001b[1;45;35m<1 45 35> \u001b[0m\u001b[1;45;36m<1 45 36> \u001b[0m\u001b[1;45;37m<1 45 37> \u001b[0m \u001b[2;45;30m<2 45 30> \u001b[0m\u001b[2;45;31m<2 45 31> \u001b[0m\u001b[2;45;32m<2 45 32> \u001b[0m\u001b[2;45;33m<2 45 33> \u001b[0m\u001b[2;45;34m<2 45 34> \u001b[0m\u001b[2;45;35m<2 45 35> \u001b[0m\u001b[2;45;36m<2 45 36> \u001b[0m\u001b[2;45;37m<2 45 37> \u001b[0m \u001b[5;45;30m<5 45 30> \u001b[0m\u001b[5;45;31m<5 45 31> \u001b[0m\u001b[5;45;32m<5 45 32> \u001b[0m\u001b[5;45;33m<5 45 33> \u001b[0m\u001b[5;45;34m<5 45 34> \u001b[0m\u001b[5;45;35m<5 45 35> \u001b[0m\u001b[5;45;36m<5 45 36> \u001b[0m\u001b[5;45;37m<5 45 37> \u001b[0m \u001b[7;45;30m<7 45 30> \u001b[0m\u001b[7;45;31m<7 45 31> \u001b[0m\u001b[7;45;32m<7 45 32> \u001b[0m\u001b[7;45;33m<7 45 33> \u001b[0m\u001b[7;45;34m<7 45 34> \u001b[0m\u001b[7;45;35m<7 45 35> \u001b[0m\u001b[7;45;36m<7 45 36> \u001b[0m\u001b[7;45;37m<7 45 37> \u001b[0m \u001b[4;45;30m<4 45 30> \u001b[0m\u001b[4;45;31m<4 45 31> \u001b[0m\u001b[4;45;32m<4 45 32> \u001b[0m\u001b[4;45;33m<4 45 33> \u001b[0m\u001b[4;45;34m<4 45 34> \u001b[0m\u001b[4;45;35m<4 45 35> \u001b[0m\u001b[4;45;36m<4 45 36> \u001b[0m\u001b[4;45;37m<4 45 37> \u001b[0m \u001b[0;46;30m<0 46 30> \u001b[0m\u001b[0;46;31m<0 46 31> \u001b[0m\u001b[0;46;32m<0 46 32> \u001b[0m\u001b[0;46;33m<0 46 33> \u001b[0m\u001b[0;46;34m<0 46 34> \u001b[0m\u001b[0;46;35m<0 46 35> \u001b[0m\u001b[0;46;36m<0 46 36> \u001b[0m\u001b[0;46;37m<0 46 37> \u001b[0m \u001b[1;46;30m<1 46 30> \u001b[0m\u001b[1;46;31m<1 46 31> \u001b[0m\u001b[1;46;32m<1 46 32> \u001b[0m\u001b[1;46;33m<1 46 33> \u001b[0m\u001b[1;46;34m<1 46 34> \u001b[0m\u001b[1;46;35m<1 46 35> \u001b[0m\u001b[1;46;36m<1 46 36> \u001b[0m\u001b[1;46;37m<1 46 37> \u001b[0m \u001b[2;46;30m<2 46 30> \u001b[0m\u001b[2;46;31m<2 46 31> \u001b[0m\u001b[2;46;32m<2 46 32> \u001b[0m\u001b[2;46;33m<2 46 33> \u001b[0m\u001b[2;46;34m<2 46 34> \u001b[0m\u001b[2;46;35m<2 46 35> \u001b[0m\u001b[2;46;36m<2 46 36> \u001b[0m\u001b[2;46;37m<2 46 37> \u001b[0m \u001b[5;46;30m<5 46 30> \u001b[0m\u001b[5;46;31m<5 46 31> \u001b[0m\u001b[5;46;32m<5 46 32> \u001b[0m\u001b[5;46;33m<5 46 33> \u001b[0m\u001b[5;46;34m<5 46 34> \u001b[0m\u001b[5;46;35m<5 46 35> \u001b[0m\u001b[5;46;36m<5 46 36> \u001b[0m\u001b[5;46;37m<5 46 37> \u001b[0m \u001b[7;46;30m<7 46 30> \u001b[0m\u001b[7;46;31m<7 46 31> \u001b[0m\u001b[7;46;32m<7 46 32> \u001b[0m\u001b[7;46;33m<7 46 33> \u001b[0m\u001b[7;46;34m<7 46 34> \u001b[0m\u001b[7;46;35m<7 46 35> \u001b[0m\u001b[7;46;36m<7 46 36> \u001b[0m\u001b[7;46;37m<7 46 37> \u001b[0m \u001b[4;46;30m<4 46 30> \u001b[0m\u001b[4;46;31m<4 46 31> \u001b[0m\u001b[4;46;32m<4 46 32> \u001b[0m\u001b[4;46;33m<4 46 33> \u001b[0m\u001b[4;46;34m<4 46 34> \u001b[0m\u001b[4;46;35m<4 46 35> \u001b[0m\u001b[4;46;36m<4 46 36> \u001b[0m\u001b[4;46;37m<4 46 37> \u001b[0m \u001b[0;47;30m<0 47 30> \u001b[0m\u001b[0;47;31m<0 47 31> \u001b[0m\u001b[0;47;32m<0 47 32> \u001b[0m\u001b[0;47;33m<0 47 33> \u001b[0m\u001b[0;47;34m<0 47 34> \u001b[0m\u001b[0;47;35m<0 47 35> \u001b[0m\u001b[0;47;36m<0 47 36> \u001b[0m\u001b[0;47;37m<0 47 37> \u001b[0m \u001b[1;47;30m<1 47 30> \u001b[0m\u001b[1;47;31m<1 47 31> \u001b[0m\u001b[1;47;32m<1 47 32> \u001b[0m\u001b[1;47;33m<1 47 33> \u001b[0m\u001b[1;47;34m<1 47 34> \u001b[0m\u001b[1;47;35m<1 47 35> \u001b[0m\u001b[1;47;36m<1 47 36> \u001b[0m\u001b[1;47;37m<1 47 37> \u001b[0m \u001b[2;47;30m<2 47 30> \u001b[0m\u001b[2;47;31m<2 47 31> \u001b[0m\u001b[2;47;32m<2 47 32> \u001b[0m\u001b[2;47;33m<2 47 33> \u001b[0m\u001b[2;47;34m<2 47 34> \u001b[0m\u001b[2;47;35m<2 47 35> \u001b[0m\u001b[2;47;36m<2 47 36> \u001b[0m\u001b[2;47;37m<2 47 37> \u001b[0m \u001b[5;47;30m<5 47 30> \u001b[0m\u001b[5;47;31m<5 47 31> \u001b[0m\u001b[5;47;32m<5 47 32> \u001b[0m\u001b[5;47;33m<5 47 33> \u001b[0m\u001b[5;47;34m<5 47 34> \u001b[0m\u001b[5;47;35m<5 47 35> \u001b[0m\u001b[5;47;36m<5 47 36> \u001b[0m\u001b[5;47;37m<5 47 37> \u001b[0m \u001b[7;47;30m<7 47 30> \u001b[0m\u001b[7;47;31m<7 47 31> \u001b[0m\u001b[7;47;32m<7 47 32> \u001b[0m\u001b[7;47;33m<7 47 33> \u001b[0m\u001b[7;47;34m<7 47 34> \u001b[0m\u001b[7;47;35m<7 47 35> \u001b[0m\u001b[7;47;36m<7 47 36> \u001b[0m\u001b[7;47;37m<7 47 37> \u001b[0m \u001b[4;47;30m<4 47 30> \u001b[0m\u001b[4;47;31m<4 47 31> \u001b[0m\u001b[4;47;32m<4 47 32> \u001b[0m\u001b[4;47;33m<4 47 33> \u001b[0m\u001b[4;47;34m<4 47 34> \u001b[0m\u001b[4;47;35m<4 47 35> \u001b[0m\u001b[4;47;36m<4 47 36> \u001b[0m\u001b[4;47;37m<4 47 37> \u001b[0m Not specifying the background color \u001b[0;30m<0 NA 30> \u001b[0m\u001b[0;31m<0 NA 31> \u001b[0m\u001b[0;32m<0 NA 32> \u001b[0m\u001b[0;33m<0 NA 33> \u001b[0m\u001b[0;34m<0 NA 34> \u001b[0m\u001b[0;35m<0 NA 35> \u001b[0m\u001b[0;36m<0 NA 36> \u001b[0m\u001b[0;37m<0 NA 37> \u001b[0m \u001b[1;30m<1 NA 30> \u001b[0m\u001b[1;31m<1 NA 31> \u001b[0m\u001b[1;32m<1 NA 32> \u001b[0m\u001b[1;33m<1 NA 33> \u001b[0m\u001b[1;34m<1 NA 34> \u001b[0m\u001b[1;35m<1 NA 35> \u001b[0m\u001b[1;36m<1 NA 36> \u001b[0m\u001b[1;37m<1 NA 37> \u001b[0m \u001b[2;30m<2 NA 30> \u001b[0m\u001b[2;31m<2 NA 31> \u001b[0m\u001b[2;32m<2 NA 32> \u001b[0m\u001b[2;33m<2 NA 33> \u001b[0m\u001b[2;34m<2 NA 34> \u001b[0m\u001b[2;35m<2 NA 35> \u001b[0m\u001b[2;36m<2 NA 36> \u001b[0m\u001b[2;37m<2 NA 37> \u001b[0m \u001b[5;30m<5 NA 30> \u001b[0m\u001b[5;31m<5 NA 31> \u001b[0m\u001b[5;32m<5 NA 32> \u001b[0m\u001b[5;33m<5 NA 33> \u001b[0m\u001b[5;34m<5 NA 34> \u001b[0m\u001b[5;35m<5 NA 35> \u001b[0m\u001b[5;36m<5 NA 36> \u001b[0m\u001b[5;37m<5 NA 37> \u001b[0m \u001b[7;30m<7 NA 30> \u001b[0m\u001b[7;31m<7 NA 31> \u001b[0m\u001b[7;32m<7 NA 32> \u001b[0m\u001b[7;33m<7 NA 33> \u001b[0m\u001b[7;34m<7 NA 34> \u001b[0m\u001b[7;35m<7 NA 35> \u001b[0m\u001b[7;36m<7 NA 36> \u001b[0m\u001b[7;37m<7 NA 37> \u001b[0m \u001b[4;30m<4 NA 30> \u001b[0m\u001b[4;31m<4 NA 31> \u001b[0m\u001b[4;32m<4 NA 32> \u001b[0m\u001b[4;33m<4 NA 33> \u001b[0m\u001b[4;34m<4 NA 34> \u001b[0m\u001b[4;35m<4 NA 35> \u001b[0m\u001b[4;36m<4 NA 36> \u001b[0m\u001b[4;37m<4 NA 37> \u001b[0m Testing 256 colors \u001b[48;5;0m 000 \u001b[0m\u001b[48;5;1m 001 \u001b[0m\u001b[48;5;2m 002 \u001b[0m\u001b[48;5;3m 003 \u001b[0m\u001b[48;5;4m 004 \u001b[0m\u001b[48;5;5m 005 \u001b[0m\u001b[48;5;6m 006 \u001b[0m\u001b[48;5;7m 007 \u001b[0m\u001b[48;5;8m 008 \u001b[0m\u001b[48;5;9m 009 \u001b[0m\u001b[48;5;10m 010 \u001b[0m\u001b[48;5;11m 011 \u001b[0m\u001b[48;5;12m 012 \u001b[0m\u001b[48;5;13m 013 \u001b[0m\u001b[48;5;14m 014 \u001b[0m\u001b[48;5;15m 015 \u001b[0m \u001b[48;5;16m 016 \u001b[0m\u001b[48;5;17m 017 \u001b[0m\u001b[48;5;18m 018 \u001b[0m\u001b[48;5;19m 019 \u001b[0m\u001b[48;5;20m 020 \u001b[0m\u001b[48;5;21m 021 \u001b[0m\u001b[48;5;22m 022 \u001b[0m\u001b[48;5;23m 023 \u001b[0m\u001b[48;5;24m 024 \u001b[0m\u001b[48;5;25m 025 \u001b[0m\u001b[48;5;26m 026 \u001b[0m\u001b[48;5;27m 027 \u001b[0m\u001b[48;5;28m 028 \u001b[0m\u001b[48;5;29m 029 \u001b[0m\u001b[48;5;30m 030 \u001b[0m\u001b[48;5;31m 031 \u001b[0m \u001b[48;5;32m 032 \u001b[0m\u001b[48;5;33m 033 \u001b[0m\u001b[48;5;34m 034 \u001b[0m\u001b[48;5;35m 035 \u001b[0m\u001b[48;5;36m 036 \u001b[0m\u001b[48;5;37m 037 \u001b[0m\u001b[48;5;38m 038 \u001b[0m\u001b[48;5;39m 039 \u001b[0m\u001b[48;5;40m 040 \u001b[0m\u001b[48;5;41m 041 \u001b[0m\u001b[48;5;42m 042 \u001b[0m\u001b[48;5;43m 043 \u001b[0m\u001b[48;5;44m 044 \u001b[0m\u001b[48;5;45m 045 \u001b[0m\u001b[48;5;46m 046 \u001b[0m\u001b[48;5;47m 047 \u001b[0m \u001b[48;5;48m 048 \u001b[0m\u001b[48;5;49m 049 \u001b[0m\u001b[48;5;50m 050 \u001b[0m\u001b[48;5;51m 051 \u001b[0m\u001b[48;5;52m 052 \u001b[0m\u001b[48;5;53m 053 \u001b[0m\u001b[48;5;54m 054 \u001b[0m\u001b[48;5;55m 055 \u001b[0m\u001b[48;5;56m 056 \u001b[0m\u001b[48;5;57m 057 \u001b[0m\u001b[48;5;58m 058 \u001b[0m\u001b[48;5;59m 059 \u001b[0m\u001b[48;5;60m 060 \u001b[0m\u001b[48;5;61m 061 \u001b[0m\u001b[48;5;62m 062 \u001b[0m\u001b[48;5;63m 063 \u001b[0m \u001b[48;5;64m 064 \u001b[0m\u001b[48;5;65m 065 \u001b[0m\u001b[48;5;66m 066 \u001b[0m\u001b[48;5;67m 067 \u001b[0m\u001b[48;5;68m 068 \u001b[0m\u001b[48;5;69m 069 \u001b[0m\u001b[48;5;70m 070 \u001b[0m\u001b[48;5;71m 071 \u001b[0m\u001b[48;5;72m 072 \u001b[0m\u001b[48;5;73m 073 \u001b[0m\u001b[48;5;74m 074 \u001b[0m\u001b[48;5;75m 075 \u001b[0m\u001b[48;5;76m 076 \u001b[0m\u001b[48;5;77m 077 \u001b[0m\u001b[48;5;78m 078 \u001b[0m\u001b[48;5;79m 079 \u001b[0m \u001b[48;5;80m 080 \u001b[0m\u001b[48;5;81m 081 \u001b[0m\u001b[48;5;82m 082 \u001b[0m\u001b[48;5;83m 083 \u001b[0m\u001b[48;5;84m 084 \u001b[0m\u001b[48;5;85m 085 \u001b[0m\u001b[48;5;86m 086 \u001b[0m\u001b[48;5;87m 087 \u001b[0m\u001b[48;5;88m 088 \u001b[0m\u001b[48;5;89m 089 \u001b[0m\u001b[48;5;90m 090 \u001b[0m\u001b[48;5;91m 091 \u001b[0m\u001b[48;5;92m 092 \u001b[0m\u001b[48;5;93m 093 \u001b[0m\u001b[48;5;94m 094 \u001b[0m\u001b[48;5;95m 095 \u001b[0m \u001b[48;5;96m 096 \u001b[0m\u001b[48;5;97m 097 \u001b[0m\u001b[48;5;98m 098 \u001b[0m\u001b[48;5;99m 099 \u001b[0m\u001b[48;5;100m 100 \u001b[0m\u001b[48;5;101m 101 \u001b[0m\u001b[48;5;102m 102 \u001b[0m\u001b[48;5;103m 103 \u001b[0m\u001b[48;5;104m 104 \u001b[0m\u001b[48;5;105m 105 \u001b[0m\u001b[48;5;106m 106 \u001b[0m\u001b[48;5;107m 107 \u001b[0m\u001b[48;5;108m 108 \u001b[0m\u001b[48;5;109m 109 \u001b[0m\u001b[48;5;110m 110 \u001b[0m\u001b[48;5;111m 111 \u001b[0m \u001b[48;5;112m 112 \u001b[0m\u001b[48;5;113m 113 \u001b[0m\u001b[48;5;114m 114 \u001b[0m\u001b[48;5;115m 115 \u001b[0m\u001b[48;5;116m 116 \u001b[0m\u001b[48;5;117m 117 \u001b[0m\u001b[48;5;118m 118 \u001b[0m\u001b[48;5;119m 119 \u001b[0m\u001b[48;5;120m 120 \u001b[0m\u001b[48;5;121m 121 \u001b[0m\u001b[48;5;122m 122 \u001b[0m\u001b[48;5;123m 123 \u001b[0m\u001b[48;5;124m 124 \u001b[0m\u001b[48;5;125m 125 \u001b[0m\u001b[48;5;126m 126 \u001b[0m\u001b[48;5;127m 127 \u001b[0m \u001b[48;5;128m 128 \u001b[0m\u001b[48;5;129m 129 \u001b[0m\u001b[48;5;130m 130 \u001b[0m\u001b[48;5;131m 131 \u001b[0m\u001b[48;5;132m 132 \u001b[0m\u001b[48;5;133m 133 \u001b[0m\u001b[48;5;134m 134 \u001b[0m\u001b[48;5;135m 135 \u001b[0m\u001b[48;5;136m 136 \u001b[0m\u001b[48;5;137m 137 \u001b[0m\u001b[48;5;138m 138 \u001b[0m\u001b[48;5;139m 139 \u001b[0m\u001b[48;5;140m 140 \u001b[0m\u001b[48;5;141m 141 \u001b[0m\u001b[48;5;142m 142 \u001b[0m\u001b[48;5;143m 143 \u001b[0m \u001b[48;5;144m 144 \u001b[0m\u001b[48;5;145m 145 \u001b[0m\u001b[48;5;146m 146 \u001b[0m\u001b[48;5;147m 147 \u001b[0m\u001b[48;5;148m 148 \u001b[0m\u001b[48;5;149m 149 \u001b[0m\u001b[48;5;150m 150 \u001b[0m\u001b[48;5;151m 151 \u001b[0m\u001b[48;5;152m 152 \u001b[0m\u001b[48;5;153m 153 \u001b[0m\u001b[48;5;154m 154 \u001b[0m\u001b[48;5;155m 155 \u001b[0m\u001b[48;5;156m 156 \u001b[0m\u001b[48;5;157m 157 \u001b[0m\u001b[48;5;158m 158 \u001b[0m\u001b[48;5;159m 159 \u001b[0m \u001b[48;5;160m 160 \u001b[0m\u001b[48;5;161m 161 \u001b[0m\u001b[48;5;162m 162 \u001b[0m\u001b[48;5;163m 163 \u001b[0m\u001b[48;5;164m 164 \u001b[0m\u001b[48;5;165m 165 \u001b[0m\u001b[48;5;166m 166 \u001b[0m\u001b[48;5;167m 167 \u001b[0m\u001b[48;5;168m 168 \u001b[0m\u001b[48;5;169m 169 \u001b[0m\u001b[48;5;170m 170 \u001b[0m\u001b[48;5;171m 171 \u001b[0m\u001b[48;5;172m 172 \u001b[0m\u001b[48;5;173m 173 \u001b[0m\u001b[48;5;174m 174 \u001b[0m\u001b[48;5;175m 175 \u001b[0m \u001b[48;5;176m 176 \u001b[0m\u001b[48;5;177m 177 \u001b[0m\u001b[48;5;178m 178 \u001b[0m\u001b[48;5;179m 179 \u001b[0m\u001b[48;5;180m 180 \u001b[0m\u001b[48;5;181m 181 \u001b[0m\u001b[48;5;182m 182 \u001b[0m\u001b[48;5;183m 183 \u001b[0m\u001b[48;5;184m 184 \u001b[0m\u001b[48;5;185m 185 \u001b[0m\u001b[48;5;186m 186 \u001b[0m\u001b[48;5;187m 187 \u001b[0m\u001b[48;5;188m 188 \u001b[0m\u001b[48;5;189m 189 \u001b[0m\u001b[48;5;190m 190 \u001b[0m\u001b[48;5;191m 191 \u001b[0m \u001b[48;5;192m 192 \u001b[0m\u001b[48;5;193m 193 \u001b[0m\u001b[48;5;194m 194 \u001b[0m\u001b[48;5;195m 195 \u001b[0m\u001b[48;5;196m 196 \u001b[0m\u001b[48;5;197m 197 \u001b[0m\u001b[48;5;198m 198 \u001b[0m\u001b[48;5;199m 199 \u001b[0m\u001b[48;5;200m 200 \u001b[0m\u001b[48;5;201m 201 \u001b[0m\u001b[48;5;202m 202 \u001b[0m\u001b[48;5;203m 203 \u001b[0m\u001b[48;5;204m 204 \u001b[0m\u001b[48;5;205m 205 \u001b[0m\u001b[48;5;206m 206 \u001b[0m\u001b[48;5;207m 207 \u001b[0m \u001b[48;5;208m 208 \u001b[0m\u001b[48;5;209m 209 \u001b[0m\u001b[48;5;210m 210 \u001b[0m\u001b[48;5;211m 211 \u001b[0m\u001b[48;5;212m 212 \u001b[0m\u001b[48;5;213m 213 \u001b[0m\u001b[48;5;214m 214 \u001b[0m\u001b[48;5;215m 215 \u001b[0m\u001b[48;5;216m 216 \u001b[0m\u001b[48;5;217m 217 \u001b[0m\u001b[48;5;218m 218 \u001b[0m\u001b[48;5;219m 219 \u001b[0m\u001b[48;5;220m 220 \u001b[0m\u001b[48;5;221m 221 \u001b[0m\u001b[48;5;222m 222 \u001b[0m\u001b[48;5;223m 223 \u001b[0m \u001b[48;5;224m 224 \u001b[0m\u001b[48;5;225m 225 \u001b[0m\u001b[48;5;226m 226 \u001b[0m\u001b[48;5;227m 227 \u001b[0m\u001b[48;5;228m 228 \u001b[0m\u001b[48;5;229m 229 \u001b[0m\u001b[48;5;230m 230 \u001b[0m\u001b[48;5;231m 231 \u001b[0m\u001b[48;5;232m 232 \u001b[0m\u001b[48;5;233m 233 \u001b[0m\u001b[48;5;234m 234 \u001b[0m\u001b[48;5;235m 235 \u001b[0m\u001b[48;5;236m 236 \u001b[0m\u001b[48;5;237m 237 \u001b[0m\u001b[48;5;238m 238 \u001b[0m\u001b[48;5;239m 239 \u001b[0m \u001b[48;5;240m 240 \u001b[0m\u001b[48;5;241m 241 \u001b[0m\u001b[48;5;242m 242 \u001b[0m\u001b[48;5;243m 243 \u001b[0m\u001b[48;5;244m 244 \u001b[0m\u001b[48;5;245m 245 \u001b[0m\u001b[48;5;246m 246 \u001b[0m\u001b[48;5;247m 247 \u001b[0m\u001b[48;5;248m 248 \u001b[0m\u001b[48;5;249m 249 \u001b[0m\u001b[48;5;250m 250 \u001b[0m\u001b[48;5;251m 251 \u001b[0m\u001b[48;5;252m 252 \u001b[0m\u001b[48;5;253m 253 \u001b[0m\u001b[48;5;254m 254 \u001b[0m\u001b[48;5;255m 255 \u001b[0m * * * * \u001b[4;38;5;0m 000 \u001b[0m\u001b[4;38;5;1m 001 \u001b[0m\u001b[4;38;5;2m 002 \u001b[0m\u001b[4;38;5;3m 003 \u001b[0m\u001b[4;38;5;4m 004 \u001b[0m\u001b[4;38;5;5m 005 \u001b[0m\u001b[4;38;5;6m 006 \u001b[0m\u001b[4;38;5;7m 007 \u001b[0m\u001b[4;38;5;8m 008 \u001b[0m\u001b[4;38;5;9m 009 \u001b[0m\u001b[4;38;5;10m 010 \u001b[0m\u001b[4;38;5;11m 011 \u001b[0m\u001b[4;38;5;12m 012 \u001b[0m\u001b[4;38;5;13m 013 \u001b[0m\u001b[4;38;5;14m 014 \u001b[0m\u001b[4;38;5;15m 015 \u001b[0m \u001b[4;38;5;16m 016 \u001b[0m\u001b[4;38;5;17m 017 \u001b[0m\u001b[4;38;5;18m 018 \u001b[0m\u001b[4;38;5;19m 019 \u001b[0m\u001b[4;38;5;20m 020 \u001b[0m\u001b[4;38;5;21m 021 \u001b[0m\u001b[4;38;5;22m 022 \u001b[0m\u001b[4;38;5;23m 023 \u001b[0m\u001b[4;38;5;24m 024 \u001b[0m\u001b[4;38;5;25m 025 \u001b[0m\u001b[4;38;5;26m 026 \u001b[0m\u001b[4;38;5;27m 027 \u001b[0m\u001b[4;38;5;28m 028 \u001b[0m\u001b[4;38;5;29m 029 \u001b[0m\u001b[4;38;5;30m 030 \u001b[0m\u001b[4;38;5;31m 031 \u001b[0m \u001b[4;38;5;32m 032 \u001b[0m\u001b[4;38;5;33m 033 \u001b[0m\u001b[4;38;5;34m 034 \u001b[0m\u001b[4;38;5;35m 035 \u001b[0m\u001b[4;38;5;36m 036 \u001b[0m\u001b[4;38;5;37m 037 \u001b[0m\u001b[4;38;5;38m 038 \u001b[0m\u001b[4;38;5;39m 039 \u001b[0m\u001b[4;38;5;40m 040 \u001b[0m\u001b[4;38;5;41m 041 \u001b[0m\u001b[4;38;5;42m 042 \u001b[0m\u001b[4;38;5;43m 043 \u001b[0m\u001b[4;38;5;44m 044 \u001b[0m\u001b[4;38;5;45m 045 \u001b[0m\u001b[4;38;5;46m 046 \u001b[0m\u001b[4;38;5;47m 047 \u001b[0m \u001b[4;38;5;48m 048 \u001b[0m\u001b[4;38;5;49m 049 \u001b[0m\u001b[4;38;5;50m 050 \u001b[0m\u001b[4;38;5;51m 051 \u001b[0m\u001b[4;38;5;52m 052 \u001b[0m\u001b[4;38;5;53m 053 \u001b[0m\u001b[4;38;5;54m 054 \u001b[0m\u001b[4;38;5;55m 055 \u001b[0m\u001b[4;38;5;56m 056 \u001b[0m\u001b[4;38;5;57m 057 \u001b[0m\u001b[4;38;5;58m 058 \u001b[0m\u001b[4;38;5;59m 059 \u001b[0m\u001b[4;38;5;60m 060 \u001b[0m\u001b[4;38;5;61m 061 \u001b[0m\u001b[4;38;5;62m 062 \u001b[0m\u001b[4;38;5;63m 063 \u001b[0m \u001b[4;38;5;64m 064 \u001b[0m\u001b[4;38;5;65m 065 \u001b[0m\u001b[4;38;5;66m 066 \u001b[0m\u001b[4;38;5;67m 067 \u001b[0m\u001b[4;38;5;68m 068 \u001b[0m\u001b[4;38;5;69m 069 \u001b[0m\u001b[4;38;5;70m 070 \u001b[0m\u001b[4;38;5;71m 071 \u001b[0m\u001b[4;38;5;72m 072 \u001b[0m\u001b[4;38;5;73m 073 \u001b[0m\u001b[4;38;5;74m 074 \u001b[0m\u001b[4;38;5;75m 075 \u001b[0m\u001b[4;38;5;76m 076 \u001b[0m\u001b[4;38;5;77m 077 \u001b[0m\u001b[4;38;5;78m 078 \u001b[0m\u001b[4;38;5;79m 079 \u001b[0m \u001b[4;38;5;80m 080 \u001b[0m\u001b[4;38;5;81m 081 \u001b[0m\u001b[4;38;5;82m 082 \u001b[0m\u001b[4;38;5;83m 083 \u001b[0m\u001b[4;38;5;84m 084 \u001b[0m\u001b[4;38;5;85m 085 \u001b[0m\u001b[4;38;5;86m 086 \u001b[0m\u001b[4;38;5;87m 087 \u001b[0m\u001b[4;38;5;88m 088 \u001b[0m\u001b[4;38;5;89m 089 \u001b[0m\u001b[4;38;5;90m 090 \u001b[0m\u001b[4;38;5;91m 091 \u001b[0m\u001b[4;38;5;92m 092 \u001b[0m\u001b[4;38;5;93m 093 \u001b[0m\u001b[4;38;5;94m 094 \u001b[0m\u001b[4;38;5;95m 095 \u001b[0m \u001b[4;38;5;96m 096 \u001b[0m\u001b[4;38;5;97m 097 \u001b[0m\u001b[4;38;5;98m 098 \u001b[0m\u001b[4;38;5;99m 099 \u001b[0m\u001b[4;38;5;100m 100 \u001b[0m\u001b[4;38;5;101m 101 \u001b[0m\u001b[4;38;5;102m 102 \u001b[0m\u001b[4;38;5;103m 103 \u001b[0m\u001b[4;38;5;104m 104 \u001b[0m\u001b[4;38;5;105m 105 \u001b[0m\u001b[4;38;5;106m 106 \u001b[0m\u001b[4;38;5;107m 107 \u001b[0m\u001b[4;38;5;108m 108 \u001b[0m\u001b[4;38;5;109m 109 \u001b[0m\u001b[4;38;5;110m 110 \u001b[0m\u001b[4;38;5;111m 111 \u001b[0m \u001b[4;38;5;112m 112 \u001b[0m\u001b[4;38;5;113m 113 \u001b[0m\u001b[4;38;5;114m 114 \u001b[0m\u001b[4;38;5;115m 115 \u001b[0m\u001b[4;38;5;116m 116 \u001b[0m\u001b[4;38;5;117m 117 \u001b[0m\u001b[4;38;5;118m 118 \u001b[0m\u001b[4;38;5;119m 119 \u001b[0m\u001b[4;38;5;120m 120 \u001b[0m\u001b[4;38;5;121m 121 \u001b[0m\u001b[4;38;5;122m 122 \u001b[0m\u001b[4;38;5;123m 123 \u001b[0m\u001b[4;38;5;124m 124 \u001b[0m\u001b[4;38;5;125m 125 \u001b[0m\u001b[4;38;5;126m 126 \u001b[0m\u001b[4;38;5;127m 127 \u001b[0m \u001b[4;38;5;128m 128 \u001b[0m\u001b[4;38;5;129m 129 \u001b[0m\u001b[4;38;5;130m 130 \u001b[0m\u001b[4;38;5;131m 131 \u001b[0m\u001b[4;38;5;132m 132 \u001b[0m\u001b[4;38;5;133m 133 \u001b[0m\u001b[4;38;5;134m 134 \u001b[0m\u001b[4;38;5;135m 135 \u001b[0m\u001b[4;38;5;136m 136 \u001b[0m\u001b[4;38;5;137m 137 \u001b[0m\u001b[4;38;5;138m 138 \u001b[0m\u001b[4;38;5;139m 139 \u001b[0m\u001b[4;38;5;140m 140 \u001b[0m\u001b[4;38;5;141m 141 \u001b[0m\u001b[4;38;5;142m 142 \u001b[0m\u001b[4;38;5;143m 143 \u001b[0m \u001b[4;38;5;144m 144 \u001b[0m\u001b[4;38;5;145m 145 \u001b[0m\u001b[4;38;5;146m 146 \u001b[0m\u001b[4;38;5;147m 147 \u001b[0m\u001b[4;38;5;148m 148 \u001b[0m\u001b[4;38;5;149m 149 \u001b[0m\u001b[4;38;5;150m 150 \u001b[0m\u001b[4;38;5;151m 151 \u001b[0m\u001b[4;38;5;152m 152 \u001b[0m\u001b[4;38;5;153m 153 \u001b[0m\u001b[4;38;5;154m 154 \u001b[0m\u001b[4;38;5;155m 155 \u001b[0m\u001b[4;38;5;156m 156 \u001b[0m\u001b[4;38;5;157m 157 \u001b[0m\u001b[4;38;5;158m 158 \u001b[0m\u001b[4;38;5;159m 159 \u001b[0m \u001b[4;38;5;160m 160 \u001b[0m\u001b[4;38;5;161m 161 \u001b[0m\u001b[4;38;5;162m 162 \u001b[0m\u001b[4;38;5;163m 163 \u001b[0m\u001b[4;38;5;164m 164 \u001b[0m\u001b[4;38;5;165m 165 \u001b[0m\u001b[4;38;5;166m 166 \u001b[0m\u001b[4;38;5;167m 167 \u001b[0m\u001b[4;38;5;168m 168 \u001b[0m\u001b[4;38;5;169m 169 \u001b[0m\u001b[4;38;5;170m 170 \u001b[0m\u001b[4;38;5;171m 171 \u001b[0m\u001b[4;38;5;172m 172 \u001b[0m\u001b[4;38;5;173m 173 \u001b[0m\u001b[4;38;5;174m 174 \u001b[0m\u001b[4;38;5;175m 175 \u001b[0m \u001b[4;38;5;176m 176 \u001b[0m\u001b[4;38;5;177m 177 \u001b[0m\u001b[4;38;5;178m 178 \u001b[0m\u001b[4;38;5;179m 179 \u001b[0m\u001b[4;38;5;180m 180 \u001b[0m\u001b[4;38;5;181m 181 \u001b[0m\u001b[4;38;5;182m 182 \u001b[0m\u001b[4;38;5;183m 183 \u001b[0m\u001b[4;38;5;184m 184 \u001b[0m\u001b[4;38;5;185m 185 \u001b[0m\u001b[4;38;5;186m 186 \u001b[0m\u001b[4;38;5;187m 187 \u001b[0m\u001b[4;38;5;188m 188 \u001b[0m\u001b[4;38;5;189m 189 \u001b[0m\u001b[4;38;5;190m 190 \u001b[0m\u001b[4;38;5;191m 191 \u001b[0m \u001b[4;38;5;192m 192 \u001b[0m\u001b[4;38;5;193m 193 \u001b[0m\u001b[4;38;5;194m 194 \u001b[0m\u001b[4;38;5;195m 195 \u001b[0m\u001b[4;38;5;196m 196 \u001b[0m\u001b[4;38;5;197m 197 \u001b[0m\u001b[4;38;5;198m 198 \u001b[0m\u001b[4;38;5;199m 199 \u001b[0m\u001b[4;38;5;200m 200 \u001b[0m\u001b[4;38;5;201m 201 \u001b[0m\u001b[4;38;5;202m 202 \u001b[0m\u001b[4;38;5;203m 203 \u001b[0m\u001b[4;38;5;204m 204 \u001b[0m\u001b[4;38;5;205m 205 \u001b[0m\u001b[4;38;5;206m 206 \u001b[0m\u001b[4;38;5;207m 207 \u001b[0m \u001b[4;38;5;208m 208 \u001b[0m\u001b[4;38;5;209m 209 \u001b[0m\u001b[4;38;5;210m 210 \u001b[0m\u001b[4;38;5;211m 211 \u001b[0m\u001b[4;38;5;212m 212 \u001b[0m\u001b[4;38;5;213m 213 \u001b[0m\u001b[4;38;5;214m 214 \u001b[0m\u001b[4;38;5;215m 215 \u001b[0m\u001b[4;38;5;216m 216 \u001b[0m\u001b[4;38;5;217m 217 \u001b[0m\u001b[4;38;5;218m 218 \u001b[0m\u001b[4;38;5;219m 219 \u001b[0m\u001b[4;38;5;220m 220 \u001b[0m\u001b[4;38;5;221m 221 \u001b[0m\u001b[4;38;5;222m 222 \u001b[0m\u001b[4;38;5;223m 223 \u001b[0m \u001b[4;38;5;224m 224 \u001b[0m\u001b[4;38;5;225m 225 \u001b[0m\u001b[4;38;5;226m 226 \u001b[0m\u001b[4;38;5;227m 227 \u001b[0m\u001b[4;38;5;228m 228 \u001b[0m\u001b[4;38;5;229m 229 \u001b[0m\u001b[4;38;5;230m 230 \u001b[0m\u001b[4;38;5;231m 231 \u001b[0m\u001b[4;38;5;232m 232 \u001b[0m\u001b[4;38;5;233m 233 \u001b[0m\u001b[4;38;5;234m 234 \u001b[0m\u001b[4;38;5;235m 235 \u001b[0m\u001b[4;38;5;236m 236 \u001b[0m\u001b[4;38;5;237m 237 \u001b[0m\u001b[4;38;5;238m 238 \u001b[0m\u001b[4;38;5;239m 239 \u001b[0m \u001b[4;38;5;240m 240 \u001b[0m\u001b[4;38;5;241m 241 \u001b[0m\u001b[4;38;5;242m 242 \u001b[0m\u001b[4;38;5;243m 243 \u001b[0m\u001b[4;38;5;244m 244 \u001b[0m\u001b[4;38;5;245m 245 \u001b[0m\u001b[4;38;5;246m 246 \u001b[0m\u001b[4;38;5;247m 247 \u001b[0m\u001b[4;38;5;248m 248 \u001b[0m\u001b[4;38;5;249m 249 \u001b[0m\u001b[4;38;5;250m 250 \u001b[0m\u001b[4;38;5;251m 251 \u001b[0m\u001b[4;38;5;252m 252 \u001b[0m\u001b[4;38;5;253m 253 \u001b[0m\u001b[4;38;5;254m 254 \u001b[0m\u001b[4;38;5;255m 255 \u001b[0m Bye! typeof start_lc === \"undefined\" ? 0 : start_lc()","title":"Terminal Color Support"},{"location":"features/lp/bash/","text":"@media only screen and (min-width: 76.25em) { .md-main__inner { max-width: none; } .md-sidebar--primary { left: 0; } .md-sidebar--secondary { right: 0; margin-left: 0; -webkit-transform: none; transform: none; } } bash \u00a4 This is the default evaluation mode, i.e. run when no mode parameter is given in the header. It runs the given statements within a bash shell, subprocess.call style. Example \u00a4 LP Source: ``` bash lp:bash addsrc ls -lta --color = always /etc | head -n 20 ``` Result: Cmd Output $ ls -lta --color = always /etc | head -n 20 $ ls -lta --color=always /etc | head -n 20 total 1120 -rw-r--r-- 1 root root 484 Apr 11 14:54 hosts -rw-r----- 1 root shadow 1229 Apr 11 14:54 shadow drwxr-xr-x 2 root root 20480 Apr 11 14:53 alternatives drwxr-xr-x 4 root root 4096 Apr 11 14:53 ssh -rw-r--r-- 1 root root 326 Apr 11 14:53 fstab drwxr-xr-x 21 root root 4096 Apr 11 14:53 .. drwxr-xr-x 139 root root 12288 Apr 7 10:17 . -rw-r--r-- 1 root root 147 Apr 7 10:17 cgconfig.conf -rw-r--r-- 1 root root 153 Apr 7 10:17 cgrules.conf drwxr-xr-x 2 root root 4096 Apr 7 10:17 docker -rw-r--r-- 1 root root 60866 Apr 7 10:17 ld.so.cache -rw-r--r-- 1 root root 2637 Apr 7 10:17 environment drwxr-xr-x 2 root root 4096 Apr 7 10:17 conf drwxr-xr-x 2 root root 4096 Apr 7 10:17 vsts drwxr-x--- 2 root root 4096 Apr 7 10:17 sudoers.d -rw-r----- 1 root shadow 914 Apr 7 10:15 gshadow -rw-r--r-- 1 root root 1074 Apr 7 10:15 group -rw-r--r-- 1 root root 2230 Apr 7 10:15 passwd -rw-r--r-- 1 root root 2231 Apr 7 10:15 passwd- Parameters and Syntax \u00a4 We have dedicated sections for those: Parameters . Syntax . Sessions \u00a4 When you supply a session or new_session parameter, we will send the statements over into tmux and run them there - i.e. you may control blocking subprocesses, including REPLs , i.e. a nodejs session (...). See here for more about that. typeof start_lc === \"undefined\" ? 0 : start_lc()","title":"Overview"},{"location":"features/lp/bash/#bash","text":"This is the default evaluation mode, i.e. run when no mode parameter is given in the header. It runs the given statements within a bash shell, subprocess.call style.","title":"bash "},{"location":"features/lp/bash/#example","text":"LP Source: ``` bash lp:bash addsrc ls -lta --color = always /etc | head -n 20 ``` Result: Cmd Output $ ls -lta --color = always /etc | head -n 20 $ ls -lta --color=always /etc | head -n 20 total 1120 -rw-r--r-- 1 root root 484 Apr 11 14:54 hosts -rw-r----- 1 root shadow 1229 Apr 11 14:54 shadow drwxr-xr-x 2 root root 20480 Apr 11 14:53 alternatives drwxr-xr-x 4 root root 4096 Apr 11 14:53 ssh -rw-r--r-- 1 root root 326 Apr 11 14:53 fstab drwxr-xr-x 21 root root 4096 Apr 11 14:53 .. drwxr-xr-x 139 root root 12288 Apr 7 10:17 . -rw-r--r-- 1 root root 147 Apr 7 10:17 cgconfig.conf -rw-r--r-- 1 root root 153 Apr 7 10:17 cgrules.conf drwxr-xr-x 2 root root 4096 Apr 7 10:17 docker -rw-r--r-- 1 root root 60866 Apr 7 10:17 ld.so.cache -rw-r--r-- 1 root root 2637 Apr 7 10:17 environment drwxr-xr-x 2 root root 4096 Apr 7 10:17 conf drwxr-xr-x 2 root root 4096 Apr 7 10:17 vsts drwxr-x--- 2 root root 4096 Apr 7 10:17 sudoers.d -rw-r----- 1 root shadow 914 Apr 7 10:15 gshadow -rw-r--r-- 1 root root 1074 Apr 7 10:15 group -rw-r--r-- 1 root root 2230 Apr 7 10:15 passwd -rw-r--r-- 1 root root 2231 Apr 7 10:15 passwd-","title":"Example"},{"location":"features/lp/bash/#parameters-and-syntax","text":"We have dedicated sections for those: Parameters . Syntax .","title":"Parameters and Syntax"},{"location":"features/lp/bash/#sessions","text":"When you supply a session or new_session parameter, we will send the statements over into tmux and run them there - i.e. you may control blocking subprocesses, including REPLs , i.e. a nodejs session (...). See here for more about that. typeof start_lc === \"undefined\" ? 0 : start_lc()","title":"Sessions"},{"location":"features/lp/bash/sessions/","text":"@media only screen and (min-width: 76.25em) { .md-main__inner { max-width: none; } .md-sidebar--primary { left: 0; } .md-sidebar--secondary { right: 0; margin-left: 0; -webkit-transform: none; transform: none; } } Shell Sessions / Tmux \u00a4 Sessions are a required, when you document (or func test) longer command flows, with shared internal or external (e.g. filesystem) state. We do not keep internal state within the docu building process but rely on tmux to keep it. This makes state accessible out of band, i.e. you can attach to tmux sessions created by lp. This way you can, in long lasting, complex command flows (e.g. creating clusters in the cloud) fix failing commands manually until they run, add the fix to the failing last block and continue with the next. Sessions are not automatically destroyed, except you instruct lp to do so. Mechanics \u00a4 We send the statements to evaluate over to tmux as a byte stream, using it's send-keys feature. We capture the output of tmux via it's tmux capture-pane feature within a loop, until the expected output is seen or the timeout is reached Example \u00a4 LP Source: ``` bash lp:bash session = docs addsrc ls -lta /etc/systemd ``` Result: Cmd Output $ ls -lta /etc/systemd $ ls -lta /etc/systemd total 64 drwxr-xr-x 139 root root 12288 Apr 7 10:17 .. drwxr-xr-x 22 root root 4096 Apr 7 10:17 system -rw-r--r-- 1 root root 1815 Apr 5 20:22 system.conf drwxr-xr-x 3 root root 4096 Apr 4 21:40 user drwxr-xr-x 5 root root 4096 Apr 4 21:39 . -rw-r--r-- 1 root root 642 Jan 10 04:56 resolved.conf -rw-r--r-- 1 root root 1042 Apr 22 2020 journald.conf -rw-r--r-- 1 root root 1042 Apr 22 2020 logind.conf drwxr-xr-x 2 root root 4096 Apr 22 2020 network -rw-r--r-- 1 root root 604 Apr 22 2020 timesyncd.conf -rw-r--r-- 1 root root 1185 Apr 22 2020 user.conf -rw-r--r-- 1 root root 584 Apr 1 2020 networkd.conf -rw-r--r-- 1 root root 529 Apr 1 2020 pstore.conf -rw-r--r-- 1 root root 790 Apr 1 2020 sleep.conf Note that a --colors=always is not necessary here - the commands are run as if you would type them into a tmux window - in fact they are, using tmux send-keys . Terminal Output \u00a4 You should see output like this in the terminal, when building: If the icons are missing then you need a proper font. Tmux Base Index \u00a4 Reminder tmux: In order the mechanics to work we need to know the tmux window and pane base indexes of the window we are communicating with, i.e. the number of the first window created within a session. Problem : Default is 0. But users using tmux configure it normally to 1 (easier window switching via shortcuts). Since we do not want to fully control the life cycle of tmux sessions, i.e. allow the user to interact with it before, during and after our mkdocs sessions, it would be hard and prbly. not robust to always try find the base index currently in use - there are many things which can go wrong here. So we decided to either work out of the box, when base index is already at 1 (configured by the user) OR configure the base index automatically, when there is NOT yet a ~/.tmux.conf on the system fail when base index is configured to be 0 Warning The second option involves a creation of ~/.tmux.conf (which you can naturally modify to your liking, except setting the base index to a different value than 1). Tip If you absolutely need to have 0 for you normal tmux work: Provide for mkdocs a tmux script, pointing to another config file in the make file or the environment ($PATH). Code def configure_tmux_base_index_1 ( session_name ): \"\"\" Seems everybody really using it has 1 (on normal keyboards 0 is far away) and its a hard to detect or change, especially when the messed with it outside of our control. On clean systems it will be just missing or: the user / runner does not care. => Lets create it - when it is NOT present, so that we can have automatic CI/CD. While for a normal user (who is using it) we fail if not configured correctly. \"\"\" fn = env . get ( 'HOME' , '' ) + '/.tmux.conf' if exists ( fn ): return lp . app . warning ( '!!! Writing %s to set base index to 1 !!' % fn ) r = [ 'set-option -g base-index 1' , 'set-window-option -g pane-base-index 1' , '' , ] write_file ( fn , ' \\n ' . join ( r )) lp . sprun ( 'tmux source-file \" %s \"' % fn ) wait ( 0.5 ) tmux_kill_session ( session_name ) wait ( 0.5 ) tmux_start ( session_name ) wait ( 0.5 ) https://github.com/axiros/docutools/blob/master/src/lcdoc/lp_session.py#L76 typeof start_lc === \"undefined\" ? 0 : start_lc()","title":"Tmux Sessions"},{"location":"features/lp/bash/sessions/#shell-sessions-tmux","text":"Sessions are a required, when you document (or func test) longer command flows, with shared internal or external (e.g. filesystem) state. We do not keep internal state within the docu building process but rely on tmux to keep it. This makes state accessible out of band, i.e. you can attach to tmux sessions created by lp. This way you can, in long lasting, complex command flows (e.g. creating clusters in the cloud) fix failing commands manually until they run, add the fix to the failing last block and continue with the next. Sessions are not automatically destroyed, except you instruct lp to do so.","title":"Shell Sessions / Tmux"},{"location":"features/lp/bash/sessions/#mechanics","text":"We send the statements to evaluate over to tmux as a byte stream, using it's send-keys feature. We capture the output of tmux via it's tmux capture-pane feature within a loop, until the expected output is seen or the timeout is reached","title":"Mechanics"},{"location":"features/lp/bash/sessions/#example","text":"LP Source: ``` bash lp:bash session = docs addsrc ls -lta /etc/systemd ``` Result: Cmd Output $ ls -lta /etc/systemd $ ls -lta /etc/systemd total 64 drwxr-xr-x 139 root root 12288 Apr 7 10:17 .. drwxr-xr-x 22 root root 4096 Apr 7 10:17 system -rw-r--r-- 1 root root 1815 Apr 5 20:22 system.conf drwxr-xr-x 3 root root 4096 Apr 4 21:40 user drwxr-xr-x 5 root root 4096 Apr 4 21:39 . -rw-r--r-- 1 root root 642 Jan 10 04:56 resolved.conf -rw-r--r-- 1 root root 1042 Apr 22 2020 journald.conf -rw-r--r-- 1 root root 1042 Apr 22 2020 logind.conf drwxr-xr-x 2 root root 4096 Apr 22 2020 network -rw-r--r-- 1 root root 604 Apr 22 2020 timesyncd.conf -rw-r--r-- 1 root root 1185 Apr 22 2020 user.conf -rw-r--r-- 1 root root 584 Apr 1 2020 networkd.conf -rw-r--r-- 1 root root 529 Apr 1 2020 pstore.conf -rw-r--r-- 1 root root 790 Apr 1 2020 sleep.conf Note that a --colors=always is not necessary here - the commands are run as if you would type them into a tmux window - in fact they are, using tmux send-keys .","title":"Example"},{"location":"features/lp/bash/sessions/#terminal-output","text":"You should see output like this in the terminal, when building: If the icons are missing then you need a proper font.","title":"Terminal Output"},{"location":"features/lp/bash/sessions/#tmux-base-index","text":"Reminder tmux: In order the mechanics to work we need to know the tmux window and pane base indexes of the window we are communicating with, i.e. the number of the first window created within a session. Problem : Default is 0. But users using tmux configure it normally to 1 (easier window switching via shortcuts). Since we do not want to fully control the life cycle of tmux sessions, i.e. allow the user to interact with it before, during and after our mkdocs sessions, it would be hard and prbly. not robust to always try find the base index currently in use - there are many things which can go wrong here. So we decided to either work out of the box, when base index is already at 1 (configured by the user) OR configure the base index automatically, when there is NOT yet a ~/.tmux.conf on the system fail when base index is configured to be 0 Warning The second option involves a creation of ~/.tmux.conf (which you can naturally modify to your liking, except setting the base index to a different value than 1). Tip If you absolutely need to have 0 for you normal tmux work: Provide for mkdocs a tmux script, pointing to another config file in the make file or the environment ($PATH). Code def configure_tmux_base_index_1 ( session_name ): \"\"\" Seems everybody really using it has 1 (on normal keyboards 0 is far away) and its a hard to detect or change, especially when the messed with it outside of our control. On clean systems it will be just missing or: the user / runner does not care. => Lets create it - when it is NOT present, so that we can have automatic CI/CD. While for a normal user (who is using it) we fail if not configured correctly. \"\"\" fn = env . get ( 'HOME' , '' ) + '/.tmux.conf' if exists ( fn ): return lp . app . warning ( '!!! Writing %s to set base index to 1 !!' % fn ) r = [ 'set-option -g base-index 1' , 'set-window-option -g pane-base-index 1' , '' , ] write_file ( fn , ' \\n ' . join ( r )) lp . sprun ( 'tmux source-file \" %s \"' % fn ) wait ( 0.5 ) tmux_kill_session ( session_name ) wait ( 0.5 ) tmux_start ( session_name ) wait ( 0.5 ) https://github.com/axiros/docutools/blob/master/src/lcdoc/lp_session.py#L76 typeof start_lc === \"undefined\" ? 0 : start_lc()","title":"Tmux Base Index"},{"location":"features/lp/plugs/_index/","text":"@media only screen and (min-width: 76.25em) { .md-main__inner { max-width: none; } .md-sidebar--primary { left: 0; } .md-sidebar--secondary { right: 0; margin-left: 0; -webkit-transform: none; transform: none; } } Literate Programming (LP) Plugins \u00a4 Plugin List show_src : Copies delimitted stanzas within arbitrary files (usually source code) into your docs. column : Applies an n-column layout using flex box. mermaid : Support for mermaid.js graphs. chartist : Creates chartist.js graphs. lightbox : Wraps content into featherlight lightboxes. kroki : Support for kroki diagrams. make_file : Creates a file and displays it as if we used cat on it. drawio : Whenever a given .drawio file changes, we trigger an export to svg, so that your documentation updates. flowchart : Enables flowchart.js make_badges : Creates badges. Optionally writes the README.md markmap : Support for markmap.js style mindmaps. show_file : Cats a file. chart : Enables Chart.js typeof start_lc === \"undefined\" ? 0 : start_lc()","title":"Overview"},{"location":"features/lp/plugs/_index/#literate-programming-lp-plugins","text":"Plugin List show_src : Copies delimitted stanzas within arbitrary files (usually source code) into your docs. column : Applies an n-column layout using flex box. mermaid : Support for mermaid.js graphs. chartist : Creates chartist.js graphs. lightbox : Wraps content into featherlight lightboxes. kroki : Support for kroki diagrams. make_file : Creates a file and displays it as if we used cat on it. drawio : Whenever a given .drawio file changes, we trigger an export to svg, so that your documentation updates. flowchart : Enables flowchart.js make_badges : Creates badges. Optionally writes the README.md markmap : Support for markmap.js style mindmaps. show_file : Cats a file. chart : Enables Chart.js typeof start_lc === \"undefined\" ? 0 : start_lc()","title":"Literate Programming (LP) Plugins"},{"location":"features/lp/plugs/_tech/","text":"@media only screen and (min-width: 76.25em) { .md-main__inner { max-width: none; } .md-sidebar--primary { left: 0; } .md-sidebar--secondary { right: 0; margin-left: 0; -webkit-transform: none; transform: none; } } LP Plugins Mechanics \u00a4 Guide to creating custom plugins. There is a very simple plugin machinery, based on the \" mode \" header parameter. Default for mode is simply \"bash\", meaning all your evaluation is handled by the bash.py plugin. See here for available parameters of the default mode. Important Plugins are lazy loaded, i.e. only on first use, within a docs build session. Creating your own plugins \u00a4 Before we look into the directory above, we try import any plugin directly, the first time we need it. Therefore, by supplying a $PYTHONPATH , pointing to a plugin directory of your own, you can have your own plugins supported (or overwrite the default ones). docs folder required The docs are linked over to the docset at lp/plugs and inserted into nav via the find-pages plugin. Interface \u00a4 The plugins need to supply a run(cmd, kw) method. In kw you get any available contextual information, incl. the mkdocs config, via the LP class. You may also declare run=\"cmd\" , which will put the full lp block body as a result - as is. You have to return a string (which would be the cached raw result) or a dict with res and optionally a formatted key. a nocache=<bool> key a page_assets key header , footer , md (see below, page assets) The formatted value has to contain directly the markdown to be displayed, exclusive indentation. If simply True then the res value is taken. The page_assets value has to contain plain markdown (or javascript, html, css) added unindented once at the end of a page. You may provide formatted and nocache also on module level Also you may declare a page_assets dict on module level, with understood keys: md : markdown source added to markdown of page, will go into to-html rendering header : html (e.g. scripts) added at start of container element, added after rendering footer : html added at end of container element, added after rendering See the chartist plugin for an example. Note: https://github.com/squidfunk/mkdocs-material/issues/2338 only inside The full res will be the (cached) raw result, incl both optional keys. Adding Page Assets \u00a4 Some LP plugins, e.g. mermaid or chartist require additional javascript or CSS to be included into the page. They can declare or imperatively add such add ons for either header footer md There are assets which are required once and others which you require per block. mkdocs material's nav.instant Note that instant loading will, at page navigation events, ( only ) (re-)evaluate all script tags that are part of the container component . Means: Manually adding assets after the content, e.g. via assets won't work. This is why LP assets mechnics add the scripts and css within the container component. Here is how we do it: Normal way to achieve this (example, declare on module level): Code page_assets = { 'header' : [ '//cdn.jsdelivr.net/chartist.js/latest/chartist.min.css' , '//cdn.jsdelivr.net/chartist.js/latest/chartist.min.js' , ] } https://github.com/axiros/docutools/blob/master/src/lcdoc/mkdocs/lp/plugs/chartist/__init__.py#L2 This will register the assets by key plugin name (=mode) . If the run method's response includes any of header , footer , md , that asset will be registered by id of the block, i.e. rendered into the final html, guaranteed: def run ( cmd , kw ): ... return { 'res' : < just a raw result , not rendered , since formatted is given . could be empty > , 'formatted' : < what will be within the block , indented > , 'footer' : < block specific js > } } Alternatively you may return True for formatted , then we treat res like it: def run ( cmd , kw ): ... return { 'formatted' : True , 'res' : < what will be within the block , indented > , 'footer' : < block specific js > } } Multi Purpose Assets \u00a4 Sometimes more than one plugin require sth like jquery. You can declare those by their own namespace, using the mode key as in: page_assets = { 'mode' : 'jquery' , # or ['jquery', ...] 'footer' : { 'script' : '//cdn.jsdelivr.net/npm/featherlight@1.7.14/release/featherlight.min.js' , 'css' : '//cdn.jsdelivr.net/npm/featherlight@1.7.14/release/featherlight.min.css' , where the string 'jquery' is a known asset: Code h = 'header' known_assets = { 'd3' : { h : '//unpkg.com/d3@6/dist/d3.min.js' }, 'jquery' : { h : '//code.jquery.com/jquery-latest.js' }, 'jquery_datatables' : { h : [ '//cdn.datatables.net/1.11.2/js/jquery.dataTables.min.js' , #'//cdn.datatables.net/1.11.2/css/jquery.dataTables.min.css', ] }, 'raphael' : { h : '//cdnjs.cloudflare.com/ajax/libs/raphael/2.3.0/raphael.min.js' }, } https://github.com/axiros/docutools/blob/master/src/lcdoc/mkdocs/lp/__init__.py#L46 If your multipurpose asset is now known, than declare the full dict under the mode key. typeof start_lc === \"undefined\" ? 0 : start_lc()","title":"Mechanics"},{"location":"features/lp/plugs/_tech/#lp-plugins-mechanics","text":"Guide to creating custom plugins. There is a very simple plugin machinery, based on the \" mode \" header parameter. Default for mode is simply \"bash\", meaning all your evaluation is handled by the bash.py plugin. See here for available parameters of the default mode. Important Plugins are lazy loaded, i.e. only on first use, within a docs build session.","title":"LP Plugins Mechanics"},{"location":"features/lp/plugs/_tech/#creating-your-own-plugins","text":"Before we look into the directory above, we try import any plugin directly, the first time we need it. Therefore, by supplying a $PYTHONPATH , pointing to a plugin directory of your own, you can have your own plugins supported (or overwrite the default ones). docs folder required The docs are linked over to the docset at lp/plugs and inserted into nav via the find-pages plugin.","title":"Creating your own plugins"},{"location":"features/lp/plugs/_tech/#interface","text":"The plugins need to supply a run(cmd, kw) method. In kw you get any available contextual information, incl. the mkdocs config, via the LP class. You may also declare run=\"cmd\" , which will put the full lp block body as a result - as is. You have to return a string (which would be the cached raw result) or a dict with res and optionally a formatted key. a nocache=<bool> key a page_assets key header , footer , md (see below, page assets) The formatted value has to contain directly the markdown to be displayed, exclusive indentation. If simply True then the res value is taken. The page_assets value has to contain plain markdown (or javascript, html, css) added unindented once at the end of a page. You may provide formatted and nocache also on module level Also you may declare a page_assets dict on module level, with understood keys: md : markdown source added to markdown of page, will go into to-html rendering header : html (e.g. scripts) added at start of container element, added after rendering footer : html added at end of container element, added after rendering See the chartist plugin for an example. Note: https://github.com/squidfunk/mkdocs-material/issues/2338 only inside The full res will be the (cached) raw result, incl both optional keys.","title":"Interface"},{"location":"features/lp/plugs/_tech/#adding-page-assets","text":"Some LP plugins, e.g. mermaid or chartist require additional javascript or CSS to be included into the page. They can declare or imperatively add such add ons for either header footer md There are assets which are required once and others which you require per block. mkdocs material's nav.instant Note that instant loading will, at page navigation events, ( only ) (re-)evaluate all script tags that are part of the container component . Means: Manually adding assets after the content, e.g. via assets won't work. This is why LP assets mechnics add the scripts and css within the container component. Here is how we do it: Normal way to achieve this (example, declare on module level): Code page_assets = { 'header' : [ '//cdn.jsdelivr.net/chartist.js/latest/chartist.min.css' , '//cdn.jsdelivr.net/chartist.js/latest/chartist.min.js' , ] } https://github.com/axiros/docutools/blob/master/src/lcdoc/mkdocs/lp/plugs/chartist/__init__.py#L2 This will register the assets by key plugin name (=mode) . If the run method's response includes any of header , footer , md , that asset will be registered by id of the block, i.e. rendered into the final html, guaranteed: def run ( cmd , kw ): ... return { 'res' : < just a raw result , not rendered , since formatted is given . could be empty > , 'formatted' : < what will be within the block , indented > , 'footer' : < block specific js > } } Alternatively you may return True for formatted , then we treat res like it: def run ( cmd , kw ): ... return { 'formatted' : True , 'res' : < what will be within the block , indented > , 'footer' : < block specific js > } }","title":"Adding Page Assets"},{"location":"features/lp/plugs/_tech/#multi-purpose-assets","text":"Sometimes more than one plugin require sth like jquery. You can declare those by their own namespace, using the mode key as in: page_assets = { 'mode' : 'jquery' , # or ['jquery', ...] 'footer' : { 'script' : '//cdn.jsdelivr.net/npm/featherlight@1.7.14/release/featherlight.min.js' , 'css' : '//cdn.jsdelivr.net/npm/featherlight@1.7.14/release/featherlight.min.css' , where the string 'jquery' is a known asset: Code h = 'header' known_assets = { 'd3' : { h : '//unpkg.com/d3@6/dist/d3.min.js' }, 'jquery' : { h : '//code.jquery.com/jquery-latest.js' }, 'jquery_datatables' : { h : [ '//cdn.datatables.net/1.11.2/js/jquery.dataTables.min.js' , #'//cdn.datatables.net/1.11.2/css/jquery.dataTables.min.css', ] }, 'raphael' : { h : '//cdnjs.cloudflare.com/ajax/libs/raphael/2.3.0/raphael.min.js' }, } https://github.com/axiros/docutools/blob/master/src/lcdoc/mkdocs/lp/__init__.py#L46 If your multipurpose asset is now known, than declare the full dict under the mode key. typeof start_lc === \"undefined\" ? 0 : start_lc()","title":"Multi Purpose Assets"},{"location":"features/lp/plugs/chart/","text":"@media only screen and (min-width: 76.25em) { .md-main__inner { max-width: none; } .md-sidebar--primary { left: 0; } .md-sidebar--secondary { right: 0; margin-left: 0; -webkit-transform: none; transform: none; } } chart \u00a4 Enables Chart.js Syntax \u00a4 Example 1 Source ```javascript lp:chart addsrc=\"Example 1\" labels = [ 'January', 'February', 'March', 'April', 'May', 'June', ]; data = { labels: labels, datasets: [{ label: 'My First dataset', backgroundColor: 'rgb(255, 99, 132)', borderColor: 'rgb(255, 99, 132)', data: [0, 10, 5, 2, 20, 30, 45], }] }; config = { type: 'line', data: data, options: {} }; ``` Using python: Example 2 Source ``` python lp : python | chart addsrc = \"Example 2\" import datetime labels = [ datetime . date ( 1900 , m + 1 , 1 ) . strftime ( '%B' ) for m in range ( 7 )] data = { 'labels' : labels , 'datasets' : [{ 'label' : 'My First Python Dataset' , 'backgroundColor' : '#8bd125' , 'borderColor' : '#8bd125' , 'data' : [ 0 , 10 , 5 , 2 , 20 , 30 , 45 ], }] } result = { 'type' : 'line' , 'data' : data , 'options' : {} } ``` Restrictions in Python Example 2 is a simply delivering the stringified result as config dict into javascript. Means, you have no dynamic possibilities, using javascript functions. labels = [ 'January', 'February', 'March', 'April', 'May', 'June', ]; data = { labels: labels, datasets: [{ label: 'My First dataset', backgroundColor: 'rgb(255, 99, 132)', borderColor: 'rgb(255, 99, 132)', data: [0, 10, 5, 2, 20, 30, 45], }] }; config = { type: 'line', data: data, options: {} }; var myChart = new Chart( document.getElementById('chart_4ab9fe4722ed04fba5717a47f7509279'), config ); var config = {'type': 'line', 'data': {'labels': ['January', 'February', 'March', 'April', 'May', 'June', 'July'], 'datasets': [{'label': 'My First Python Dataset', 'backgroundColor': '#8bd125', 'borderColor': '#8bd125', 'data': [0, 10, 5, 2, 20, 30, 45]}]}, 'options': {}}; var myChart = new Chart( document.getElementById('python_b584a2dad6a1b8d4f701ccde290f24bc'), config ); typeof start_lc === \"undefined\" ? 0 : start_lc()","title":"chart"},{"location":"features/lp/plugs/chart/#chart","text":"Enables Chart.js","title":"chart "},{"location":"features/lp/plugs/chart/#syntax","text":"Example 1 Source ```javascript lp:chart addsrc=\"Example 1\" labels = [ 'January', 'February', 'March', 'April', 'May', 'June', ]; data = { labels: labels, datasets: [{ label: 'My First dataset', backgroundColor: 'rgb(255, 99, 132)', borderColor: 'rgb(255, 99, 132)', data: [0, 10, 5, 2, 20, 30, 45], }] }; config = { type: 'line', data: data, options: {} }; ``` Using python: Example 2 Source ``` python lp : python | chart addsrc = \"Example 2\" import datetime labels = [ datetime . date ( 1900 , m + 1 , 1 ) . strftime ( '%B' ) for m in range ( 7 )] data = { 'labels' : labels , 'datasets' : [{ 'label' : 'My First Python Dataset' , 'backgroundColor' : '#8bd125' , 'borderColor' : '#8bd125' , 'data' : [ 0 , 10 , 5 , 2 , 20 , 30 , 45 ], }] } result = { 'type' : 'line' , 'data' : data , 'options' : {} } ``` Restrictions in Python Example 2 is a simply delivering the stringified result as config dict into javascript. Means, you have no dynamic possibilities, using javascript functions. labels = [ 'January', 'February', 'March', 'April', 'May', 'June', ]; data = { labels: labels, datasets: [{ label: 'My First dataset', backgroundColor: 'rgb(255, 99, 132)', borderColor: 'rgb(255, 99, 132)', data: [0, 10, 5, 2, 20, 30, 45], }] }; config = { type: 'line', data: data, options: {} }; var myChart = new Chart( document.getElementById('chart_4ab9fe4722ed04fba5717a47f7509279'), config ); var config = {'type': 'line', 'data': {'labels': ['January', 'February', 'March', 'April', 'May', 'June', 'July'], 'datasets': [{'label': 'My First Python Dataset', 'backgroundColor': '#8bd125', 'borderColor': '#8bd125', 'data': [0, 10, 5, 2, 20, 30, 45]}]}, 'options': {}}; var myChart = new Chart( document.getElementById('python_b584a2dad6a1b8d4f701ccde290f24bc'), config ); typeof start_lc === \"undefined\" ? 0 : start_lc()","title":"Syntax"},{"location":"features/lp/plugs/chartist/","text":"[data-md-color-scheme=\"slate\"] .featherlight .featherlight-content { background: #2e303e; } [data-md-color-scheme=\"slate\"] .featherlight .featherlight-close-icon { background: rgba(255,255,255,.3); color: #fff; } .featherlight .featherlight-content { min-width: 60% !important; } function next_elmt_into_lightbox(id, event) { let btn=document.getElementById(id); let parent = btn.parentNode; function flclose(event) { let c = this.$content[0]; $(parent).after(c); } let el = parent.nextElementSibling; $.featherlight({jquery: el, persist: true, beforeClose: flclose}) } .button-lightbox { color: var(--md-default-fg-color--lighter); }.button-lightbox:hover { color: var(--md-default-fg-color--light); } @media only screen and (min-width: 76.25em) { .md-main__inner { max-width: none; } .md-sidebar--primary { left: 0; } .md-sidebar--secondary { right: 0; margin-left: 0; -webkit-transform: none; transform: none; } } chartist \u00a4 Creates chartist.js graphs. You may use declarative python (use keyword python as param before \"lp\"): Python Format LP Source: ``` python lp mode = chartist addsrc eval = always import string labels = [ i for i in string . ascii_letters [: 4 ]] data = { 'labels' : labels , 'series' : [ [ 2 , 4 , 2 , 5 ] ] } #options = {'width': 600, 'height': 200} type = 'Line' ``` Result: Javascript Format LP Source: ```javascript lp mode=chartist addsrc aspect=4:5 eval=always var data = { // A labels array that can contain any sort of values labels: ['Mon', 'Tue', 'Wed', 'Thu', 'Fri'], // Our series array that contains series objects or in this case series data arrays series: [ [5, 2, 4, 2, 5] ] }; // \"_id_\" will be replaced with unique dynamic one: new Chartist.Line('_id_', data, options={width: 400, height: 200}); ``` Result: function do_chartist_a55c391e925b99101c9bfa9491d95999 () { var data = {'labels': ['a', 'b', 'c', 'd'], 'series': [[2, 4, 2, 5]]}; var options = {}; new Chartist.Line('#chartist_a55c391e925b99101c9bfa9491d95999', data, options); }; do_chartist_a55c391e925b99101c9bfa9491d95999(); function do_chartist_e0df758d8cb308691ed1e4bdd104b39a () { var data = { // A labels array that can contain any sort of values labels: ['Mon', 'Tue', 'Wed', 'Thu', 'Fri'], // Our series array that contains series objects or in this case series data arrays series: [ [5, 2, 4, 2, 5] ] }; // \"#chartist_e0df758d8cb308691ed1e4bdd104b39a\" will be replaced with unique dynamic one: new Chartist.Line('#chartist_e0df758d8cb308691ed1e4bdd104b39a', data, options={width: 400, height: 200}); }; do_chartist_e0df758d8cb308691ed1e4bdd104b39a(); $('.md-content img').featherlightGallery({ nextIcon: '\u00bb', previousIcon: '\u00ab', openSpeed: 300, galleryFadeIn: 300, targetAttr: 'src' }); $('.md-content img').css('cursor', 'zoom-in'); typeof start_lc === \"undefined\" ? 0 : start_lc()","title":"chartist"},{"location":"features/lp/plugs/chartist/#chartist","text":"Creates chartist.js graphs. You may use declarative python (use keyword python as param before \"lp\"): Python Format LP Source: ``` python lp mode = chartist addsrc eval = always import string labels = [ i for i in string . ascii_letters [: 4 ]] data = { 'labels' : labels , 'series' : [ [ 2 , 4 , 2 , 5 ] ] } #options = {'width': 600, 'height': 200} type = 'Line' ``` Result: Javascript Format LP Source: ```javascript lp mode=chartist addsrc aspect=4:5 eval=always var data = { // A labels array that can contain any sort of values labels: ['Mon', 'Tue', 'Wed', 'Thu', 'Fri'], // Our series array that contains series objects or in this case series data arrays series: [ [5, 2, 4, 2, 5] ] }; // \"_id_\" will be replaced with unique dynamic one: new Chartist.Line('_id_', data, options={width: 400, height: 200}); ``` Result: function do_chartist_a55c391e925b99101c9bfa9491d95999 () { var data = {'labels': ['a', 'b', 'c', 'd'], 'series': [[2, 4, 2, 5]]}; var options = {}; new Chartist.Line('#chartist_a55c391e925b99101c9bfa9491d95999', data, options); }; do_chartist_a55c391e925b99101c9bfa9491d95999(); function do_chartist_e0df758d8cb308691ed1e4bdd104b39a () { var data = { // A labels array that can contain any sort of values labels: ['Mon', 'Tue', 'Wed', 'Thu', 'Fri'], // Our series array that contains series objects or in this case series data arrays series: [ [5, 2, 4, 2, 5] ] }; // \"#chartist_e0df758d8cb308691ed1e4bdd104b39a\" will be replaced with unique dynamic one: new Chartist.Line('#chartist_e0df758d8cb308691ed1e4bdd104b39a', data, options={width: 400, height: 200}); }; do_chartist_e0df758d8cb308691ed1e4bdd104b39a(); $('.md-content img').featherlightGallery({ nextIcon: '\u00bb', previousIcon: '\u00ab', openSpeed: 300, galleryFadeIn: 300, targetAttr: 'src' }); $('.md-content img').css('cursor', 'zoom-in'); typeof start_lc === \"undefined\" ? 0 : start_lc()","title":"chartist "},{"location":"features/lp/plugs/column/","text":"@media only screen and (min-width: 76.25em) { .md-main__inner { max-width: none; } .md-sidebar--primary { left: 0; } .md-sidebar--secondary { right: 0; margin-left: 0; -webkit-transform: none; transform: none; } } columns \u00a4 Applies an n-column layout using flex box. Default Parameters: Code lp_column_dflts = { 'max_width' : '1000px' , # max width per column - determines the min total width 'padding' : '0' , 'margin' : '2%' , 'custom_style' : False , # when set we do NOT include our Column Style, user must. } ColumnStyle = ''' @media screen and (min-width: %(min_total_width)s ) { .md-grid { max-width: initial;} .lp-row { display: flex; } .lp-column { padding: %(padding)s ; margin-left: %(margin)s ; margin-right: %(margin)s ; flex: %(flex)s%% ; max-width: %(max_width)s ; } } ''' https://github.com/axiros/docutools/blob/master/src/lcdoc/mkdocs/lp/plugs/column/__init__.py#L16 Mechanics \u00a4 We format the html content like so Before \u00a4 mdblock1 `lp:columns <params>` mdblock2 `lp:columns <params>` mdblock3 After \u00a4 < div class = \"lp-row\" > < div class = \"lp-column\" > html1 (rendered mdblock1) </ div > < div class = \"lp-column\" > html2 </ div > < div class = \"lp-column\" > html3 </ div > </ div > < style > User or default ( flexbox ) style base on above css classes . </ style > Example \u00a4 typeof start_lc === \"undefined\" ? 0 : start_lc()","title":"column"},{"location":"features/lp/plugs/column/#columns","text":"Applies an n-column layout using flex box. Default Parameters: Code lp_column_dflts = { 'max_width' : '1000px' , # max width per column - determines the min total width 'padding' : '0' , 'margin' : '2%' , 'custom_style' : False , # when set we do NOT include our Column Style, user must. } ColumnStyle = ''' @media screen and (min-width: %(min_total_width)s ) { .md-grid { max-width: initial;} .lp-row { display: flex; } .lp-column { padding: %(padding)s ; margin-left: %(margin)s ; margin-right: %(margin)s ; flex: %(flex)s%% ; max-width: %(max_width)s ; } } ''' https://github.com/axiros/docutools/blob/master/src/lcdoc/mkdocs/lp/plugs/column/__init__.py#L16","title":"columns "},{"location":"features/lp/plugs/column/#mechanics","text":"We format the html content like so","title":"Mechanics"},{"location":"features/lp/plugs/column/#before","text":"mdblock1 `lp:columns <params>` mdblock2 `lp:columns <params>` mdblock3","title":"Before"},{"location":"features/lp/plugs/column/#after","text":"< div class = \"lp-row\" > < div class = \"lp-column\" > html1 (rendered mdblock1) </ div > < div class = \"lp-column\" > html2 </ div > < div class = \"lp-column\" > html3 </ div > </ div > < style > User or default ( flexbox ) style base on above css classes . </ style >","title":"After"},{"location":"features/lp/plugs/column/#example","text":"typeof start_lc === \"undefined\" ? 0 : start_lc()","title":"Example"},{"location":"features/lp/plugs/drawio/","text":"[data-md-color-scheme=\"slate\"] .featherlight .featherlight-content { background: #2e303e; } [data-md-color-scheme=\"slate\"] .featherlight .featherlight-close-icon { background: rgba(255,255,255,.3); color: #fff; } .featherlight .featherlight-content { min-width: 60% !important; } function next_elmt_into_lightbox(id, event) { let btn=document.getElementById(id); let parent = btn.parentNode; function flclose(event) { let c = this.$content[0]; $(parent).after(c); } let el = parent.nextElementSibling; $.featherlight({jquery: el, persist: true, beforeClose: flclose}) } .button-lightbox { color: var(--md-default-fg-color--lighter); }.button-lightbox:hover { color: var(--md-default-fg-color--light); } @media only screen and (min-width: 76.25em) { .md-main__inner { max-width: none; } .md-sidebar--primary { left: 0; } .md-sidebar--secondary { right: 0; margin-left: 0; -webkit-transform: none; transform: none; } } drawio \u00a4 Whenever a given .drawio file changes, we trigger an export to svg, so that your documentation updates. drawio is a convenient vector graphics tools, with an electron based desktop client . Example \u00a4 LP Source (shortform): `lp:drawio addsrc fn=img/example.svg eval=always src=example.drawio` Result: Requirements \u00a4 A drawio executable must be available in your $PATH . Alternatively you may specify $drawio as in: $ drawio=/opt/drawio/bin/drawio mkdocs serve Notes \u00a4 As you can see in the screencast the update is not particularly fast since the exporter has the start the app at every svg build. Linux Version: At time of writing the client (version 15.2.7) has a gtk problem due to electron incompatbility. This docs were based on the release 15.1.3, which was the last one without that problem. We expect a fix very soon. $('.md-content img').featherlightGallery({ nextIcon: '\u00bb', previousIcon: '\u00ab', openSpeed: 300, galleryFadeIn: 300, targetAttr: 'src' }); $('.md-content img').css('cursor', 'zoom-in'); typeof start_lc === \"undefined\" ? 0 : start_lc()","title":"drawio"},{"location":"features/lp/plugs/drawio/#drawio","text":"Whenever a given .drawio file changes, we trigger an export to svg, so that your documentation updates. drawio is a convenient vector graphics tools, with an electron based desktop client .","title":"drawio "},{"location":"features/lp/plugs/drawio/#example","text":"LP Source (shortform): `lp:drawio addsrc fn=img/example.svg eval=always src=example.drawio` Result:","title":"Example"},{"location":"features/lp/plugs/drawio/#requirements","text":"A drawio executable must be available in your $PATH . Alternatively you may specify $drawio as in: $ drawio=/opt/drawio/bin/drawio mkdocs serve","title":"Requirements"},{"location":"features/lp/plugs/drawio/#notes","text":"As you can see in the screencast the update is not particularly fast since the exporter has the start the app at every svg build. Linux Version: At time of writing the client (version 15.2.7) has a gtk problem due to electron incompatbility. This docs were based on the release 15.1.3, which was the last one without that problem. We expect a fix very soon. $('.md-content img').featherlightGallery({ nextIcon: '\u00bb', previousIcon: '\u00ab', openSpeed: 300, galleryFadeIn: 300, targetAttr: 'src' }); $('.md-content img').css('cursor', 'zoom-in'); typeof start_lc === \"undefined\" ? 0 : start_lc()","title":"Notes"},{"location":"features/lp/plugs/flowchart/","text":"@media only screen and (min-width: 76.25em) { .md-main__inner { max-width: none; } .md-sidebar--primary { left: 0; } .md-sidebar--secondary { right: 0; margin-left: 0; -webkit-transform: none; transform: none; } } flowchart \u00a4 Enables flowchart.js Syntax \u00a4 Example 1 Source ```js lp:flowchart addsrc=\"Example 1\" st=>start: Improve your l10n process! e=>end: Continue to have fun!:>https://youtu.be/YQryHo1iHb8[blank] op1=>operation: Go to locize.com:>https://locize.com[blank] sub1=>subroutine: Read the awesomeness cond(align-next=no)=>condition: Interested to getting started? io=>inputoutput: Register:>https://www.locize.app/register[blank] sub2=>subroutine: Read about improving your localization workflow or another source:>https://medium.com/@adrai/8-signs-you-should-improve-your-localization-process-3dc075d53998[blank] op2=>operation: Login:>https://www.locize.app/login[blank] cond2=>condition: valid password? cond3=>condition: reset password? op3=>operation: send email sub3=>subroutine: Create a demo project sub4=>subroutine: Start your real project io2=>inputoutput: Subscribe st->op1->sub1->cond cond(yes)->io->op2->cond2 cond2(no)->cond3 cond3(no,bottom)->op2 cond3(yes)->op3 op3(right)->op2 cond2(yes)->sub3 sub3->sub4->io2->e cond(no)->sub2(right)->op1 st@>op1({\"stroke\":\"Red\"})@>sub1({\"stroke\":\"Yellow\"})@>cond({\"stroke\":\"Red\"})@>io({\"stroke\":\"Red\"})@>op2({\"stroke\":\"Red\"})@>cond2({\"stroke\":\"Red\"})@>sub3({\"stroke\":\"Red\"})@>sub4({\"stroke\":\"Red\"})@>io2({\"stroke\":\"Red\"})@>e({\"stroke\":\"Red\",\"stroke-width\":6,\"arrow-end\":\"classic-wide-long\"}) ``` With Mode Piping \u00a4 We create a python session where we set opts: Define options once in python... Source A ton of options defined within session : myflowchart ``` python lp : python session = myflowchart addsrc = \"Define options once in python...\" opts = { 'x' : 0 , 'y' : 0 , 'line-width' : 3 , 'line-length' : 50 , 'text-margin' : 10 , 'font-size' : 14 , 'font-color' : 'black' , 'line-color' : 'black' , 'element-color' : 'black' , 'fill' : 'white' , 'yes-text' : 'yes' , 'no-text' : 'no' , 'arrow-end' : 'block' , 'scale' : 1 , # style symbol types 'symbols' : { 'start' : { 'font-color' : 'red' , 'element-color' : 'green' , 'fill' : 'yellow' }, 'end' :{ 'class' : 'end-element' } }, # even flowstate support ;-) 'flowstate' : { 'past' : { 'fill' : '#CCCCCC' , 'font-size' : 12 }, 'current' : { 'fill' : 'yellow' , 'font-color' : 'red' , 'font-weight' : 'bold' }, 'future' : { 'fill' : '#FFFF99' }, 'request' : { 'fill' : 'blue' }, 'invalid' : { 'fill' : '#444444' }, 'approved' : { 'fill' : '#58C4A3' , 'font-size' : 12 , 'yes-text' : 'APPROVED' , 'no-text' : 'n/a' }, 'rejected' : { 'fill' : '#C45879' , 'font-size' : 12 , 'yes-text' : 'n/a' , 'no-text' : 'REJECTED' } } } print ( 'A ton of options defined within session: %(session_name)s ' % ctx ) ``` We use the experimental 'mode piping' feature, forwarding the conventional \"result\" into the next plugin, flowchart: ..then re-use later with piping Source ``` python lp : python | flowchart session = myflowchart addsrc = \"..then re-use later with piping\" code = ''' st=>start: Start|past:>http://www.google.com[blank] e=>end: Ende|future:>http://www.google.com op1=>operation: My Operation|past op2=>operation: Stuff|current sub1=>subroutine: My Subroutine|invalid cond=>condition: Yes or No?|approved:>http://www.google.com c2=>condition: Good idea|rejected io=>inputoutput: catch something...|future st->op1(right)->cond cond(yes, right)->c2 cond(no)->sub1(left)->op1 c2(yes)->io->e c2(no)->op2->e ''' result = dict ( opts = opts , code = code ) ``` var code = 'st=>start: Improve your l10n process!\\n' + 'e=>end: Continue to have fun!:>https://youtu.be/YQryHo1iHb8[blank]\\n' + 'op1=>operation: Go to locize.com:>https://locize.com[blank]\\n' + 'sub1=>subroutine: Read the awesomeness\\n' + 'cond(align-next=no)=>condition: Interested to getting started?\\n' + 'io=>inputoutput: Register:>https://www.locize.app/register[blank]\\n' + 'sub2=>subroutine: Read about improving your localization workflow or another source:>https://medium.com/@adrai/8-signs-you-should-improve-your-localization-process-3dc075d53998[blank]\\n' + 'op2=>operation: Login:>https://www.locize.app/login[blank]\\n' + 'cond2=>condition: valid password?\\n' + 'cond3=>condition: reset password?\\n' + 'op3=>operation: send email\\n' + 'sub3=>subroutine: Create a demo project\\n' + 'sub4=>subroutine: Start your real project\\n' + 'io2=>inputoutput: Subscribe\\n' + '\\n' + 'st->op1->sub1->cond\\n' + 'cond(yes)->io->op2->cond2\\n' + 'cond2(no)->cond3\\n' + 'cond3(no,bottom)->op2\\n' + 'cond3(yes)->op3\\n' + 'op3(right)->op2\\n' + 'cond2(yes)->sub3\\n' + 'sub3->sub4->io2->e\\n' + 'cond(no)->sub2(right)->op1\\n' + '\\n' + 'st@>op1({\"stroke\":\"Red\"})@>sub1({\"stroke\":\"Yellow\"})@>cond({\"stroke\":\"Red\"})@>io({\"stroke\":\"Red\"})@>op2({\"stroke\":\"Red\"})@>cond2({\"stroke\":\"Red\"})@>sub3({\"stroke\":\"Red\"})@>sub4({\"stroke\":\"Red\"})@>io2({\"stroke\":\"Red\"})@>e({\"stroke\":\"Red\",\"stroke-width\":6,\"arrow-end\":\"classic-wide-long\"})'; var diag = flowchart.parse(code); diag.drawSVG('flowchart_f9f2ef6e73f132dac4a6296b7a903425', {}); var code = '\\n' + 'st=>start: Start|past:>http://www.google.com[blank]\\n' + 'e=>end: Ende|future:>http://www.google.com\\n' + 'op1=>operation: My Operation|past\\n' + 'op2=>operation: Stuff|current\\n' + 'sub1=>subroutine: My Subroutine|invalid\\n' + 'cond=>condition: Yes \\n' + 'or No?|approved:>http://www.google.com\\n' + 'c2=>condition: Good idea|rejected\\n' + 'io=>inputoutput: catch something...|future\\n' + '\\n' + 'st->op1(right)->cond\\n' + 'cond(yes, right)->c2\\n' + 'cond(no)->sub1(left)->op1\\n' + 'c2(yes)->io->e\\n' + 'c2(no)->op2->e'; var diag = flowchart.parse(code); diag.drawSVG('python_c60674fcb869b3d4482f2bc10676bd8f', {'x': 0, 'y': 0, 'line-width': 3, 'line-length': 50, 'text-margin': 10, 'font-size': 14, 'font-color': 'black', 'line-color': 'black', 'element-color': 'black', 'fill': 'white', 'yes-text': 'yes', 'no-text': 'no', 'arrow-end': 'block', 'scale': 1, 'symbols': {'start': {'font-color': 'red', 'element-color': 'green', 'fill': 'yellow'}, 'end': {'class': 'end-element'}}, 'flowstate': {'past': {'fill': '#CCCCCC', 'font-size': 12}, 'current': {'fill': 'yellow', 'font-color': 'red', 'font-weight': 'bold'}, 'future': {'fill': '#FFFF99'}, 'request': {'fill': 'blue'}, 'invalid': {'fill': '#444444'}, 'approved': {'fill': '#58C4A3', 'font-size': 12, 'yes-text': 'APPROVED', 'no-text': 'n/a'}, 'rejected': {'fill': '#C45879', 'font-size': 12, 'yes-text': 'n/a', 'no-text': 'REJECTED'}}}); typeof start_lc === \"undefined\" ? 0 : start_lc()","title":"flowchart"},{"location":"features/lp/plugs/flowchart/#flowchart","text":"Enables flowchart.js","title":"flowchart "},{"location":"features/lp/plugs/flowchart/#syntax","text":"Example 1 Source ```js lp:flowchart addsrc=\"Example 1\" st=>start: Improve your l10n process! e=>end: Continue to have fun!:>https://youtu.be/YQryHo1iHb8[blank] op1=>operation: Go to locize.com:>https://locize.com[blank] sub1=>subroutine: Read the awesomeness cond(align-next=no)=>condition: Interested to getting started? io=>inputoutput: Register:>https://www.locize.app/register[blank] sub2=>subroutine: Read about improving your localization workflow or another source:>https://medium.com/@adrai/8-signs-you-should-improve-your-localization-process-3dc075d53998[blank] op2=>operation: Login:>https://www.locize.app/login[blank] cond2=>condition: valid password? cond3=>condition: reset password? op3=>operation: send email sub3=>subroutine: Create a demo project sub4=>subroutine: Start your real project io2=>inputoutput: Subscribe st->op1->sub1->cond cond(yes)->io->op2->cond2 cond2(no)->cond3 cond3(no,bottom)->op2 cond3(yes)->op3 op3(right)->op2 cond2(yes)->sub3 sub3->sub4->io2->e cond(no)->sub2(right)->op1 st@>op1({\"stroke\":\"Red\"})@>sub1({\"stroke\":\"Yellow\"})@>cond({\"stroke\":\"Red\"})@>io({\"stroke\":\"Red\"})@>op2({\"stroke\":\"Red\"})@>cond2({\"stroke\":\"Red\"})@>sub3({\"stroke\":\"Red\"})@>sub4({\"stroke\":\"Red\"})@>io2({\"stroke\":\"Red\"})@>e({\"stroke\":\"Red\",\"stroke-width\":6,\"arrow-end\":\"classic-wide-long\"}) ```","title":"Syntax"},{"location":"features/lp/plugs/flowchart/#with-mode-piping","text":"We create a python session where we set opts: Define options once in python... Source A ton of options defined within session : myflowchart ``` python lp : python session = myflowchart addsrc = \"Define options once in python...\" opts = { 'x' : 0 , 'y' : 0 , 'line-width' : 3 , 'line-length' : 50 , 'text-margin' : 10 , 'font-size' : 14 , 'font-color' : 'black' , 'line-color' : 'black' , 'element-color' : 'black' , 'fill' : 'white' , 'yes-text' : 'yes' , 'no-text' : 'no' , 'arrow-end' : 'block' , 'scale' : 1 , # style symbol types 'symbols' : { 'start' : { 'font-color' : 'red' , 'element-color' : 'green' , 'fill' : 'yellow' }, 'end' :{ 'class' : 'end-element' } }, # even flowstate support ;-) 'flowstate' : { 'past' : { 'fill' : '#CCCCCC' , 'font-size' : 12 }, 'current' : { 'fill' : 'yellow' , 'font-color' : 'red' , 'font-weight' : 'bold' }, 'future' : { 'fill' : '#FFFF99' }, 'request' : { 'fill' : 'blue' }, 'invalid' : { 'fill' : '#444444' }, 'approved' : { 'fill' : '#58C4A3' , 'font-size' : 12 , 'yes-text' : 'APPROVED' , 'no-text' : 'n/a' }, 'rejected' : { 'fill' : '#C45879' , 'font-size' : 12 , 'yes-text' : 'n/a' , 'no-text' : 'REJECTED' } } } print ( 'A ton of options defined within session: %(session_name)s ' % ctx ) ``` We use the experimental 'mode piping' feature, forwarding the conventional \"result\" into the next plugin, flowchart: ..then re-use later with piping Source ``` python lp : python | flowchart session = myflowchart addsrc = \"..then re-use later with piping\" code = ''' st=>start: Start|past:>http://www.google.com[blank] e=>end: Ende|future:>http://www.google.com op1=>operation: My Operation|past op2=>operation: Stuff|current sub1=>subroutine: My Subroutine|invalid cond=>condition: Yes or No?|approved:>http://www.google.com c2=>condition: Good idea|rejected io=>inputoutput: catch something...|future st->op1(right)->cond cond(yes, right)->c2 cond(no)->sub1(left)->op1 c2(yes)->io->e c2(no)->op2->e ''' result = dict ( opts = opts , code = code ) ``` var code = 'st=>start: Improve your l10n process!\\n' + 'e=>end: Continue to have fun!:>https://youtu.be/YQryHo1iHb8[blank]\\n' + 'op1=>operation: Go to locize.com:>https://locize.com[blank]\\n' + 'sub1=>subroutine: Read the awesomeness\\n' + 'cond(align-next=no)=>condition: Interested to getting started?\\n' + 'io=>inputoutput: Register:>https://www.locize.app/register[blank]\\n' + 'sub2=>subroutine: Read about improving your localization workflow or another source:>https://medium.com/@adrai/8-signs-you-should-improve-your-localization-process-3dc075d53998[blank]\\n' + 'op2=>operation: Login:>https://www.locize.app/login[blank]\\n' + 'cond2=>condition: valid password?\\n' + 'cond3=>condition: reset password?\\n' + 'op3=>operation: send email\\n' + 'sub3=>subroutine: Create a demo project\\n' + 'sub4=>subroutine: Start your real project\\n' + 'io2=>inputoutput: Subscribe\\n' + '\\n' + 'st->op1->sub1->cond\\n' + 'cond(yes)->io->op2->cond2\\n' + 'cond2(no)->cond3\\n' + 'cond3(no,bottom)->op2\\n' + 'cond3(yes)->op3\\n' + 'op3(right)->op2\\n' + 'cond2(yes)->sub3\\n' + 'sub3->sub4->io2->e\\n' + 'cond(no)->sub2(right)->op1\\n' + '\\n' + 'st@>op1({\"stroke\":\"Red\"})@>sub1({\"stroke\":\"Yellow\"})@>cond({\"stroke\":\"Red\"})@>io({\"stroke\":\"Red\"})@>op2({\"stroke\":\"Red\"})@>cond2({\"stroke\":\"Red\"})@>sub3({\"stroke\":\"Red\"})@>sub4({\"stroke\":\"Red\"})@>io2({\"stroke\":\"Red\"})@>e({\"stroke\":\"Red\",\"stroke-width\":6,\"arrow-end\":\"classic-wide-long\"})'; var diag = flowchart.parse(code); diag.drawSVG('flowchart_f9f2ef6e73f132dac4a6296b7a903425', {}); var code = '\\n' + 'st=>start: Start|past:>http://www.google.com[blank]\\n' + 'e=>end: Ende|future:>http://www.google.com\\n' + 'op1=>operation: My Operation|past\\n' + 'op2=>operation: Stuff|current\\n' + 'sub1=>subroutine: My Subroutine|invalid\\n' + 'cond=>condition: Yes \\n' + 'or No?|approved:>http://www.google.com\\n' + 'c2=>condition: Good idea|rejected\\n' + 'io=>inputoutput: catch something...|future\\n' + '\\n' + 'st->op1(right)->cond\\n' + 'cond(yes, right)->c2\\n' + 'cond(no)->sub1(left)->op1\\n' + 'c2(yes)->io->e\\n' + 'c2(no)->op2->e'; var diag = flowchart.parse(code); diag.drawSVG('python_c60674fcb869b3d4482f2bc10676bd8f', {'x': 0, 'y': 0, 'line-width': 3, 'line-length': 50, 'text-margin': 10, 'font-size': 14, 'font-color': 'black', 'line-color': 'black', 'element-color': 'black', 'fill': 'white', 'yes-text': 'yes', 'no-text': 'no', 'arrow-end': 'block', 'scale': 1, 'symbols': {'start': {'font-color': 'red', 'element-color': 'green', 'fill': 'yellow'}, 'end': {'class': 'end-element'}}, 'flowstate': {'past': {'fill': '#CCCCCC', 'font-size': 12}, 'current': {'fill': 'yellow', 'font-color': 'red', 'font-weight': 'bold'}, 'future': {'fill': '#FFFF99'}, 'request': {'fill': 'blue'}, 'invalid': {'fill': '#444444'}, 'approved': {'fill': '#58C4A3', 'font-size': 12, 'yes-text': 'APPROVED', 'no-text': 'n/a'}, 'rejected': {'fill': '#C45879', 'font-size': 12, 'yes-text': 'n/a', 'no-text': 'REJECTED'}}}); typeof start_lc === \"undefined\" ? 0 : start_lc()","title":"With Mode Piping"},{"location":"features/lp/plugs/kroki/","text":"[data-md-color-scheme=\"slate\"] .featherlight .featherlight-content { background: #2e303e; } [data-md-color-scheme=\"slate\"] .featherlight .featherlight-close-icon { background: rgba(255,255,255,.3); color: #fff; } .featherlight .featherlight-content { min-width: 60% !important; } function next_elmt_into_lightbox(id, event) { let btn=document.getElementById(id); let parent = btn.parentNode; function flclose(event) { let c = this.$content[0]; $(parent).after(c); } let el = parent.nextElementSibling; $.featherlight({jquery: el, persist: true, beforeClose: flclose}) } .button-lightbox { color: var(--md-default-fg-color--lighter); }.button-lightbox:hover { color: var(--md-default-fg-color--light); } @media only screen and (min-width: 76.25em) { .md-main__inner { max-width: none; } .md-sidebar--primary { left: 0; } .md-sidebar--secondary { right: 0; margin-left: 0; -webkit-transform: none; transform: none; } } kroki \u00a4 Support for kroki diagrams. Kroki is a metahub for various kinds of diagram types, incl. plantuml (our default). These are just a few of the growing selection of supported formats: Syntax \u00a4 Set the mode parameter to kroki[:diagtype] , with plantuml the default type. Set fn to the svg to be produced, relative to your page. Diagram source: In the lp block body supply the source Alternatively you could also supply the source as src header argument, relative to the page or absolute path Default Parameters: Code lp_kroki_dflts = { 'server' : env ( 'lp_kroki_server' , 'https://kroki.io/' ), 'puml' : env ( 'lp_kroki_puml' , 'dark_blue' ), 'kroki_mode' : 'plantuml' , # when user gave no kroki mode we set this } https://github.com/axiros/docutools/blob/master/src/lcdoc/mkdocs/lp/plugs/kroki/__init__.py#L23 Examples \u00a4 LP Source: ``` bash lp:kroki fn = img/k1 addsrc rectangle \"Main\" { ( main.view ) ( singleton ) } rectangle \"Base\" { ( base.component ) ( component ) ( model ) } rectangle \"<b>main.ts</b>\" as main_ts ( component ) ..> ( base.component ) main_ts == > ( main.view ) ( main.view ) --> ( component ) ( main.view ) ...> ( singleton ) ( singleton ) ---> ( model ) ``` Result: LP Source (shortform): `lp:kroki:excalidraw fn=img/k2 addsrc src=excali.json` Result: $('.md-content img').featherlightGallery({ nextIcon: '\u00bb', previousIcon: '\u00ab', openSpeed: 300, galleryFadeIn: 300, targetAttr: 'src' }); $('.md-content img').css('cursor', 'zoom-in'); typeof start_lc === \"undefined\" ? 0 : start_lc()","title":"kroki"},{"location":"features/lp/plugs/kroki/#kroki","text":"Support for kroki diagrams. Kroki is a metahub for various kinds of diagram types, incl. plantuml (our default). These are just a few of the growing selection of supported formats:","title":"kroki "},{"location":"features/lp/plugs/kroki/#syntax","text":"Set the mode parameter to kroki[:diagtype] , with plantuml the default type. Set fn to the svg to be produced, relative to your page. Diagram source: In the lp block body supply the source Alternatively you could also supply the source as src header argument, relative to the page or absolute path Default Parameters: Code lp_kroki_dflts = { 'server' : env ( 'lp_kroki_server' , 'https://kroki.io/' ), 'puml' : env ( 'lp_kroki_puml' , 'dark_blue' ), 'kroki_mode' : 'plantuml' , # when user gave no kroki mode we set this } https://github.com/axiros/docutools/blob/master/src/lcdoc/mkdocs/lp/plugs/kroki/__init__.py#L23","title":"Syntax"},{"location":"features/lp/plugs/kroki/#examples","text":"LP Source: ``` bash lp:kroki fn = img/k1 addsrc rectangle \"Main\" { ( main.view ) ( singleton ) } rectangle \"Base\" { ( base.component ) ( component ) ( model ) } rectangle \"<b>main.ts</b>\" as main_ts ( component ) ..> ( base.component ) main_ts == > ( main.view ) ( main.view ) --> ( component ) ( main.view ) ...> ( singleton ) ( singleton ) ---> ( model ) ``` Result: LP Source (shortform): `lp:kroki:excalidraw fn=img/k2 addsrc src=excali.json` Result: $('.md-content img').featherlightGallery({ nextIcon: '\u00bb', previousIcon: '\u00ab', openSpeed: 300, galleryFadeIn: 300, targetAttr: 'src' }); $('.md-content img').css('cursor', 'zoom-in'); typeof start_lc === \"undefined\" ? 0 : start_lc()","title":"Examples"},{"location":"features/lp/plugs/lightbox/","text":"td.dt-control { background: url(\"https://www.datatables.net/examples/resources/details_open.png\") no-repeat center center; cursor: pointer; } tr.dt-hasChild td.dt-control { background: url(\"https://www.datatables.net/examples/resources/details_close.png\") no-repeat center center; } table.dataTable th.dt-left, table.dataTable td.dt-left { text-align: left; } table.dataTable th.dt-center, table.dataTable td.dt-center, table.dataTable td.dataTables_empty { text-align: center; } table.dataTable th.dt-right, table.dataTable td.dt-right { text-align: right; } table.dataTable th.dt-justify, table.dataTable td.dt-justify { text-align: justify; } table.dataTable th.dt-nowrap, table.dataTable td.dt-nowrap { white-space: nowrap; } table.dataTable thead th.dt-head-left, table.dataTable thead td.dt-head-left, table.dataTable tfoot th.dt-head-left, table.dataTable tfoot td.dt-head-left { text-align: left; } table.dataTable thead th.dt-head-center, table.dataTable thead td.dt-head-center, table.dataTable tfoot th.dt-head-center, table.dataTable tfoot td.dt-head-center { text-align: center; } table.dataTable thead th.dt-head-right, table.dataTable thead td.dt-head-right, table.dataTable tfoot th.dt-head-right, table.dataTable tfoot td.dt-head-right { text-align: right; } table.dataTable thead th.dt-head-justify, table.dataTable thead td.dt-head-justify, table.dataTable tfoot th.dt-head-justify, table.dataTable tfoot td.dt-head-justify { text-align: justify; } table.dataTable thead th.dt-head-nowrap, table.dataTable thead td.dt-head-nowrap, table.dataTable tfoot th.dt-head-nowrap, table.dataTable tfoot td.dt-head-nowrap { white-space: nowrap; } table.dataTable tbody th.dt-body-left, table.dataTable tbody td.dt-body-left { text-align: left; } table.dataTable tbody th.dt-body-center, table.dataTable tbody td.dt-body-center { text-align: center; } table.dataTable tbody th.dt-body-right, table.dataTable tbody td.dt-body-right { text-align: right; } table.dataTable tbody th.dt-body-justify, table.dataTable tbody td.dt-body-justify { text-align: justify; } table.dataTable tbody th.dt-body-nowrap, table.dataTable tbody td.dt-body-nowrap { white-space: nowrap; } /* * Table styles */ table.dataTable { width: 100%; margin: 0 auto; clear: both; border-collapse: separate; border-spacing: 0; /* * Header and footer styles */ /* * Body styles */ } table.dataTable thead th, table.dataTable tfoot th { font-weight: bold; } table.dataTable thead th, table.dataTable thead td { padding: 10px 18px; border-bottom: 1px solid #111; } table.dataTable thead th:active, table.dataTable thead td:active { outline: none; } table.dataTable tfoot th, table.dataTable tfoot td { padding: 10px 18px 6px 18px; border-top: 1px solid #111; } table.dataTable thead .sorting, table.dataTable thead .sorting_asc, table.dataTable thead .sorting_desc, table.dataTable thead .sorting_asc_disabled, table.dataTable thead .sorting_desc_disabled { cursor: pointer; *cursor: hand; background-repeat: no-repeat; background-position: center right; } table.dataTable thead .sorting { background-image: url(\"../images/sort_both.png\"); } table.dataTable thead .sorting_asc { background-image: url(\"../images/sort_asc.png\") !important; } table.dataTable thead .sorting_desc { background-image: url(\"../images/sort_desc.png\") !important; } table.dataTable thead .sorting_asc_disabled { background-image: url(\"../images/sort_asc_disabled.png\"); } table.dataTable thead .sorting_desc_disabled { background-image: url(\"../images/sort_desc_disabled.png\"); } table.dataTable tbody tr { background-xcolor: #ffffff; } table.dataTable tbody tr.selected { background-xcolor: #gray; } table.dataTable tbody th, table.dataTable tbody td { padding: 8px 10px; } table.dataTable.row-border tbody th, table.dataTable.row-border tbody td, table.dataTable.display tbody th, table.dataTable.display tbody td { border-top: 1px solid #ddd; } table.dataTable.row-border tbody tr:first-child th, table.dataTable.row-border tbody tr:first-child td, table.dataTable.display tbody tr:first-child th, table.dataTable.display tbody tr:first-child td { border-top: none; } table.dataTable.cell-border tbody th, table.dataTable.cell-border tbody td { border-top: 1px solid #ddd; border-right: 1px solid #ddd; } table.dataTable.cell-border tbody tr th:first-child, table.dataTable.cell-border tbody tr td:first-child { border-left: 1px solid #ddd; } table.dataTable.cell-border tbody tr:first-child th, table.dataTable.cell-border tbody tr:first-child td { border-top: none; } table.dataTable.stripe tbody tr.odd, table.dataTable.display tbody tr.odd { background: rgba(0,0,0,0.1); opacity(0); } table.dataTable.stripe tbody tr.odd.selected, table.dataTable.display tbody tr.odd.selected { background: rgba(0,0,0,0.2); opacity(0); } table.dataTable.hover tbody tr:hover, table.dataTable.display tbody tr:hover { background: rgba(0,0,0,0.3); opacity(0); } table.dataTable.hover tbody tr:hover.selected, table.dataTable.display tbody tr:hover.selected { background-xcolor: #aab7d1; } table.dataTable.order-column tbody tr > .sorting_1, table.dataTable.order-column tbody tr > .sorting_2, table.dataTable.order-column tbody tr > .sorting_3, table.dataTable.display tbody tr > .sorting_1, table.dataTable.display tbody tr > .sorting_2, table.dataTable.display tbody tr > .sorting_3 { background-xcolor: #fafafa; } table.dataTable.order-column tbody tr.selected > .sorting_1, table.dataTable.order-column tbody tr.selected > .sorting_2, table.dataTable.order-column tbody tr.selected > .sorting_3, table.dataTable.display tbody tr.selected > .sorting_1, table.dataTable.display tbody tr.selected > .sorting_2, table.dataTable.display tbody tr.selected > .sorting_3 { background-xcolor: #acbad5; } table.dataTable.display tbody tr.odd > .sorting_1, table.dataTable.order-column.stripe tbody tr.odd > .sorting_1 { background-xcolor: #f1f1f1; } table.dataTable.display tbody tr.odd > .sorting_2, table.dataTable.order-column.stripe tbody tr.odd > .sorting_2 { background-xcolor: #f3f3f3; } table.dataTable.display tbody tr.odd > .sorting_3, table.dataTable.order-column.stripe tbody tr.odd > .sorting_3 { background-xcolor: whitesmoke; } table.dataTable.display tbody tr.odd.selected > .sorting_1, table.dataTable.order-column.stripe tbody tr.odd.selected > .sorting_1 { background-xcolor: #a6b4cd; } table.dataTable.display tbody tr.odd.selected > .sorting_2, table.dataTable.order-column.stripe tbody tr.odd.selected > .sorting_2 { background-xcolor: #a8b5cf; } table.dataTable.display tbody tr.odd.selected > .sorting_3, table.dataTable.order-column.stripe tbody tr.odd.selected > .sorting_3 { background-xcolor: #a9b7d1; } table.dataTable.display tbody tr.even > .sorting_1, table.dataTable.order-column.stripe tbody tr.even > .sorting_1 { background-xcolor: #fafafa; } table.dataTable.display tbody tr.even > .sorting_2, table.dataTable.order-column.stripe tbody tr.even > .sorting_2 { background-xcolor: #fcfcfc; } table.dataTable.display tbody tr.even > .sorting_3, table.dataTable.order-column.stripe tbody tr.even > .sorting_3 { background-xcolor: #fefefe; } table.dataTable.display tbody tr.even.selected > .sorting_1, table.dataTable.order-column.stripe tbody tr.even.selected > .sorting_1 { background-xcolor: #acbad5; } table.dataTable.display tbody tr.even.selected > .sorting_2, table.dataTable.order-column.stripe tbody tr.even.selected > .sorting_2 { background-xcolor: #aebcd6; } table.dataTable.display tbody tr.even.selected > .sorting_3, table.dataTable.order-column.stripe tbody tr.even.selected > .sorting_3 { background-xcolor: #afbdd8; } table.dataTable.display tbody tr:hover > .sorting_1, table.dataTable.order-column.hover tbody tr:hover > .sorting_1 { background-xcolor: #eaeaea; } table.dataTable.display tbody tr:hover > .sorting_2, table.dataTable.order-column.hover tbody tr:hover > .sorting_2 { background-xcolor: #ececec; } table.dataTable.display tbody tr:hover > .sorting_3, table.dataTable.order-column.hover tbody tr:hover > .sorting_3 { background-xcolor: #efefef; } table.dataTable.display tbody tr:hover.selected > .sorting_1, table.dataTable.order-column.hover tbody tr:hover.selected > .sorting_1 { background-xcolor: #a2aec7; } table.dataTable.display tbody tr:hover.selected > .sorting_2, table.dataTable.order-column.hover tbody tr:hover.selected > .sorting_2 { background-xcolor: #a3b0c9; } table.dataTable.display tbody tr:hover.selected > .sorting_3, table.dataTable.order-column.hover tbody tr:hover.selected > .sorting_3 { background-xcolor: #a5b2cb; } table.dataTable.no-footer { border-bottom: 1px solid #111; } table.dataTable.nowrap th, table.dataTable.nowrap td { white-space: nowrap; } table.dataTable.compact thead th, table.dataTable.compact thead td { padding: 4px 17px; } table.dataTable.compact tfoot th, table.dataTable.compact tfoot td { padding: 4px; } table.dataTable.compact tbody th, table.dataTable.compact tbody td { padding: 4px; } table.dataTable th, table.dataTable td { box-sizing: content-box; } /* * Control feature layout */ .dataTables_wrapper { position: relative; clear: both; } .dataTables_wrapper .dataTables_length { float: left; } .dataTables_wrapper .dataTables_length select { border: 1px solid #aaa; border-radius: 3px; padding: 5px; background-xcolor: transparent; padding: 4px; } .dataTables_wrapper .dataTables_filter { float: right; text-align: right; } .dataTables_wrapper .dataTables_filter input { border: 1px solid #aaa; border-radius: 3px; padding: 5px; background-color: transparent; margin-left: 3px; } .dataTables_wrapper .dataTables_info { clear: both; float: left; padding-top: 0.755em; } .dataTables_wrapper .dataTables_paginate { float: right; text-align: right; padding-top: 0.25em; } .dataTables_wrapper .dataTables_paginate .paginate_button { box-sizing: border-box; display: inline-block; min-width: 1.5em; padding: 0.5em 1em; margin-left: 2px; text-align: center; text-decoration: none !important; cursor: pointer; *cursor: hand; xcolor: #333 !important; border: 1px solid transparent; border-radius: 2px; } .dataTables_wrapper .dataTables_paginate .paginate_button.current, .dataTables_wrapper .dataTables_paginate .paginate_button.current:hover { color: #333 !important; border: 1px solid #979797; background-xcolor: white; background: -webkit-gradient( linear, left top, left bottom, xcolor-stop(0%, white), xcolor-stop(100%, #dcdcdc) ); /* Chrome,Safari4+ */ background: -webkit-linear-gradient(top, white 0%, #dcdcdc 100%); /* Chrome10+,Safari5.1+ */ background: -moz-linear-gradient(top, white 0%, #dcdcdc 100%); /* FF3.6+ */ background: -ms-linear-gradient(top, white 0%, #dcdcdc 100%); /* IE10+ */ background: -o-linear-gradient(top, white 0%, #dcdcdc 100%); /* Opera 11.10+ */ background: linear-gradient(to bottom, white 0%, #dcdcdc 100%); /* W3C */ } .dataTables_wrapper .dataTables_paginate .paginate_button.disabled, .dataTables_wrapper .dataTables_paginate .paginate_button.disabled:hover, .dataTables_wrapper .dataTables_paginate .paginate_button.disabled:active { cursor: default; xcolor: #666 !important; border: 1px solid transparent; background: transparent; box-shadow: none; } .dataTables_wrapper .dataTables_paginate .paginate_button:hover { xcolor: white !important; border: 1px solid #111; background-xcolor: #585858; background: -webkit-gradient( linear, left top, left bottom, xcolor-stop(0%, #585858), xcolor-stop(100%, #111) ); /* Chrome,Safari4+ */ background: -webkit-linear-gradient(top, #585858 0%, #111 100%); /* Chrome10+,Safari5.1+ */ background: -moz-linear-gradient(top, #585858 0%, #111 100%); /* FF3.6+ */ background: -ms-linear-gradient(top, #585858 0%, #111 100%); /* IE10+ */ background: -o-linear-gradient(top, #585858 0%, #111 100%); /* Opera 11.10+ */ background: linear-gradient(to bottom, #585858 0%, #111 100%); /* W3C */ } .dataTables_wrapper .dataTables_paginate .paginate_button:active { outline: none; background-xcolor: #2b2b2b; background: -webkit-gradient( linear, left top, left bottom, xcolor-stop(0%, #2b2b2b), xcolor-stop(100%, #0c0c0c) ); /* Chrome,Safari4+ */ background: -webkit-linear-gradient(top, #2b2b2b 0%, #0c0c0c 100%); /* Chrome10+,Safari5.1+ */ background: -moz-linear-gradient(top, #2b2b2b 0%, #0c0c0c 100%); /* FF3.6+ */ background: -ms-linear-gradient(top, #2b2b2b 0%, #0c0c0c 100%); /* IE10+ */ background: -o-linear-gradient(top, #2b2b2b 0%, #0c0c0c 100%); /* Opera 11.10+ */ background: linear-gradient(to bottom, #2b2b2b 0%, #0c0c0c 100%); /* W3C */ box-shadow: inset 0 0 3px #111; } .dataTables_wrapper .dataTables_paginate .ellipsis { padding: 0 1em; } .dataTables_wrapper .dataTables_processing { position: absolute; top: 50%; left: 50%; width: 100%; height: 40px; margin-left: -50%; margin-top: -25px; padding-top: 20px; text-align: center; font-size: 1.2em; background-xcolor: white; background: -webkit-gradient( linear, left top, right top, xcolor-stop(0%, rgba(255, 255, 255, 0)), xcolor-stop(25%, rgba(255, 255, 255, 0.9)), xcolor-stop(75%, rgba(255, 255, 255, 0.9)), xcolor-stop(100%, rgba(255, 255, 255, 0)) ); background: -webkit-linear-gradient( left, rgba(255, 255, 255, 0) 0%, rgba(255, 255, 255, 0.9) 25%, rgba(255, 255, 255, 0.9) 75%, rgba(255, 255, 255, 0) 100% ); background: -moz-linear-gradient( left, rgba(255, 255, 255, 0) 0%, rgba(255, 255, 255, 0.9) 25%, rgba(255, 255, 255, 0.9) 75%, rgba(255, 255, 255, 0) 100% ); background: -ms-linear-gradient( left, rgba(255, 255, 255, 0) 0%, rgba(255, 255, 255, 0.9) 25%, rgba(255, 255, 255, 0.9) 75%, rgba(255, 255, 255, 0) 100% ); background: -o-linear-gradient( left, rgba(255, 255, 255, 0) 0%, rgba(255, 255, 255, 0.9) 25%, rgba(255, 255, 255, 0.9) 75%, rgba(255, 255, 255, 0) 100% ); background: linear-gradient( to right, rgba(255, 255, 255, 0) 0%, rgba(255, 255, 255, 0.9) 25%, rgba(255, 255, 255, 0.9) 75%, rgba(255, 255, 255, 0) 100% ); } .dataTables_wrapper .dataTables_length, .dataTables_wrapper .dataTables_filter, .dataTables_wrapper .dataTables_info, .dataTables_wrapper .dataTables_processing, .dataTables_wrapper .dataTables_paginate { xcolor: #333; } .dataTables_wrapper .dataTables_scroll { clear: both; } .dataTables_wrapper .dataTables_scroll div.dataTables_scrollBody { *margin-top: -1px; -webkit-overflow-scrolling: touch; } .dataTables_wrapper .dataTables_scroll div.dataTables_scrollBody > table > thead > tr > th, .dataTables_wrapper .dataTables_scroll div.dataTables_scrollBody > table > thead > tr > td, .dataTables_wrapper .dataTables_scroll div.dataTables_scrollBody > table > tbody > tr > th, .dataTables_wrapper .dataTables_scroll div.dataTables_scrollBody > table > tbody > tr > td { vertical-align: middle; } .dataTables_wrapper .dataTables_scroll div.dataTables_scrollBody > table > thead > tr > th > div.dataTables_sizing, .dataTables_wrapper .dataTables_scroll div.dataTables_scrollBody > table > thead > tr > td > div.dataTables_sizing, .dataTables_wrapper .dataTables_scroll div.dataTables_scrollBody > table > tbody > tr > th > div.dataTables_sizing, .dataTables_wrapper .dataTables_scroll div.dataTables_scrollBody > table > tbody > tr > td > div.dataTables_sizing { height: 0; overflow: hidden; margin: 0 !important; padding: 0 !important; } .dataTables_wrapper.no-footer .dataTables_scrollBody { border-bottom: 1px solid #111; } .dataTables_wrapper.no-footer div.dataTables_scrollHead table.dataTable, .dataTables_wrapper.no-footer div.dataTables_scrollBody > table { border-bottom: none; } .dataTables_wrapper:after { visibility: hidden; display: block; content: \"\"; clear: both; height: 0; } @media screen and (max-width: 767px) { .dataTables_wrapper .dataTables_info, .dataTables_wrapper .dataTables_paginate { float: none; text-align: center; } .dataTables_wrapper .dataTables_paginate { margin-top: 0.5em; } } @media screen and (max-width: 640px) { .dataTables_wrapper .dataTables_length, .dataTables_wrapper .dataTables_filter { float: none; text-align: center; } .dataTables_wrapper .dataTables_filter { margin-top: 0.5em; } } [data-md-color-scheme=\"slate\"] .featherlight .featherlight-content { background: #2e303e; } [data-md-color-scheme=\"slate\"] .featherlight .featherlight-close-icon { background: rgba(255,255,255,.3); color: #fff; } .featherlight .featherlight-content { min-width: 60% !important; } function next_elmt_into_lightbox(id, event) { let btn=document.getElementById(id); let parent = btn.parentNode; function flclose(event) { let c = this.$content[0]; $(parent).after(c); } let el = parent.nextElementSibling; $.featherlight({jquery: el, persist: true, beforeClose: flclose}) } .button-lightbox { color: var(--md-default-fg-color--lighter); }.button-lightbox:hover { color: var(--md-default-fg-color--light); } @media only screen and (min-width: 76.25em) { .md-main__inner { max-width: none; } .md-sidebar--primary { left: 0; } .md-sidebar--secondary { right: 0; margin-left: 0; -webkit-transform: none; transform: none; } } lightbox \u00a4 Wraps content into featherlight lightboxes. click on an image below Syntax \u00a4 Matching Many Elements (Lightbox Gallery) \u00a4 At the bottom of your page add an lp stanza like this `lp:lightbox [outer_match=... match=... target=...]` or the normal form: ```sth lp:lightbox match=img target=src ... ``` The library works not only on markdown images but also on html images or other content. You may specify jquery element matchers and featherlight targets also in the body (then with more than one), like this: ``` b lp : lightbox addsrc [{ 'match' : 'img' , 'target' : 'src' }, # the default (you may omit this) ... ] ``` Default Parameters: Code lb_dflt_params = lambda: {'outer_match': '.md-content ', 'match': 'img', 'target': 'src'} https://github.com/axiros/docutools/blob/master/src/lcdoc/mkdocs/lp/plugs/lightbox/__init__.py#L69 Lightbox For Single Elements \u00a4 Adding a colon behind the mode lightbox will return a button, which will lift the following element into a lightbox: `lp:lightbox:` *Example element with the lightbox button to the right* Renders: Example element with the lightbox button to the right The next element may also be html. You may even use the tag witin html - then wrapped into an outer tag and on a single line, so that we detect the statement while parsing the source markdown page: Source: < div style = \"color:blue\" > Not in box < p > `lp:lightbox:` </ p > < div style = \"color:red\" > In lightbox </ div ></ div > Renders: Not in box In lightbox Any such lp expression within a page automatically triggers the inclusion of the lightbox and jquery libs into the page. All javascript in the element should work: ` lp : lightbox : ` !!! note \"Example\" ``` python lp : python show ([[ 'Joe' , 42 ], [ 'Jane' , 32 ]], columns = [ 'name' , 'age' ]) ``` Result: Example Tech All javascript in the element should work, since we set persist to true, i.e. content is moved, not copied. Before close we move the content back, in order to address this bug. $('.md-content img').featherlightGallery({ nextIcon: '\u00bb', previousIcon: '\u00ab', openSpeed: 300, galleryFadeIn: 300, targetAttr: 'src' }); $('.md-content img').css('cursor', 'zoom-in'); function do_python_92f38f9c3424e9f58b232234a0e414fd () { let data = [['Joe', 42], ['Jane', 32]] $('#python_92f38f9c3424e9f58b232234a0e414fd_datatbl').DataTable( { data: data, columns: [{'title': 'name'}, {'title': 'age'}], retrieve: true } ); } do_python_92f38f9c3424e9f58b232234a0e414fd() typeof start_lc === \"undefined\" ? 0 : start_lc()","title":"lightbox"},{"location":"features/lp/plugs/lightbox/#lightbox","text":"Wraps content into featherlight lightboxes. click on an image below","title":"lightbox "},{"location":"features/lp/plugs/lightbox/#syntax","text":"","title":"Syntax"},{"location":"features/lp/plugs/lightbox/#matching-many-elements-lightbox-gallery","text":"At the bottom of your page add an lp stanza like this `lp:lightbox [outer_match=... match=... target=...]` or the normal form: ```sth lp:lightbox match=img target=src ... ``` The library works not only on markdown images but also on html images or other content. You may specify jquery element matchers and featherlight targets also in the body (then with more than one), like this: ``` b lp : lightbox addsrc [{ 'match' : 'img' , 'target' : 'src' }, # the default (you may omit this) ... ] ``` Default Parameters: Code lb_dflt_params = lambda: {'outer_match': '.md-content ', 'match': 'img', 'target': 'src'} https://github.com/axiros/docutools/blob/master/src/lcdoc/mkdocs/lp/plugs/lightbox/__init__.py#L69","title":"Matching Many Elements (Lightbox Gallery)"},{"location":"features/lp/plugs/lightbox/#lightbox-for-single-elements","text":"Adding a colon behind the mode lightbox will return a button, which will lift the following element into a lightbox: `lp:lightbox:` *Example element with the lightbox button to the right* Renders: Example element with the lightbox button to the right The next element may also be html. You may even use the tag witin html - then wrapped into an outer tag and on a single line, so that we detect the statement while parsing the source markdown page: Source: < div style = \"color:blue\" > Not in box < p > `lp:lightbox:` </ p > < div style = \"color:red\" > In lightbox </ div ></ div > Renders: Not in box In lightbox Any such lp expression within a page automatically triggers the inclusion of the lightbox and jquery libs into the page. All javascript in the element should work: ` lp : lightbox : ` !!! note \"Example\" ``` python lp : python show ([[ 'Joe' , 42 ], [ 'Jane' , 32 ]], columns = [ 'name' , 'age' ]) ``` Result: Example Tech All javascript in the element should work, since we set persist to true, i.e. content is moved, not copied. Before close we move the content back, in order to address this bug. $('.md-content img').featherlightGallery({ nextIcon: '\u00bb', previousIcon: '\u00ab', openSpeed: 300, galleryFadeIn: 300, targetAttr: 'src' }); $('.md-content img').css('cursor', 'zoom-in'); function do_python_92f38f9c3424e9f58b232234a0e414fd () { let data = [['Joe', 42], ['Jane', 32]] $('#python_92f38f9c3424e9f58b232234a0e414fd_datatbl').DataTable( { data: data, columns: [{'title': 'name'}, {'title': 'age'}], retrieve: true } ); } do_python_92f38f9c3424e9f58b232234a0e414fd() typeof start_lc === \"undefined\" ? 0 : start_lc()","title":"Lightbox For Single Elements"},{"location":"features/lp/plugs/make_badges/","text":"@media only screen and (min-width: 76.25em) { .md-main__inner { max-width: none; } .md-sidebar--primary { left: 0; } .md-sidebar--secondary { right: 0; margin-left: 0; -webkit-transform: none; transform: none; } } make_badges \u00a4 Creates badges. Optionally writes the README.md Format \u00a4 Line separated badge function names with statement level lp parameters. Builtin Functions \u00a4 Those (optional) functions will create badges autonomously: axblack docs (with value=[pagecount], default \"mkdocs-material\") gh_action (with action parameter, default ci) pypi Params \u00a4 With these you can create static badges (or overwrite values set by the functions): value label (if not a function name, we take the lp statement value, see example below) lnk color (default: gray) img (when external svg, supply the url) LP Header Parameters \u00a4 write_readme : Inserts the badges within your README.md , between separators. Code fn = project . root ( config ) + '/README.md' insert_file ( fn , content , sep = '<!-- badges -->' ) app . info ( 'Have inserted badges into README' , file = fn ) https://github.com/axiros/docutools/blob/master/src/lcdoc/mkdocs/lp/plugs/make_badges/__init__.py#L130 Example \u00a4 LP Source: ``` bash lp addsrc mode = make_badges eval = always hello # lp: value=world lnk=http://github.com ``` Result: Note You can also use dicts to supply params ( {'value': 'world', 'lnk': ...} ). typeof start_lc === \"undefined\" ? 0 : start_lc()","title":"make_badges"},{"location":"features/lp/plugs/make_badges/#make_badges","text":"Creates badges. Optionally writes the README.md","title":"make_badges "},{"location":"features/lp/plugs/make_badges/#format","text":"Line separated badge function names with statement level lp parameters.","title":"Format"},{"location":"features/lp/plugs/make_badges/#builtin-functions","text":"Those (optional) functions will create badges autonomously: axblack docs (with value=[pagecount], default \"mkdocs-material\") gh_action (with action parameter, default ci) pypi","title":"Builtin Functions"},{"location":"features/lp/plugs/make_badges/#params","text":"With these you can create static badges (or overwrite values set by the functions): value label (if not a function name, we take the lp statement value, see example below) lnk color (default: gray) img (when external svg, supply the url)","title":"Params"},{"location":"features/lp/plugs/make_badges/#lp-header-parameters","text":"write_readme : Inserts the badges within your README.md , between separators. Code fn = project . root ( config ) + '/README.md' insert_file ( fn , content , sep = '<!-- badges -->' ) app . info ( 'Have inserted badges into README' , file = fn ) https://github.com/axiros/docutools/blob/master/src/lcdoc/mkdocs/lp/plugs/make_badges/__init__.py#L130","title":"LP Header Parameters"},{"location":"features/lp/plugs/make_badges/#example","text":"LP Source: ``` bash lp addsrc mode = make_badges eval = always hello # lp: value=world lnk=http://github.com ``` Result: Note You can also use dicts to supply params ( {'value': 'world', 'lnk': ...} ). typeof start_lc === \"undefined\" ? 0 : start_lc()","title":"Example"},{"location":"features/lp/plugs/make_file/","text":"@media only screen and (min-width: 76.25em) { .md-main__inner { max-width: none; } .md-sidebar--primary { left: 0; } .md-sidebar--secondary { right: 0; margin-left: 0; -webkit-transform: none; transform: none; } } make_file \u00a4 Creates a file and displays it as if we used cat on it. Parameters \u00a4 fn replace: optional replacements to apply (dict) content (the body of the lp block) chmod: optional chmod params Example \u00a4 LP Source: ```jso n lp mode=make_ f ile fn =/ t mp/my f ile.jso n addsrc f m t =mk_co ns ole { \"foo\" : \"bar\" } ``` Result: $ ca t / t mp/my f ile.jso n { \"foo\" : \"bar\" } The file has been created: $ ls -lta /tmp/myfile.json -rw-rw---- 1 runner docker 20 Apr 11 14 :55 /tmp/myfile.json typeof start_lc === \"undefined\" ? 0 : start_lc()","title":"make_file"},{"location":"features/lp/plugs/make_file/#make_file","text":"Creates a file and displays it as if we used cat on it.","title":"make_file "},{"location":"features/lp/plugs/make_file/#parameters","text":"fn replace: optional replacements to apply (dict) content (the body of the lp block) chmod: optional chmod params","title":"Parameters"},{"location":"features/lp/plugs/make_file/#example","text":"LP Source: ```jso n lp mode=make_ f ile fn =/ t mp/my f ile.jso n addsrc f m t =mk_co ns ole { \"foo\" : \"bar\" } ``` Result: $ ca t / t mp/my f ile.jso n { \"foo\" : \"bar\" } The file has been created: $ ls -lta /tmp/myfile.json -rw-rw---- 1 runner docker 20 Apr 11 14 :55 /tmp/myfile.json typeof start_lc === \"undefined\" ? 0 : start_lc()","title":"Example"},{"location":"features/lp/plugs/markmap/","text":"@media only screen and (min-width: 76.25em) { .md-main__inner { max-width: none; } .md-sidebar--primary { left: 0; } .md-sidebar--secondary { right: 0; margin-left: 0; -webkit-transform: none; transform: none; } } markmap \u00a4 Support for markmap.js style mindmaps. console.log('in container makrmak') LP Source: ```markdown lp mode=markmap eval=always addsrc width=800px height=400px # markmap ## Links - <https://markmap.js.org/> - [ GitHub ]( https://github.com/gera2ld/markmap ) ## Related - [ coc-markmap ]( https://github.com/gera2ld/coc-markmap ) - [ gatsby-remark-markmap ]( https://github.com/gera2ld/gatsby-remark-markmap ) ## Features - links - **inline** ~~text~~ *styles* - `multiline ` - ```python import lcdoc # for LP ``` ``` Result: Mouse zoom supported. Works within containers LP Source: ```markdown lp mode=markmap height=100px eval=always addsrc # this - bar - asd ## that - foo - bar - baz ``` Result: function do_markmap_5a9823b2f8e1cbfa83cadb2e47973a70 () { const md=`# markmap ## Links - <https://markmap.js.org/> - [GitHub](https://github.com/gera2ld/markmap) ## Related - [coc-markmap](https://github.com/gera2ld/coc-markmap) - [gatsby-remark-markmap](https://github.com/gera2ld/gatsby-remark-markmap) ## Features - links - **inline** ~~text~~ *styles* - X_Rmultiline X_R - X_RX_RX_Rpython import lcdoc # for LP X_RX_RX_R` const transformer = new markmap.Transformer(); const {root, features} = transformer.transform(md.replaceAll('X_R', '`')); const { styles, scripts } = transformer.getUsedAssets(features); if (styles) markmap.loadCSS(styles); if (scripts) markmap.loadJS(scripts, { getMarkmap: () => markmap }); markmap.Markmap.create('#markmap_5a9823b2f8e1cbfa83cadb2e47973a70' , {}, root); } do_markmap_5a9823b2f8e1cbfa83cadb2e47973a70 () function do_markmap_f54dba15348286438987735f1f5c0c8e () { const md=`# this - bar - asd ## that - foo - bar - baz` const transformer = new markmap.Transformer(); const {root, features} = transformer.transform(md.replaceAll('X_R', '`')); const { styles, scripts } = transformer.getUsedAssets(features); if (styles) markmap.loadCSS(styles); if (scripts) markmap.loadJS(scripts, { getMarkmap: () => markmap }); markmap.Markmap.create('#markmap_f54dba15348286438987735f1f5c0c8e' , {}, root); } do_markmap_f54dba15348286438987735f1f5c0c8e () typeof start_lc === \"undefined\" ? 0 : start_lc()","title":"markmap"},{"location":"features/lp/plugs/markmap/#markmap","text":"Support for markmap.js style mindmaps. console.log('in container makrmak') LP Source: ```markdown lp mode=markmap eval=always addsrc width=800px height=400px # markmap ## Links - <https://markmap.js.org/> - [ GitHub ]( https://github.com/gera2ld/markmap ) ## Related - [ coc-markmap ]( https://github.com/gera2ld/coc-markmap ) - [ gatsby-remark-markmap ]( https://github.com/gera2ld/gatsby-remark-markmap ) ## Features - links - **inline** ~~text~~ *styles* - `multiline ` - ```python import lcdoc # for LP ``` ``` Result: Mouse zoom supported. Works within containers LP Source: ```markdown lp mode=markmap height=100px eval=always addsrc # this - bar - asd ## that - foo - bar - baz ``` Result: function do_markmap_5a9823b2f8e1cbfa83cadb2e47973a70 () { const md=`# markmap ## Links - <https://markmap.js.org/> - [GitHub](https://github.com/gera2ld/markmap) ## Related - [coc-markmap](https://github.com/gera2ld/coc-markmap) - [gatsby-remark-markmap](https://github.com/gera2ld/gatsby-remark-markmap) ## Features - links - **inline** ~~text~~ *styles* - X_Rmultiline X_R - X_RX_RX_Rpython import lcdoc # for LP X_RX_RX_R` const transformer = new markmap.Transformer(); const {root, features} = transformer.transform(md.replaceAll('X_R', '`')); const { styles, scripts } = transformer.getUsedAssets(features); if (styles) markmap.loadCSS(styles); if (scripts) markmap.loadJS(scripts, { getMarkmap: () => markmap }); markmap.Markmap.create('#markmap_5a9823b2f8e1cbfa83cadb2e47973a70' , {}, root); } do_markmap_5a9823b2f8e1cbfa83cadb2e47973a70 () function do_markmap_f54dba15348286438987735f1f5c0c8e () { const md=`# this - bar - asd ## that - foo - bar - baz` const transformer = new markmap.Transformer(); const {root, features} = transformer.transform(md.replaceAll('X_R', '`')); const { styles, scripts } = transformer.getUsedAssets(features); if (styles) markmap.loadCSS(styles); if (scripts) markmap.loadJS(scripts, { getMarkmap: () => markmap }); markmap.Markmap.create('#markmap_f54dba15348286438987735f1f5c0c8e' , {}, root); } do_markmap_f54dba15348286438987735f1f5c0c8e () typeof start_lc === \"undefined\" ? 0 : start_lc()","title":"markmap "},{"location":"features/lp/plugs/mermaid/","text":"@media only screen and (min-width: 76.25em) { .md-main__inner { max-width: none; } .md-sidebar--primary { left: 0; } .md-sidebar--secondary { right: 0; margin-left: 0; -webkit-transform: none; transform: none; } } mermaid \u00a4 Support for mermaid.js graphs. We do not require the snippet but add the necessary javascript into the page via a lp mode like this: ```mermaid lp:mermaid graph TD A[Hard] -->|Text| B(Round) B --> C{Decision} C -->|One| D[Result 1] C -->|Two| E[Result 2] ``` See here for details, regarding the per page javascript. Technical Details \u00a4 The mermaid feature requires, besides the diagram code blocks also javascript, loaded once into a page - this is achieved by using the on_post_page hook mechanics of the lp plugin. This attribute is cached, i.e. will be re-added also for cache loaded lp blocks - no need to evaluate always. Diagram Types \u00a4 Practical Sequence Diagrams Flowcharts Class Diagrams Entity Relationships State Diagrams LP Source: ```mermaid lp:mermaid addsrc sequenceDiagram participant Alice participant Bob Alice->>John: Hello John, how are you? loop Healthcheck John->>John: Fight against hypochondria end Note right of John: Rational thoughts <br/>prevail! John-->>Alice: Great! John->>Bob: How about you? Bob-->>John: Jolly good! ``` Result: sequenceDiagram participant Alice participant Bob Alice->>John: Hello John, how are you? loop Healthcheck John->>John: Fight against hypochondria end Note right of John: Rational thoughts <br/>prevail! John-->>Alice: Great! John->>Bob: How about you? Bob-->>John: Jolly good! LP Source: ```mermaid lp:mermaid addsrc graph TD A[Hard] -->|Text| B(Round) B --> C{Decision} C -->|One| D[Result 1] C -->|Two| E[Result 2] ``` Result: graph TD A[Hard] -->|Text| B(Round) B --> C{Decision} C -->|One| D[Result 1] C -->|Two| E[Result 2] LP Source: ```mermaid lp:mermaid addsrc classDiagram Class01 <|-- AveryLongClass : Cool Class03 *-- Class04 Class05 o-- Class06 Class07 .. Class08 Class09 --> C2 : Where am i? Class09 --* C3 Class09 --|> Class07 Class07 : equals() Class07 : Object[] elementData Class01 : size() Class01 : int chimp Class01 : int gorilla Class08 <--> C2: Cool label ``` Result: classDiagram Class01 <|-- AveryLongClass : Cool Class03 -- Class04 Class05 o-- Class06 Class07 .. Class08 Class09 --> C2 : Where am i? Class09 -- C3 Class09 --|> Class07 Class07 : equals() Class07 : Object[] elementData Class01 : size() Class01 : int chimp Class01 : int gorilla Class08 <--> C2: Cool label LP Source: ```mermaid lp:mermaid addsrc erDiagram CUSTOMER ||--o{ ORDER : places ORDER ||--|{ LINE-ITEM : contains CUSTOMER }|..|{ DELIVERY-ADDRESS : uses ``` Result: erDiagram CUSTOMER ||--o{ ORDER : places ORDER ||--|{ LINE-ITEM : contains CUSTOMER }|..|{ DELIVERY-ADDRESS : uses LP Source: ```mermaid lp:mermaid addsrc stateDiagram [*] --> First First --> Second First --> Third state First { [*] --> fir fir --> [*] } state Second { [*] --> sec sec --> [*] } state Third { [*] --> thi thi --> [*] } ``` Result: stateDiagram [*] --> First First --> Second First --> Third state First { [*] --&gt; fir fir --&gt; [*] } state Second { [*] --&gt; sec sec --&gt; [*] } state Third { [*] --&gt; thi thi --&gt; [*] } Impractical Git Gantt Journey Pie Git diagrams are experimental and often don't render to a reasonable size. They overflow, but won't trigger scrollbars. They are the only diagram that often renders too large for the element they are assigned to. LP Source: ```mermaid lp:mermaid addsrc gitGraph: options { \"nodeSpacing\": 150, \"nodeRadius\": 10 } end commit branch newbranch checkout newbranch commit commit checkout master commit commit merge newbranch ``` Result: gitGraph: options { \"nodeSpacing\": 150, \"nodeRadius\": 10 } end commit branch newbranch checkout newbranch commit commit checkout master commit commit merge newbranch Gantt charts usually are too big to render properly in a page. If the element is big enough to hold it, and the chart is large, they render too small to see. If the element is not wide enough, the chart can sometimes render squished and hard to read. LP Source: ```mermaid lp:mermaid addsrc gantt dateFormat YYYY-MM-DD title Adding GANTT diagram to mermaid excludes weekdays 2014-01-10 section A section Completed task :done, des1, 2014-01-06,2014-01-08 Active task :active, des2, 2014-01-09, 3d Future task : des3, after des2, 5d Future task2 : des4, after des3, 5d ``` Result: gantt dateFormat YYYY-MM-DD title Adding GANTT diagram to mermaid excludes weekdays 2014-01-10 section A section Completed task :done, des1, 2014-01-06,2014-01-08 Active task :active, des2, 2014-01-09, 3d Future task : des3, after des2, 5d Future task2 : des4, after des3, 5d Journey diagrams suffer from the same issues as Gantt charts. They just do not scale well and are often hard to read. LP Source: ```mermaid lp:mermaid addsrc journey title My working day section Go to work Make tea: 5: Me Go upstairs: 3: Me Do work: 1: Me, Cat section Go home Go downstairs: 5: Me Sit down: 5: Me ``` Result: journey title My working day section Go to work Make tea: 5: Me Go upstairs: 3: Me Do work: 1: Me, Cat section Go home Go downstairs: 5: Me Sit down: 5: Me Pie at times can seem to work great, but other times it can be hard to read or missing labels all together. Like the others in this list, it relates to sizing and scaling. For instance, if you were to view this on a mobile device, you'd likely see the key for the pie chart missing. LP Source: ```mermaid lp:mermaid addsrc pie title Key elements in Product X \"Calcium\" : 42.96 \"Potassium\" : 50.05 \"Magnesium\" : 10.01 \"Iron\" : 5 ``` Result: pie title Key elements in Product X \"Calcium\" : 42.96 \"Potassium\" : 50.05 \"Magnesium\" : 10.01 \"Iron\" : 5 // Optional config // If your document is not specifying `data-md-color-scheme` for color schemes, // you just need to specify `default`. window.mermaidConfig = { default: { startOnLoad: false, theme: \"default\", flowchart: { htmlLabels: false }, er: { useMaxWidth: false }, sequence: { useMaxWidth: false, noteFontWeight: \"14px\", actorFontSize: \"14px\", messageFontSize: \"16px\" } }, slate: { startOnLoad: false, theme: \"dark\", flowchart: { htmlLabels: false }, er: { useMaxWidth: false }, sequence: { useMaxWidth: false, noteFontWeight: \"14px\", actorFontSize: \"14px\", messageFontSize: \"16px\" } } } function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); } (function () { 'use strict'; function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } } function _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); } function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); } function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); } function _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } } function _construct(Parent, args, Class) { if (_isNativeReflectConstruct()) { _construct = Reflect.construct; } else { _construct = function _construct(Parent, args, Class) { var a = [null]; a.push.apply(a, args); var Constructor = Function.bind.apply(Parent, a); var instance = new Constructor(); if (Class) _setPrototypeOf(instance, Class.prototype); return instance; }; } return _construct.apply(null, arguments); } function _isNativeFunction(fn) { return Function.toString.call(fn).indexOf(\"[native code]\") !== -1; } function _wrapNativeSuper(Class) { var _cache = typeof Map === \"function\" ? new Map() : undefined; _wrapNativeSuper = function _wrapNativeSuper(Class) { if (Class === null || !_isNativeFunction(Class)) return Class; if (typeof Class !== \"function\") { throw new TypeError(\"Super expression must either be null or a function\"); } if (typeof _cache !== \"undefined\") { if (_cache.has(Class)) return _cache.get(Class); _cache.set(Class, Wrapper); } function Wrapper() { return _construct(Class, arguments, _getPrototypeOf(this).constructor); } Wrapper.prototype = Object.create(Class.prototype, { constructor: { value: Wrapper, enumerable: false, writable: true, configurable: true } }); return _setPrototypeOf(Wrapper, Class); }; return _wrapNativeSuper(Class); } function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; } function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); } function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; } /* Notes (as of Mermaid 8.7.0): * - Gantt: width is always relative to the parent, if you have a small parent, the chart will be squashed. * Can't help it. * - Journey: Suffers from the same issues that Gantt does. * - Pie: These charts have no default height or width. Good luck pinning them down to a reasonable size. * - Git: The render portion is agnostic to the size of the parent element. But padding of the SVG is relative * to the parent element. You will never find a happy size. */ /** * Targets special code or div blocks and converts them to UML. * @param {string} className is the name of the class to target. * @return {void} */ var uml = function uml(className) { // Custom element to encapsulate Mermaid content. var MermaidDiv = /*#__PURE__*/function (_HTMLElement) { _inherits(MermaidDiv, _HTMLElement); var _super = _createSuper(MermaidDiv); /** * Creates a special Mermaid div shadow DOM. * Works around issues of shared IDs. * @return {void} */ function MermaidDiv() { var _this; _classCallCheck(this, MermaidDiv); _this = _super.call(this); // Create the Shadow DOM and attach style var shadow = _this.attachShadow({ mode: \"open\" }); var style = document.createElement(\"style\"); style.textContent = \"\\n :host {\\n display: block;\\n line-height: initial;\\n font-size: 16px;\\n }\\n div.mermaid {\\n margin: 0;\\n overflow: visible;\\n }\"; shadow.appendChild(style); return _this; } return MermaidDiv; }( /*#__PURE__*/_wrapNativeSuper(HTMLElement)); if (typeof customElements.get(\"mermaid-div\") === \"undefined\") { customElements.define(\"mermaid-div\", MermaidDiv); } var getFromCode = function getFromCode(parent) { // Handles <pre><code> text extraction. var text = \"\"; for (var j = 0; j < parent.childNodes.length; j++) { var subEl = parent.childNodes[j]; if (subEl.tagName.toLowerCase() === \"code\") { for (var k = 0; k < subEl.childNodes.length; k++) { var child = subEl.childNodes[k]; var whitespace = /^\\s*$/; if (child.nodeName === \"#text\" && !whitespace.test(child.nodeValue)) { text = child.nodeValue; break; } } } } return text; }; // We use this to determine if we want the dark or light theme. // This is specific for our MkDocs Material environment. // You should load your configs based on your own environment's needs. var defaultConfig = { startOnLoad: false, theme: \"default\", flowchart: { htmlLabels: false }, er: { useMaxWidth: false }, sequence: { useMaxWidth: false, noteFontWeight: \"14px\", actorFontSize: \"14px\", messageFontSize: \"16px\" } }; mermaid.mermaidAPI.globalReset(); // Non Material themes should just use \"default\" var scheme = null; try { scheme = document.querySelector(\"[data-md-color-scheme]\").getAttribute(\"data-md-color-scheme\"); } catch (err) { scheme = \"default\"; } var config = typeof mermaidConfig === \"undefined\" ? defaultConfig : mermaidConfig[scheme] || mermaidConfig[\"default\"] || defaultConfig; mermaid.initialize(config); // Find all of our Mermaid sources and render them. var blocks = document.querySelectorAll(\"pre.\".concat(className, \", mermaid-div\")); var surrogate = document.querySelector(\"html\"); var _loop = function _loop(i) { var block = blocks[i]; var parentEl = block.tagName.toLowerCase() === \"mermaid-div\" ? block.shadowRoot.querySelector(\"pre.\".concat(className)) : block; // Create a temporary element with the typeset and size we desire. // Insert it at the end of our parent to render the SVG. var temp = document.createElement(\"div\"); temp.style.visibility = \"hidden\"; temp.style.display = \"display\"; temp.style.padding = \"0\"; temp.style.margin = \"0\"; temp.style.lineHeight = \"initial\"; temp.style.fontSize = \"16px\"; surrogate.appendChild(temp); try { mermaid.mermaidAPI.render(\"_mermaid_\".concat(i), getFromCode(parentEl), function (content) { var el = document.createElement(\"div\"); el.className = className; el.innerHTML = content; // Insert the render where we want it and remove the original text source. // Mermaid will clean up the temporary element. var shadow = document.createElement(\"mermaid-div\"); shadow.shadowRoot.appendChild(el); block.parentNode.insertBefore(shadow, block); parentEl.style.display = \"none\"; shadow.shadowRoot.appendChild(parentEl); if (parentEl !== block) { block.parentNode.removeChild(block); } }, temp); } catch (err) {} // eslint-disable-line no-empty if (surrogate.contains(temp)) { surrogate.removeChild(temp); } }; for (var i = 0; i < blocks.length; i++) { _loop(i); } }; (function () { var onReady = function onReady(fn) { fn() //document.addEventListener(\"DOMContentLoaded\", fn); //document.addEventListener(\"DOMContentSwitch\", fn); }; var observer = new MutationObserver(function (mutations) { mutations.forEach(function (mutation) { if (mutation.type === \"attributes\") { var scheme = mutation.target.getAttribute(\"data-md-color-scheme\"); if (!scheme) { scheme = \"default\"; } localStorage.setItem(\"data-md-color-scheme\", scheme); if (typeof mermaid !== \"undefined\") { uml(\"mermaid\"); } } }); }); onReady(function () { observer.observe(document.querySelector(\"body\"), { attributeFilter: [\"data-md-color-scheme\"] }); if (typeof mermaid !== \"undefined\") { uml(\"mermaid\"); } }); })(); })(); typeof start_lc === \"undefined\" ? 0 : start_lc()","title":"mermaid"},{"location":"features/lp/plugs/mermaid/#mermaid","text":"Support for mermaid.js graphs. We do not require the snippet but add the necessary javascript into the page via a lp mode like this: ```mermaid lp:mermaid graph TD A[Hard] -->|Text| B(Round) B --> C{Decision} C -->|One| D[Result 1] C -->|Two| E[Result 2] ``` See here for details, regarding the per page javascript.","title":"mermaid "},{"location":"features/lp/plugs/mermaid/#technical-details","text":"The mermaid feature requires, besides the diagram code blocks also javascript, loaded once into a page - this is achieved by using the on_post_page hook mechanics of the lp plugin. This attribute is cached, i.e. will be re-added also for cache loaded lp blocks - no need to evaluate always.","title":"Technical Details"},{"location":"features/lp/plugs/mermaid/#diagram-types","text":"Practical Sequence Diagrams Flowcharts Class Diagrams Entity Relationships State Diagrams LP Source: ```mermaid lp:mermaid addsrc sequenceDiagram participant Alice participant Bob Alice->>John: Hello John, how are you? loop Healthcheck John->>John: Fight against hypochondria end Note right of John: Rational thoughts <br/>prevail! John-->>Alice: Great! John->>Bob: How about you? Bob-->>John: Jolly good! ``` Result: sequenceDiagram participant Alice participant Bob Alice->>John: Hello John, how are you? loop Healthcheck John->>John: Fight against hypochondria end Note right of John: Rational thoughts <br/>prevail! John-->>Alice: Great! John->>Bob: How about you? Bob-->>John: Jolly good! LP Source: ```mermaid lp:mermaid addsrc graph TD A[Hard] -->|Text| B(Round) B --> C{Decision} C -->|One| D[Result 1] C -->|Two| E[Result 2] ``` Result: graph TD A[Hard] -->|Text| B(Round) B --> C{Decision} C -->|One| D[Result 1] C -->|Two| E[Result 2] LP Source: ```mermaid lp:mermaid addsrc classDiagram Class01 <|-- AveryLongClass : Cool Class03 *-- Class04 Class05 o-- Class06 Class07 .. Class08 Class09 --> C2 : Where am i? Class09 --* C3 Class09 --|> Class07 Class07 : equals() Class07 : Object[] elementData Class01 : size() Class01 : int chimp Class01 : int gorilla Class08 <--> C2: Cool label ``` Result: classDiagram Class01 <|-- AveryLongClass : Cool Class03 -- Class04 Class05 o-- Class06 Class07 .. Class08 Class09 --> C2 : Where am i? Class09 -- C3 Class09 --|> Class07 Class07 : equals() Class07 : Object[] elementData Class01 : size() Class01 : int chimp Class01 : int gorilla Class08 <--> C2: Cool label LP Source: ```mermaid lp:mermaid addsrc erDiagram CUSTOMER ||--o{ ORDER : places ORDER ||--|{ LINE-ITEM : contains CUSTOMER }|..|{ DELIVERY-ADDRESS : uses ``` Result: erDiagram CUSTOMER ||--o{ ORDER : places ORDER ||--|{ LINE-ITEM : contains CUSTOMER }|..|{ DELIVERY-ADDRESS : uses LP Source: ```mermaid lp:mermaid addsrc stateDiagram [*] --> First First --> Second First --> Third state First { [*] --> fir fir --> [*] } state Second { [*] --> sec sec --> [*] } state Third { [*] --> thi thi --> [*] } ``` Result: stateDiagram [*] --> First First --> Second First --> Third state First { [*] --&gt; fir fir --&gt; [*] } state Second { [*] --&gt; sec sec --&gt; [*] } state Third { [*] --&gt; thi thi --&gt; [*] } Impractical Git Gantt Journey Pie Git diagrams are experimental and often don't render to a reasonable size. They overflow, but won't trigger scrollbars. They are the only diagram that often renders too large for the element they are assigned to. LP Source: ```mermaid lp:mermaid addsrc gitGraph: options { \"nodeSpacing\": 150, \"nodeRadius\": 10 } end commit branch newbranch checkout newbranch commit commit checkout master commit commit merge newbranch ``` Result: gitGraph: options { \"nodeSpacing\": 150, \"nodeRadius\": 10 } end commit branch newbranch checkout newbranch commit commit checkout master commit commit merge newbranch Gantt charts usually are too big to render properly in a page. If the element is big enough to hold it, and the chart is large, they render too small to see. If the element is not wide enough, the chart can sometimes render squished and hard to read. LP Source: ```mermaid lp:mermaid addsrc gantt dateFormat YYYY-MM-DD title Adding GANTT diagram to mermaid excludes weekdays 2014-01-10 section A section Completed task :done, des1, 2014-01-06,2014-01-08 Active task :active, des2, 2014-01-09, 3d Future task : des3, after des2, 5d Future task2 : des4, after des3, 5d ``` Result: gantt dateFormat YYYY-MM-DD title Adding GANTT diagram to mermaid excludes weekdays 2014-01-10 section A section Completed task :done, des1, 2014-01-06,2014-01-08 Active task :active, des2, 2014-01-09, 3d Future task : des3, after des2, 5d Future task2 : des4, after des3, 5d Journey diagrams suffer from the same issues as Gantt charts. They just do not scale well and are often hard to read. LP Source: ```mermaid lp:mermaid addsrc journey title My working day section Go to work Make tea: 5: Me Go upstairs: 3: Me Do work: 1: Me, Cat section Go home Go downstairs: 5: Me Sit down: 5: Me ``` Result: journey title My working day section Go to work Make tea: 5: Me Go upstairs: 3: Me Do work: 1: Me, Cat section Go home Go downstairs: 5: Me Sit down: 5: Me Pie at times can seem to work great, but other times it can be hard to read or missing labels all together. Like the others in this list, it relates to sizing and scaling. For instance, if you were to view this on a mobile device, you'd likely see the key for the pie chart missing. LP Source: ```mermaid lp:mermaid addsrc pie title Key elements in Product X \"Calcium\" : 42.96 \"Potassium\" : 50.05 \"Magnesium\" : 10.01 \"Iron\" : 5 ``` Result: pie title Key elements in Product X \"Calcium\" : 42.96 \"Potassium\" : 50.05 \"Magnesium\" : 10.01 \"Iron\" : 5 // Optional config // If your document is not specifying `data-md-color-scheme` for color schemes, // you just need to specify `default`. window.mermaidConfig = { default: { startOnLoad: false, theme: \"default\", flowchart: { htmlLabels: false }, er: { useMaxWidth: false }, sequence: { useMaxWidth: false, noteFontWeight: \"14px\", actorFontSize: \"14px\", messageFontSize: \"16px\" } }, slate: { startOnLoad: false, theme: \"dark\", flowchart: { htmlLabels: false }, er: { useMaxWidth: false }, sequence: { useMaxWidth: false, noteFontWeight: \"14px\", actorFontSize: \"14px\", messageFontSize: \"16px\" } } } function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); } (function () { 'use strict'; function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } } function _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); } function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); } function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); } function _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } } function _construct(Parent, args, Class) { if (_isNativeReflectConstruct()) { _construct = Reflect.construct; } else { _construct = function _construct(Parent, args, Class) { var a = [null]; a.push.apply(a, args); var Constructor = Function.bind.apply(Parent, a); var instance = new Constructor(); if (Class) _setPrototypeOf(instance, Class.prototype); return instance; }; } return _construct.apply(null, arguments); } function _isNativeFunction(fn) { return Function.toString.call(fn).indexOf(\"[native code]\") !== -1; } function _wrapNativeSuper(Class) { var _cache = typeof Map === \"function\" ? new Map() : undefined; _wrapNativeSuper = function _wrapNativeSuper(Class) { if (Class === null || !_isNativeFunction(Class)) return Class; if (typeof Class !== \"function\") { throw new TypeError(\"Super expression must either be null or a function\"); } if (typeof _cache !== \"undefined\") { if (_cache.has(Class)) return _cache.get(Class); _cache.set(Class, Wrapper); } function Wrapper() { return _construct(Class, arguments, _getPrototypeOf(this).constructor); } Wrapper.prototype = Object.create(Class.prototype, { constructor: { value: Wrapper, enumerable: false, writable: true, configurable: true } }); return _setPrototypeOf(Wrapper, Class); }; return _wrapNativeSuper(Class); } function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; } function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); } function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; } /* Notes (as of Mermaid 8.7.0): * - Gantt: width is always relative to the parent, if you have a small parent, the chart will be squashed. * Can't help it. * - Journey: Suffers from the same issues that Gantt does. * - Pie: These charts have no default height or width. Good luck pinning them down to a reasonable size. * - Git: The render portion is agnostic to the size of the parent element. But padding of the SVG is relative * to the parent element. You will never find a happy size. */ /** * Targets special code or div blocks and converts them to UML. * @param {string} className is the name of the class to target. * @return {void} */ var uml = function uml(className) { // Custom element to encapsulate Mermaid content. var MermaidDiv = /*#__PURE__*/function (_HTMLElement) { _inherits(MermaidDiv, _HTMLElement); var _super = _createSuper(MermaidDiv); /** * Creates a special Mermaid div shadow DOM. * Works around issues of shared IDs. * @return {void} */ function MermaidDiv() { var _this; _classCallCheck(this, MermaidDiv); _this = _super.call(this); // Create the Shadow DOM and attach style var shadow = _this.attachShadow({ mode: \"open\" }); var style = document.createElement(\"style\"); style.textContent = \"\\n :host {\\n display: block;\\n line-height: initial;\\n font-size: 16px;\\n }\\n div.mermaid {\\n margin: 0;\\n overflow: visible;\\n }\"; shadow.appendChild(style); return _this; } return MermaidDiv; }( /*#__PURE__*/_wrapNativeSuper(HTMLElement)); if (typeof customElements.get(\"mermaid-div\") === \"undefined\") { customElements.define(\"mermaid-div\", MermaidDiv); } var getFromCode = function getFromCode(parent) { // Handles <pre><code> text extraction. var text = \"\"; for (var j = 0; j < parent.childNodes.length; j++) { var subEl = parent.childNodes[j]; if (subEl.tagName.toLowerCase() === \"code\") { for (var k = 0; k < subEl.childNodes.length; k++) { var child = subEl.childNodes[k]; var whitespace = /^\\s*$/; if (child.nodeName === \"#text\" && !whitespace.test(child.nodeValue)) { text = child.nodeValue; break; } } } } return text; }; // We use this to determine if we want the dark or light theme. // This is specific for our MkDocs Material environment. // You should load your configs based on your own environment's needs. var defaultConfig = { startOnLoad: false, theme: \"default\", flowchart: { htmlLabels: false }, er: { useMaxWidth: false }, sequence: { useMaxWidth: false, noteFontWeight: \"14px\", actorFontSize: \"14px\", messageFontSize: \"16px\" } }; mermaid.mermaidAPI.globalReset(); // Non Material themes should just use \"default\" var scheme = null; try { scheme = document.querySelector(\"[data-md-color-scheme]\").getAttribute(\"data-md-color-scheme\"); } catch (err) { scheme = \"default\"; } var config = typeof mermaidConfig === \"undefined\" ? defaultConfig : mermaidConfig[scheme] || mermaidConfig[\"default\"] || defaultConfig; mermaid.initialize(config); // Find all of our Mermaid sources and render them. var blocks = document.querySelectorAll(\"pre.\".concat(className, \", mermaid-div\")); var surrogate = document.querySelector(\"html\"); var _loop = function _loop(i) { var block = blocks[i]; var parentEl = block.tagName.toLowerCase() === \"mermaid-div\" ? block.shadowRoot.querySelector(\"pre.\".concat(className)) : block; // Create a temporary element with the typeset and size we desire. // Insert it at the end of our parent to render the SVG. var temp = document.createElement(\"div\"); temp.style.visibility = \"hidden\"; temp.style.display = \"display\"; temp.style.padding = \"0\"; temp.style.margin = \"0\"; temp.style.lineHeight = \"initial\"; temp.style.fontSize = \"16px\"; surrogate.appendChild(temp); try { mermaid.mermaidAPI.render(\"_mermaid_\".concat(i), getFromCode(parentEl), function (content) { var el = document.createElement(\"div\"); el.className = className; el.innerHTML = content; // Insert the render where we want it and remove the original text source. // Mermaid will clean up the temporary element. var shadow = document.createElement(\"mermaid-div\"); shadow.shadowRoot.appendChild(el); block.parentNode.insertBefore(shadow, block); parentEl.style.display = \"none\"; shadow.shadowRoot.appendChild(parentEl); if (parentEl !== block) { block.parentNode.removeChild(block); } }, temp); } catch (err) {} // eslint-disable-line no-empty if (surrogate.contains(temp)) { surrogate.removeChild(temp); } }; for (var i = 0; i < blocks.length; i++) { _loop(i); } }; (function () { var onReady = function onReady(fn) { fn() //document.addEventListener(\"DOMContentLoaded\", fn); //document.addEventListener(\"DOMContentSwitch\", fn); }; var observer = new MutationObserver(function (mutations) { mutations.forEach(function (mutation) { if (mutation.type === \"attributes\") { var scheme = mutation.target.getAttribute(\"data-md-color-scheme\"); if (!scheme) { scheme = \"default\"; } localStorage.setItem(\"data-md-color-scheme\", scheme); if (typeof mermaid !== \"undefined\") { uml(\"mermaid\"); } } }); }); onReady(function () { observer.observe(document.querySelector(\"body\"), { attributeFilter: [\"data-md-color-scheme\"] }); if (typeof mermaid !== \"undefined\") { uml(\"mermaid\"); } }); })(); })(); typeof start_lc === \"undefined\" ? 0 : start_lc()","title":"Diagram Types"},{"location":"features/lp/plugs/show_file/","text":"@media only screen and (min-width: 76.25em) { .md-main__inner { max-width: none; } .md-sidebar--primary { left: 0; } .md-sidebar--secondary { right: 0; margin-left: 0; -webkit-transform: none; transform: none; } } show_file \u00a4 Cats a file. Parameters \u00a4 fn: filepath Example \u00a4 LP Source: ```jso n lp mode=show_ f ile fn =/ t mp/my f ile.jso n addsrc { \"foo\" : \"bar\" } ``` Result: $ ca t / t mp/my f ile.jso n { \"foo\" : \"bar\" } typeof start_lc === \"undefined\" ? 0 : start_lc()","title":"show_file"},{"location":"features/lp/plugs/show_file/#show_file","text":"Cats a file.","title":"show_file "},{"location":"features/lp/plugs/show_file/#parameters","text":"fn: filepath","title":"Parameters"},{"location":"features/lp/plugs/show_file/#example","text":"LP Source: ```jso n lp mode=show_ f ile fn =/ t mp/my f ile.jso n addsrc { \"foo\" : \"bar\" } ``` Result: $ ca t / t mp/my f ile.jso n { \"foo\" : \"bar\" } typeof start_lc === \"undefined\" ? 0 : start_lc()","title":"Example"},{"location":"features/lp/plugs/show_src/","text":"@media only screen and (min-width: 76.25em) { .md-main__inner { max-width: none; } .md-sidebar--primary { left: 0; } .md-sidebar--secondary { right: 0; margin-left: 0; -webkit-transform: none; transform: none; } } show_src \u00a4 Copies delimitted stanzas within arbitrary files (usually source code) into your docs. Also creates links to those files on the repo server. Format within the source file: :docs:matchstring (no space after the colon) Parameters \u00a4 delim: \"matchstring\" in the example above (without the \":docs:\" prefix). dir: Start directly, relative to repo root dir or absolute path hide: Optional. True or String: will result in collapsed block The plugin uses ripgrep ( rg ) to find matches. Example \u00a4 show_src \u00a4 We included this sentence and the header between match strings.... LP Source: ``` python lp mode = show_src delim = this_example hide = \"This Example\" addsrc dir = src / lcdoc / mkdocs / lp / plugs eval = always ``` Result: This Example Code ### show_src We included this sentence and the header between match strings .... https://github.com/axiros/docutools/blob/master/src/lcdoc/mkdocs/lp/plugs/show_src/docs/index.md#L20 Tip For the shortform you may want to use the lang parameter, to get proper highlighting: `lp:show_src delim=this_example hide=\"This Example\" dir=src/lcdoc/mkdocs/lp/plugs lang=python` typeof start_lc === \"undefined\" ? 0 : start_lc()","title":"show_src"},{"location":"features/lp/plugs/show_src/#show_src","text":"Copies delimitted stanzas within arbitrary files (usually source code) into your docs. Also creates links to those files on the repo server. Format within the source file: :docs:matchstring (no space after the colon)","title":"show_src "},{"location":"features/lp/plugs/show_src/#parameters","text":"delim: \"matchstring\" in the example above (without the \":docs:\" prefix). dir: Start directly, relative to repo root dir or absolute path hide: Optional. True or String: will result in collapsed block The plugin uses ripgrep ( rg ) to find matches.","title":"Parameters"},{"location":"features/lp/plugs/show_src/#example","text":"","title":"Example"},{"location":"features/lp/plugs/show_src/#show_src_1","text":"We included this sentence and the header between match strings.... LP Source: ``` python lp mode = show_src delim = this_example hide = \"This Example\" addsrc dir = src / lcdoc / mkdocs / lp / plugs eval = always ``` Result: This Example Code ### show_src We included this sentence and the header between match strings .... https://github.com/axiros/docutools/blob/master/src/lcdoc/mkdocs/lp/plugs/show_src/docs/index.md#L20 Tip For the shortform you may want to use the lang parameter, to get proper highlighting: `lp:show_src delim=this_example hide=\"This Example\" dir=src/lcdoc/mkdocs/lp/plugs lang=python` typeof start_lc === \"undefined\" ? 0 : start_lc()","title":"show_src"},{"location":"features/lp/python/_index/","text":"@media only screen and (min-width: 76.25em) { .md-main__inner { max-width: none; } .md-sidebar--primary { left: 0; } .md-sidebar--secondary { right: 0; margin-left: 0; -webkit-transform: none; transform: none; } } LP Python Plugin \u00a4 Plugin List lprunner : Via this you can offer the reader of a page to run all or some LP blocks of a page locally on his git_changelog : Creates a changelog (using git-changelog ). data_table : Renders lists into jquery data tables . project_dependencies : Scans a poetry lock file and extracts all project dependencies. cov_report : Inserts a coverage report into the docs set. diag_diagram : Diagram rendering support with svg mode. mpl_pyplot : Matplotlib Support. See here for the vast amount of matplotlib's plotting features. call_flow_logging : Function calling sequence as a plantuml sequence diagram. convert : Creates thumbnails of pdfs, linked to their source and image slideshows from pdfs. screenshot : Creates screenshots for URLs, using chrome-remote-interface comments : Adds a Comments Section, using utteranc.es typeof start_lc === \"undefined\" ? 0 : start_lc()","title":"Overview"},{"location":"features/lp/python/_index/#lp-python-plugin","text":"Plugin List lprunner : Via this you can offer the reader of a page to run all or some LP blocks of a page locally on his git_changelog : Creates a changelog (using git-changelog ). data_table : Renders lists into jquery data tables . project_dependencies : Scans a poetry lock file and extracts all project dependencies. cov_report : Inserts a coverage report into the docs set. diag_diagram : Diagram rendering support with svg mode. mpl_pyplot : Matplotlib Support. See here for the vast amount of matplotlib's plotting features. call_flow_logging : Function calling sequence as a plantuml sequence diagram. convert : Creates thumbnails of pdfs, linked to their source and image slideshows from pdfs. screenshot : Creates screenshots for URLs, using chrome-remote-interface comments : Adds a Comments Section, using utteranc.es typeof start_lc === \"undefined\" ? 0 : start_lc()","title":"LP Python  Plugin"},{"location":"features/lp/python/_tech/","text":"@media only screen and (min-width: 76.25em) { .md-main__inner { max-width: none; } .md-sidebar--primary { left: 0; } .md-sidebar--secondary { right: 0; margin-left: 0; -webkit-transform: none; transform: none; } } Python Plugin Mechanics \u00a4 This exec 's the block within the current python process. Namespace is globals() All LP context available in the ctx dicts Output via print : what is printed on stdout (embedded in fenced code, language python, pformatted if not a plain string) show() : Interpreted as markdown, with rendering support supplied by python plugins . Decide via the language argument (```<language> lp mode=python) what formatting should be applied for fenced output. Features \u00a4 Session Support \u00a4 LP Source: ``` python lp mode = python addsrc new_session = pyexample # fmt not given - then we open and close fenced blocks, based on output mode (print vs show) keys = [ k for k in ctx . keys ()] print ( 'variable `keys` assigned' ) show ( '*The variable is now in session \"pyexample\"*.' ) ``` Result: variable ` keys ` assigned The variable is now in session \"pyexample\" . We can refer to the variable later: LP Source: ``` python lp mode = python addsrc session = pyexample fmt = mk_console # fmt given explicitely - then we show code and result all in one fenced block: print ( keys ) ``` Result: # fmt given explicitely - then we show code and result all in one fenced block: print ( keys ) [ 'DOCU_FILE' , 'DOCU_DIR' , 'DOCU_ROOT' , 'PROJECT_ROOT' , 'mode' , 'addsrc' , 'LP' , 'lang' , 'sourceblock' , 'timeout' , 'fetched_block_fmt' , 'fn_doc' , 'session_name' , 'fmt' , 'id' ] Plugins \u00a4 Plugins are addressed via the show function The rendering of arguments of the show function is based on value and type of the argument. The show function \u00a4 Plugins register match keys and rendering functions, which when key is matching, will render the argument of show Alternatively if the \"key\" is a callable, it will be called with the object to be shown and can decide if returns True - then it's value, the actual rendering function will be called (see e.g. datatables python plugin). You can provide your own python plugins, provided you supply an importable module lp_python_plugins , which, at it's __init__.py , imports all your plugins. Important LP python plugins are not lazily imported. Avoid side effects and expensive code at import time (which you should anyway, always). Rendering Plugin Interface \u00a4 A plugin must provide a register(fmts) function, where fmts is a dict of match keys pointing to plugin specific rendering functions. See e.g. the matplotlib renderer. Syntax \u00a4 Normal form: \u00a4 # in an lp:python block show ( < plugin match > , ** plugin kws ) Short form, w/o kws: \u00a4 `lp:python show=<plugin match>` Ultrashort form, with kws: \u00a4 `lp:python:<match> plugin_kw1=val1 plugin_kw2=val2` Example `lp:python:convert pdf=img/sample.pdf width=200 addsrc` Tips \u00a4 Adding Post Page Hooks \u00a4 Some python plugins want to do sth after the html was rendered. Say we require in a show handler being called back after the html was created, in order to insert js or embed svgs (...): from lcdoc.mkdocs.tools import add_post_page_func add_post_page_func ( python . Session . kw , embed_svgs , once = True ) The LP plugin registers an on_post_page hook, where it checks all such registered functions and calls them in insertion order, with parameters output , page , config . Tip Register a partial if you need more infos from during the show function call time. The hook may return modified html as a string. See the callflow python plugin for details. typeof start_lc === \"undefined\" ? 0 : start_lc()","title":"Mechanics"},{"location":"features/lp/python/_tech/#python-plugin-mechanics","text":"This exec 's the block within the current python process. Namespace is globals() All LP context available in the ctx dicts Output via print : what is printed on stdout (embedded in fenced code, language python, pformatted if not a plain string) show() : Interpreted as markdown, with rendering support supplied by python plugins . Decide via the language argument (```<language> lp mode=python) what formatting should be applied for fenced output.","title":"Python Plugin Mechanics"},{"location":"features/lp/python/_tech/#features","text":"","title":"Features"},{"location":"features/lp/python/_tech/#session-support","text":"LP Source: ``` python lp mode = python addsrc new_session = pyexample # fmt not given - then we open and close fenced blocks, based on output mode (print vs show) keys = [ k for k in ctx . keys ()] print ( 'variable `keys` assigned' ) show ( '*The variable is now in session \"pyexample\"*.' ) ``` Result: variable ` keys ` assigned The variable is now in session \"pyexample\" . We can refer to the variable later: LP Source: ``` python lp mode = python addsrc session = pyexample fmt = mk_console # fmt given explicitely - then we show code and result all in one fenced block: print ( keys ) ``` Result: # fmt given explicitely - then we show code and result all in one fenced block: print ( keys ) [ 'DOCU_FILE' , 'DOCU_DIR' , 'DOCU_ROOT' , 'PROJECT_ROOT' , 'mode' , 'addsrc' , 'LP' , 'lang' , 'sourceblock' , 'timeout' , 'fetched_block_fmt' , 'fn_doc' , 'session_name' , 'fmt' , 'id' ]","title":"Session Support"},{"location":"features/lp/python/_tech/#plugins","text":"Plugins are addressed via the show function The rendering of arguments of the show function is based on value and type of the argument.","title":"Plugins"},{"location":"features/lp/python/_tech/#the-show-function","text":"Plugins register match keys and rendering functions, which when key is matching, will render the argument of show Alternatively if the \"key\" is a callable, it will be called with the object to be shown and can decide if returns True - then it's value, the actual rendering function will be called (see e.g. datatables python plugin). You can provide your own python plugins, provided you supply an importable module lp_python_plugins , which, at it's __init__.py , imports all your plugins. Important LP python plugins are not lazily imported. Avoid side effects and expensive code at import time (which you should anyway, always).","title":"The show function"},{"location":"features/lp/python/_tech/#rendering-plugin-interface","text":"A plugin must provide a register(fmts) function, where fmts is a dict of match keys pointing to plugin specific rendering functions. See e.g. the matplotlib renderer.","title":"Rendering Plugin Interface"},{"location":"features/lp/python/_tech/#syntax","text":"","title":"Syntax"},{"location":"features/lp/python/_tech/#normal-form","text":"# in an lp:python block show ( < plugin match > , ** plugin kws )","title":"Normal form:"},{"location":"features/lp/python/_tech/#short-form-wo-kws","text":"`lp:python show=<plugin match>`","title":"Short form, w/o kws:"},{"location":"features/lp/python/_tech/#ultrashort-form-with-kws","text":"`lp:python:<match> plugin_kw1=val1 plugin_kw2=val2` Example `lp:python:convert pdf=img/sample.pdf width=200 addsrc`","title":"Ultrashort form, with kws:"},{"location":"features/lp/python/_tech/#tips","text":"","title":"Tips"},{"location":"features/lp/python/_tech/#adding-post-page-hooks","text":"Some python plugins want to do sth after the html was rendered. Say we require in a show handler being called back after the html was created, in order to insert js or embed svgs (...): from lcdoc.mkdocs.tools import add_post_page_func add_post_page_func ( python . Session . kw , embed_svgs , once = True ) The LP plugin registers an on_post_page hook, where it checks all such registered functions and calls them in insertion order, with parameters output , page , config . Tip Register a partial if you need more infos from during the show function call time. The hook may return modified html as a string. See the callflow python plugin for details. typeof start_lc === \"undefined\" ? 0 : start_lc()","title":"Adding Post Page Hooks"},{"location":"features/lp/python/call_flow_logging/","text":"@media only screen and (min-width: 76.25em) { .md-main__inner { max-width: none; } .md-sidebar--primary { left: 0; } .md-sidebar--secondary { right: 0; margin-left: 0; -webkit-transform: none; transform: none; } } Callflow Logging \u00a4 Function calling sequence as a plantuml sequence diagram. Experimental Feature Callflow logging is not a wrapper for a 3rd party library but docutools \"native\". It was transferred from another project and the code base contains some legacy. The feature is useable but in a beta state. Mechanics \u00a4 Callflow logging works via the sys.set_trace hook, being invoked at function entry and exit, a feature which also the coverage package uses in order to record code coverage. This implementation here allows to specify which functions, classes, modules should be traced, so that the call flow charts only contain interesting stuff. We record input and exit data plus invokation and exit times. Then we draw plantuml files, incl. links to statically deliverable json files, with more information. Once we have the plantuml files, we create svgs using the kroki plugin. The svg is embedded into the html, in order to get javascript click handlers working. A javascript part takes care for proper formatting within mkdocs and fetching the details on mouse over and click events. See the example. Syntax \u00a4 Add cfl as header parameter, in order to get the LP block written into standalone importable module, created in your build directory. In the show('callflow', call=..., trace=[<list of traced object>]) function call supply the entry function to be wrapped and a number of objects to be traced. These may be modules, classes and functions. You may supply kroki header parameters like server and puml for style, since we call this module to render the created plantuml into an svg. Important Every change of the lp code body will result in new flow charts being created, together with all in and out parameters. That might pile up, so please clear your build dir from time to time and git-ignore it. The docs dir gets a symlink over to the build dir: docs/autodocs . Example \u00a4 We trace the standard lib's json module while calling dumps : LP Source: ``` python lp : python cfl addsrc import json def say_hello ( n ): print ( n ) return json . dumps ({ 'name' : n }) def test_flow (): say_hello ( 'joe' ) show ( 'call_flow' , call = test_flow , trace = json ) ``` Result: joe joe Move the mouse over the arrows and click to see the full data recorded. Call Flow Details You should get details infos like these Ctrl + R (reload) to get back to your original documentation page. Open Seperate Details Window The details window is updated when you move the mose over the call flow: Questions and Comments? var scr = document.createElement('script'); scr.setAttribute('src','https://utteranc.es/client.js'); scr.setAttribute('repo','axiros/docutools'); scr.setAttribute('issue-term','pathname'); scr.setAttribute('theme','github-dark'); scr.setAttribute('crossorigin','anonymous'); document.getElementById('utterance_comments').appendChild(scr); .utterances {max-width: 100% !important} typeof start_lc === \"undefined\" ? 0 : start_lc()","title":"Callflow Logging"},{"location":"features/lp/python/call_flow_logging/#callflow-logging","text":"Function calling sequence as a plantuml sequence diagram. Experimental Feature Callflow logging is not a wrapper for a 3rd party library but docutools \"native\". It was transferred from another project and the code base contains some legacy. The feature is useable but in a beta state.","title":"Callflow  Logging"},{"location":"features/lp/python/call_flow_logging/#mechanics","text":"Callflow logging works via the sys.set_trace hook, being invoked at function entry and exit, a feature which also the coverage package uses in order to record code coverage. This implementation here allows to specify which functions, classes, modules should be traced, so that the call flow charts only contain interesting stuff. We record input and exit data plus invokation and exit times. Then we draw plantuml files, incl. links to statically deliverable json files, with more information. Once we have the plantuml files, we create svgs using the kroki plugin. The svg is embedded into the html, in order to get javascript click handlers working. A javascript part takes care for proper formatting within mkdocs and fetching the details on mouse over and click events. See the example.","title":"Mechanics"},{"location":"features/lp/python/call_flow_logging/#syntax","text":"Add cfl as header parameter, in order to get the LP block written into standalone importable module, created in your build directory. In the show('callflow', call=..., trace=[<list of traced object>]) function call supply the entry function to be wrapped and a number of objects to be traced. These may be modules, classes and functions. You may supply kroki header parameters like server and puml for style, since we call this module to render the created plantuml into an svg. Important Every change of the lp code body will result in new flow charts being created, together with all in and out parameters. That might pile up, so please clear your build dir from time to time and git-ignore it. The docs dir gets a symlink over to the build dir: docs/autodocs .","title":"Syntax"},{"location":"features/lp/python/call_flow_logging/#example","text":"We trace the standard lib's json module while calling dumps : LP Source: ``` python lp : python cfl addsrc import json def say_hello ( n ): print ( n ) return json . dumps ({ 'name' : n }) def test_flow (): say_hello ( 'joe' ) show ( 'call_flow' , call = test_flow , trace = json ) ``` Result: joe joe Move the mouse over the arrows and click to see the full data recorded. Call Flow Details You should get details infos like these Ctrl + R (reload) to get back to your original documentation page. Open Seperate Details Window The details window is updated when you move the mose over the call flow: Questions and Comments? var scr = document.createElement('script'); scr.setAttribute('src','https://utteranc.es/client.js'); scr.setAttribute('repo','axiros/docutools'); scr.setAttribute('issue-term','pathname'); scr.setAttribute('theme','github-dark'); scr.setAttribute('crossorigin','anonymous'); document.getElementById('utterance_comments').appendChild(scr); .utterances {max-width: 100% !important} typeof start_lc === \"undefined\" ? 0 : start_lc()","title":"Example"},{"location":"features/lp/python/comments/","text":"@media only screen and (min-width: 76.25em) { .md-main__inner { max-width: none; } .md-sidebar--primary { left: 0; } .md-sidebar--secondary { right: 0; margin-left: 0; -webkit-transform: none; transform: none; } } Comments \u00a4 Adds a Comments Section, using utteranc.es The comments are hosted by github issues and fetched via a central bot at utteranc.es . Important Based on a central bot Works for public repos hosted on github exclusively . Features \u00a4 Supports mkdocs materials' navigation.instant , i.e. comments sections are (re-)loaded on nav clicks. Supports hiding the comments within collapsed details sections Syntax \u00a4 `lp:python show=comments` Parameters \u00a4 Code 'theme' : 'github-dark' , # \"github-light\" \"github-dark\" \"preferred-color-scheme\" \"github-dark-orange\" \"icy-dark\" \"dark-blue\" \"photon-dark\" \"boxy-light\" 'issue_term' : 'pathname' , # url, title, og:title (specific issue number and title not supported) https://github.com/axiros/docutools/blob/master/src/lcdoc/mkdocs/lp/plugs/python/pyplugs/comments/__init__.py#L12 Example \u00a4 Code: ??? \"Questions and Comments?\" `lp:python show=comments eval=always` Renders: Questions and Comments? var scr = document.createElement('script'); scr.setAttribute('src','https://utteranc.es/client.js'); scr.setAttribute('repo','axiros/docutools'); scr.setAttribute('issue-term','pathname'); scr.setAttribute('theme','github-dark'); scr.setAttribute('crossorigin','anonymous'); document.getElementById('utterance_comments').appendChild(scr); .utterances {max-width: 100% !important} typeof start_lc === \"undefined\" ? 0 : start_lc()","title":"Comments"},{"location":"features/lp/python/comments/#comments","text":"Adds a Comments Section, using utteranc.es The comments are hosted by github issues and fetched via a central bot at utteranc.es . Important Based on a central bot Works for public repos hosted on github exclusively .","title":"Comments "},{"location":"features/lp/python/comments/#features","text":"Supports mkdocs materials' navigation.instant , i.e. comments sections are (re-)loaded on nav clicks. Supports hiding the comments within collapsed details sections","title":"Features"},{"location":"features/lp/python/comments/#syntax","text":"`lp:python show=comments`","title":"Syntax"},{"location":"features/lp/python/comments/#parameters","text":"Code 'theme' : 'github-dark' , # \"github-light\" \"github-dark\" \"preferred-color-scheme\" \"github-dark-orange\" \"icy-dark\" \"dark-blue\" \"photon-dark\" \"boxy-light\" 'issue_term' : 'pathname' , # url, title, og:title (specific issue number and title not supported) https://github.com/axiros/docutools/blob/master/src/lcdoc/mkdocs/lp/plugs/python/pyplugs/comments/__init__.py#L12","title":"Parameters"},{"location":"features/lp/python/comments/#example","text":"Code: ??? \"Questions and Comments?\" `lp:python show=comments eval=always` Renders: Questions and Comments? var scr = document.createElement('script'); scr.setAttribute('src','https://utteranc.es/client.js'); scr.setAttribute('repo','axiros/docutools'); scr.setAttribute('issue-term','pathname'); scr.setAttribute('theme','github-dark'); scr.setAttribute('crossorigin','anonymous'); document.getElementById('utterance_comments').appendChild(scr); .utterances {max-width: 100% !important} typeof start_lc === \"undefined\" ? 0 : start_lc()","title":"Example"},{"location":"features/lp/python/convert/","text":"[data-md-color-scheme=\"slate\"] .featherlight .featherlight-content { background: #2e303e; } [data-md-color-scheme=\"slate\"] .featherlight .featherlight-close-icon { background: rgba(255,255,255,.3); color: #fff; } .featherlight .featherlight-content { min-width: 60% !important; } function next_elmt_into_lightbox(id, event) { let btn=document.getElementById(id); let parent = btn.parentNode; function flclose(event) { let c = this.$content[0]; $(parent).after(c); } let el = parent.nextElementSibling; $.featherlight({jquery: el, persist: true, beforeClose: flclose}) } .button-lightbox { color: var(--md-default-fg-color--lighter); }.button-lightbox:hover { color: var(--md-default-fg-color--light); } @media only screen and (min-width: 76.25em) { .md-main__inner { max-width: none; } .md-sidebar--primary { left: 0; } .md-sidebar--secondary { right: 0; margin-left: 0; -webkit-transform: none; transform: none; } } Image Convert \u00a4 Creates thumbnails of pdfs, linked to their source and image slideshows from pdfs. This is the current feature set. Parameters \u00a4 Code # Set png=img/foo.png in order to keep the produced pngs within the docs dir: # pages: whatever is accepted by convert. E.g. 0-4. 0=first page dflts = dict ( width = 400 , pages = 0 , thumbwidth = 200 ) https://github.com/axiros/docutools/blob/master/src/lcdoc/mkdocs/lp/plugs/python/pyplugs/convert/__init__.py#L16 Thumbnails \u00a4 When you specify only one page to be converted, we'll create a thumbnail for the pdf link: LP Source: ``` python lp : python addsrc show ( 'convert' , pdf = 'img/sample.pdf' , xpng = 'img/my_sample.png' , width = 100 ) # implicit: pages=0 ``` Result: or using the more concise LP Source (shortform): `lp:python:convert pdf=img/sample.pdf width=200 pages=2 addsrc` Result: Slideshow \u00a4 When you specify more than one pages to be converted, we'll create a slideshow, incl. a lightbox. LP Source (shortform): `lp:python:convert pdf=img/sample.pdf width=1000 thumbwidth=200 pages=0-4 addsrc` Result: sample.pdf Requirements \u00a4 You need to have imagemagick 1 installed ( convert command available). Tip If you use conda for your virtual env, you have it, w/o root, via conda install -c conda-forge imagemagick Copyright: \u00a9 1999-2020 ImageMagick Studio LLC \u21a9 $('.pdf-slides img').featherlightGallery({ nextIcon: '\u00bb', previousIcon: '\u00ab', openSpeed: 300, galleryFadeIn: 300, targetAttr: 'src' }); $('.pdf-slides img').css('cursor', 'zoom-in'); typeof start_lc === \"undefined\" ? 0 : start_lc()","title":"Image Convert"},{"location":"features/lp/python/convert/#image-convert","text":"Creates thumbnails of pdfs, linked to their source and image slideshows from pdfs. This is the current feature set.","title":"Image Convert "},{"location":"features/lp/python/convert/#parameters","text":"Code # Set png=img/foo.png in order to keep the produced pngs within the docs dir: # pages: whatever is accepted by convert. E.g. 0-4. 0=first page dflts = dict ( width = 400 , pages = 0 , thumbwidth = 200 ) https://github.com/axiros/docutools/blob/master/src/lcdoc/mkdocs/lp/plugs/python/pyplugs/convert/__init__.py#L16","title":"Parameters"},{"location":"features/lp/python/convert/#thumbnails","text":"When you specify only one page to be converted, we'll create a thumbnail for the pdf link: LP Source: ``` python lp : python addsrc show ( 'convert' , pdf = 'img/sample.pdf' , xpng = 'img/my_sample.png' , width = 100 ) # implicit: pages=0 ``` Result: or using the more concise LP Source (shortform): `lp:python:convert pdf=img/sample.pdf width=200 pages=2 addsrc` Result:","title":"Thumbnails"},{"location":"features/lp/python/convert/#slideshow","text":"When you specify more than one pages to be converted, we'll create a slideshow, incl. a lightbox. LP Source (shortform): `lp:python:convert pdf=img/sample.pdf width=1000 thumbwidth=200 pages=0-4 addsrc` Result: sample.pdf","title":"Slideshow"},{"location":"features/lp/python/convert/#requirements","text":"You need to have imagemagick 1 installed ( convert command available). Tip If you use conda for your virtual env, you have it, w/o root, via conda install -c conda-forge imagemagick Copyright: \u00a9 1999-2020 ImageMagick Studio LLC \u21a9 $('.pdf-slides img').featherlightGallery({ nextIcon: '\u00bb', previousIcon: '\u00ab', openSpeed: 300, galleryFadeIn: 300, targetAttr: 'src' }); $('.pdf-slides img').css('cursor', 'zoom-in'); typeof start_lc === \"undefined\" ? 0 : start_lc()","title":"Requirements"},{"location":"features/lp/python/cov_report/","text":"[data-md-color-scheme=\"slate\"] .featherlight .featherlight-content { background: #2e303e; } [data-md-color-scheme=\"slate\"] .featherlight .featherlight-close-icon { background: rgba(255,255,255,.3); color: #fff; } .featherlight .featherlight-content { min-width: 60% !important; } function next_elmt_into_lightbox(id, event) { let btn=document.getElementById(id); let parent = btn.parentNode; function flclose(event) { let c = this.$content[0]; $(parent).after(c); } let el = parent.nextElementSibling; $.featherlight({jquery: el, persist: true, beforeClose: flclose}) } .button-lightbox { color: var(--md-default-fg-color--lighter); }.button-lightbox:hover { color: var(--md-default-fg-color--light); } @media only screen and (min-width: 76.25em) { .md-main__inner { max-width: none; } .md-sidebar--primary { left: 0; } .md-sidebar--secondary { right: 0; margin-left: 0; -webkit-transform: none; transform: none; } } Coverage Report \u00a4 Inserts a coverage report into the docs set. Based on pawamoy 's work. LP Header Syntax: bash lp mode=cov_report [dir=<report dir>] The report must exist in the file system at evaluation time at dir parameter or $d_cover_html env var Features: \u00a4 While LP blocks are running, the LP plugin creates a coverage context , with the current markdown file. When the lp plugin has a non empty config value for coverage_backrefs , a link will be created back to the markdown source with the lp block. Example \u00a4 Mechanics \u00a4 How to create coverage reports in general: See the coverage setup in this repo's make file. At CI/CD , make tests and make docs are run, both creating their coverage data file. make cover combines them and creates the html report. Finally at mkdocs gh-deploy time, the html report is copied over to the site directory, so that it is present in the docu build. $('.md-content img').featherlightGallery({ nextIcon: '\u00bb', previousIcon: '\u00ab', openSpeed: 300, galleryFadeIn: 300, targetAttr: 'src' }); $('.md-content img').css('cursor', 'zoom-in'); typeof start_lc === \"undefined\" ? 0 : start_lc()","title":"Coverage Report"},{"location":"features/lp/python/cov_report/#coverage-report","text":"Inserts a coverage report into the docs set. Based on pawamoy 's work. LP Header Syntax: bash lp mode=cov_report [dir=<report dir>] The report must exist in the file system at evaluation time at dir parameter or $d_cover_html env var","title":"Coverage  Report"},{"location":"features/lp/python/cov_report/#features","text":"While LP blocks are running, the LP plugin creates a coverage context , with the current markdown file. When the lp plugin has a non empty config value for coverage_backrefs , a link will be created back to the markdown source with the lp block.","title":"Features:"},{"location":"features/lp/python/cov_report/#example","text":"","title":"Example"},{"location":"features/lp/python/cov_report/#mechanics","text":"How to create coverage reports in general: See the coverage setup in this repo's make file. At CI/CD , make tests and make docs are run, both creating their coverage data file. make cover combines them and creates the html report. Finally at mkdocs gh-deploy time, the html report is copied over to the site directory, so that it is present in the docu build. $('.md-content img').featherlightGallery({ nextIcon: '\u00bb', previousIcon: '\u00ab', openSpeed: 300, galleryFadeIn: 300, targetAttr: 'src' }); $('.md-content img').css('cursor', 'zoom-in'); typeof start_lc === \"undefined\" ? 0 : start_lc()","title":"Mechanics"},{"location":"features/lp/python/data_table/","text":"td.dt-control { background: url(\"https://www.datatables.net/examples/resources/details_open.png\") no-repeat center center; cursor: pointer; } tr.dt-hasChild td.dt-control { background: url(\"https://www.datatables.net/examples/resources/details_close.png\") no-repeat center center; } table.dataTable th.dt-left, table.dataTable td.dt-left { text-align: left; } table.dataTable th.dt-center, table.dataTable td.dt-center, table.dataTable td.dataTables_empty { text-align: center; } table.dataTable th.dt-right, table.dataTable td.dt-right { text-align: right; } table.dataTable th.dt-justify, table.dataTable td.dt-justify { text-align: justify; } table.dataTable th.dt-nowrap, table.dataTable td.dt-nowrap { white-space: nowrap; } table.dataTable thead th.dt-head-left, table.dataTable thead td.dt-head-left, table.dataTable tfoot th.dt-head-left, table.dataTable tfoot td.dt-head-left { text-align: left; } table.dataTable thead th.dt-head-center, table.dataTable thead td.dt-head-center, table.dataTable tfoot th.dt-head-center, table.dataTable tfoot td.dt-head-center { text-align: center; } table.dataTable thead th.dt-head-right, table.dataTable thead td.dt-head-right, table.dataTable tfoot th.dt-head-right, table.dataTable tfoot td.dt-head-right { text-align: right; } table.dataTable thead th.dt-head-justify, table.dataTable thead td.dt-head-justify, table.dataTable tfoot th.dt-head-justify, table.dataTable tfoot td.dt-head-justify { text-align: justify; } table.dataTable thead th.dt-head-nowrap, table.dataTable thead td.dt-head-nowrap, table.dataTable tfoot th.dt-head-nowrap, table.dataTable tfoot td.dt-head-nowrap { white-space: nowrap; } table.dataTable tbody th.dt-body-left, table.dataTable tbody td.dt-body-left { text-align: left; } table.dataTable tbody th.dt-body-center, table.dataTable tbody td.dt-body-center { text-align: center; } table.dataTable tbody th.dt-body-right, table.dataTable tbody td.dt-body-right { text-align: right; } table.dataTable tbody th.dt-body-justify, table.dataTable tbody td.dt-body-justify { text-align: justify; } table.dataTable tbody th.dt-body-nowrap, table.dataTable tbody td.dt-body-nowrap { white-space: nowrap; } /* * Table styles */ table.dataTable { width: 100%; margin: 0 auto; clear: both; border-collapse: separate; border-spacing: 0; /* * Header and footer styles */ /* * Body styles */ } table.dataTable thead th, table.dataTable tfoot th { font-weight: bold; } table.dataTable thead th, table.dataTable thead td { padding: 10px 18px; border-bottom: 1px solid #111; } table.dataTable thead th:active, table.dataTable thead td:active { outline: none; } table.dataTable tfoot th, table.dataTable tfoot td { padding: 10px 18px 6px 18px; border-top: 1px solid #111; } table.dataTable thead .sorting, table.dataTable thead .sorting_asc, table.dataTable thead .sorting_desc, table.dataTable thead .sorting_asc_disabled, table.dataTable thead .sorting_desc_disabled { cursor: pointer; *cursor: hand; background-repeat: no-repeat; background-position: center right; } table.dataTable thead .sorting { background-image: url(\"../images/sort_both.png\"); } table.dataTable thead .sorting_asc { background-image: url(\"../images/sort_asc.png\") !important; } table.dataTable thead .sorting_desc { background-image: url(\"../images/sort_desc.png\") !important; } table.dataTable thead .sorting_asc_disabled { background-image: url(\"../images/sort_asc_disabled.png\"); } table.dataTable thead .sorting_desc_disabled { background-image: url(\"../images/sort_desc_disabled.png\"); } table.dataTable tbody tr { background-xcolor: #ffffff; } table.dataTable tbody tr.selected { background-xcolor: #gray; } table.dataTable tbody th, table.dataTable tbody td { padding: 8px 10px; } table.dataTable.row-border tbody th, table.dataTable.row-border tbody td, table.dataTable.display tbody th, table.dataTable.display tbody td { border-top: 1px solid #ddd; } table.dataTable.row-border tbody tr:first-child th, table.dataTable.row-border tbody tr:first-child td, table.dataTable.display tbody tr:first-child th, table.dataTable.display tbody tr:first-child td { border-top: none; } table.dataTable.cell-border tbody th, table.dataTable.cell-border tbody td { border-top: 1px solid #ddd; border-right: 1px solid #ddd; } table.dataTable.cell-border tbody tr th:first-child, table.dataTable.cell-border tbody tr td:first-child { border-left: 1px solid #ddd; } table.dataTable.cell-border tbody tr:first-child th, table.dataTable.cell-border tbody tr:first-child td { border-top: none; } table.dataTable.stripe tbody tr.odd, table.dataTable.display tbody tr.odd { background: rgba(0,0,0,0.1); opacity(0); } table.dataTable.stripe tbody tr.odd.selected, table.dataTable.display tbody tr.odd.selected { background: rgba(0,0,0,0.2); opacity(0); } table.dataTable.hover tbody tr:hover, table.dataTable.display tbody tr:hover { background: rgba(0,0,0,0.3); opacity(0); } table.dataTable.hover tbody tr:hover.selected, table.dataTable.display tbody tr:hover.selected { background-xcolor: #aab7d1; } table.dataTable.order-column tbody tr > .sorting_1, table.dataTable.order-column tbody tr > .sorting_2, table.dataTable.order-column tbody tr > .sorting_3, table.dataTable.display tbody tr > .sorting_1, table.dataTable.display tbody tr > .sorting_2, table.dataTable.display tbody tr > .sorting_3 { background-xcolor: #fafafa; } table.dataTable.order-column tbody tr.selected > .sorting_1, table.dataTable.order-column tbody tr.selected > .sorting_2, table.dataTable.order-column tbody tr.selected > .sorting_3, table.dataTable.display tbody tr.selected > .sorting_1, table.dataTable.display tbody tr.selected > .sorting_2, table.dataTable.display tbody tr.selected > .sorting_3 { background-xcolor: #acbad5; } table.dataTable.display tbody tr.odd > .sorting_1, table.dataTable.order-column.stripe tbody tr.odd > .sorting_1 { background-xcolor: #f1f1f1; } table.dataTable.display tbody tr.odd > .sorting_2, table.dataTable.order-column.stripe tbody tr.odd > .sorting_2 { background-xcolor: #f3f3f3; } table.dataTable.display tbody tr.odd > .sorting_3, table.dataTable.order-column.stripe tbody tr.odd > .sorting_3 { background-xcolor: whitesmoke; } table.dataTable.display tbody tr.odd.selected > .sorting_1, table.dataTable.order-column.stripe tbody tr.odd.selected > .sorting_1 { background-xcolor: #a6b4cd; } table.dataTable.display tbody tr.odd.selected > .sorting_2, table.dataTable.order-column.stripe tbody tr.odd.selected > .sorting_2 { background-xcolor: #a8b5cf; } table.dataTable.display tbody tr.odd.selected > .sorting_3, table.dataTable.order-column.stripe tbody tr.odd.selected > .sorting_3 { background-xcolor: #a9b7d1; } table.dataTable.display tbody tr.even > .sorting_1, table.dataTable.order-column.stripe tbody tr.even > .sorting_1 { background-xcolor: #fafafa; } table.dataTable.display tbody tr.even > .sorting_2, table.dataTable.order-column.stripe tbody tr.even > .sorting_2 { background-xcolor: #fcfcfc; } table.dataTable.display tbody tr.even > .sorting_3, table.dataTable.order-column.stripe tbody tr.even > .sorting_3 { background-xcolor: #fefefe; } table.dataTable.display tbody tr.even.selected > .sorting_1, table.dataTable.order-column.stripe tbody tr.even.selected > .sorting_1 { background-xcolor: #acbad5; } table.dataTable.display tbody tr.even.selected > .sorting_2, table.dataTable.order-column.stripe tbody tr.even.selected > .sorting_2 { background-xcolor: #aebcd6; } table.dataTable.display tbody tr.even.selected > .sorting_3, table.dataTable.order-column.stripe tbody tr.even.selected > .sorting_3 { background-xcolor: #afbdd8; } table.dataTable.display tbody tr:hover > .sorting_1, table.dataTable.order-column.hover tbody tr:hover > .sorting_1 { background-xcolor: #eaeaea; } table.dataTable.display tbody tr:hover > .sorting_2, table.dataTable.order-column.hover tbody tr:hover > .sorting_2 { background-xcolor: #ececec; } table.dataTable.display tbody tr:hover > .sorting_3, table.dataTable.order-column.hover tbody tr:hover > .sorting_3 { background-xcolor: #efefef; } table.dataTable.display tbody tr:hover.selected > .sorting_1, table.dataTable.order-column.hover tbody tr:hover.selected > .sorting_1 { background-xcolor: #a2aec7; } table.dataTable.display tbody tr:hover.selected > .sorting_2, table.dataTable.order-column.hover tbody tr:hover.selected > .sorting_2 { background-xcolor: #a3b0c9; } table.dataTable.display tbody tr:hover.selected > .sorting_3, table.dataTable.order-column.hover tbody tr:hover.selected > .sorting_3 { background-xcolor: #a5b2cb; } table.dataTable.no-footer { border-bottom: 1px solid #111; } table.dataTable.nowrap th, table.dataTable.nowrap td { white-space: nowrap; } table.dataTable.compact thead th, table.dataTable.compact thead td { padding: 4px 17px; } table.dataTable.compact tfoot th, table.dataTable.compact tfoot td { padding: 4px; } table.dataTable.compact tbody th, table.dataTable.compact tbody td { padding: 4px; } table.dataTable th, table.dataTable td { box-sizing: content-box; } /* * Control feature layout */ .dataTables_wrapper { position: relative; clear: both; } .dataTables_wrapper .dataTables_length { float: left; } .dataTables_wrapper .dataTables_length select { border: 1px solid #aaa; border-radius: 3px; padding: 5px; background-xcolor: transparent; padding: 4px; } .dataTables_wrapper .dataTables_filter { float: right; text-align: right; } .dataTables_wrapper .dataTables_filter input { border: 1px solid #aaa; border-radius: 3px; padding: 5px; background-color: transparent; margin-left: 3px; } .dataTables_wrapper .dataTables_info { clear: both; float: left; padding-top: 0.755em; } .dataTables_wrapper .dataTables_paginate { float: right; text-align: right; padding-top: 0.25em; } .dataTables_wrapper .dataTables_paginate .paginate_button { box-sizing: border-box; display: inline-block; min-width: 1.5em; padding: 0.5em 1em; margin-left: 2px; text-align: center; text-decoration: none !important; cursor: pointer; *cursor: hand; xcolor: #333 !important; border: 1px solid transparent; border-radius: 2px; } .dataTables_wrapper .dataTables_paginate .paginate_button.current, .dataTables_wrapper .dataTables_paginate .paginate_button.current:hover { color: #333 !important; border: 1px solid #979797; background-xcolor: white; background: -webkit-gradient( linear, left top, left bottom, xcolor-stop(0%, white), xcolor-stop(100%, #dcdcdc) ); /* Chrome,Safari4+ */ background: -webkit-linear-gradient(top, white 0%, #dcdcdc 100%); /* Chrome10+,Safari5.1+ */ background: -moz-linear-gradient(top, white 0%, #dcdcdc 100%); /* FF3.6+ */ background: -ms-linear-gradient(top, white 0%, #dcdcdc 100%); /* IE10+ */ background: -o-linear-gradient(top, white 0%, #dcdcdc 100%); /* Opera 11.10+ */ background: linear-gradient(to bottom, white 0%, #dcdcdc 100%); /* W3C */ } .dataTables_wrapper .dataTables_paginate .paginate_button.disabled, .dataTables_wrapper .dataTables_paginate .paginate_button.disabled:hover, .dataTables_wrapper .dataTables_paginate .paginate_button.disabled:active { cursor: default; xcolor: #666 !important; border: 1px solid transparent; background: transparent; box-shadow: none; } .dataTables_wrapper .dataTables_paginate .paginate_button:hover { xcolor: white !important; border: 1px solid #111; background-xcolor: #585858; background: -webkit-gradient( linear, left top, left bottom, xcolor-stop(0%, #585858), xcolor-stop(100%, #111) ); /* Chrome,Safari4+ */ background: -webkit-linear-gradient(top, #585858 0%, #111 100%); /* Chrome10+,Safari5.1+ */ background: -moz-linear-gradient(top, #585858 0%, #111 100%); /* FF3.6+ */ background: -ms-linear-gradient(top, #585858 0%, #111 100%); /* IE10+ */ background: -o-linear-gradient(top, #585858 0%, #111 100%); /* Opera 11.10+ */ background: linear-gradient(to bottom, #585858 0%, #111 100%); /* W3C */ } .dataTables_wrapper .dataTables_paginate .paginate_button:active { outline: none; background-xcolor: #2b2b2b; background: -webkit-gradient( linear, left top, left bottom, xcolor-stop(0%, #2b2b2b), xcolor-stop(100%, #0c0c0c) ); /* Chrome,Safari4+ */ background: -webkit-linear-gradient(top, #2b2b2b 0%, #0c0c0c 100%); /* Chrome10+,Safari5.1+ */ background: -moz-linear-gradient(top, #2b2b2b 0%, #0c0c0c 100%); /* FF3.6+ */ background: -ms-linear-gradient(top, #2b2b2b 0%, #0c0c0c 100%); /* IE10+ */ background: -o-linear-gradient(top, #2b2b2b 0%, #0c0c0c 100%); /* Opera 11.10+ */ background: linear-gradient(to bottom, #2b2b2b 0%, #0c0c0c 100%); /* W3C */ box-shadow: inset 0 0 3px #111; } .dataTables_wrapper .dataTables_paginate .ellipsis { padding: 0 1em; } .dataTables_wrapper .dataTables_processing { position: absolute; top: 50%; left: 50%; width: 100%; height: 40px; margin-left: -50%; margin-top: -25px; padding-top: 20px; text-align: center; font-size: 1.2em; background-xcolor: white; background: -webkit-gradient( linear, left top, right top, xcolor-stop(0%, rgba(255, 255, 255, 0)), xcolor-stop(25%, rgba(255, 255, 255, 0.9)), xcolor-stop(75%, rgba(255, 255, 255, 0.9)), xcolor-stop(100%, rgba(255, 255, 255, 0)) ); background: -webkit-linear-gradient( left, rgba(255, 255, 255, 0) 0%, rgba(255, 255, 255, 0.9) 25%, rgba(255, 255, 255, 0.9) 75%, rgba(255, 255, 255, 0) 100% ); background: -moz-linear-gradient( left, rgba(255, 255, 255, 0) 0%, rgba(255, 255, 255, 0.9) 25%, rgba(255, 255, 255, 0.9) 75%, rgba(255, 255, 255, 0) 100% ); background: -ms-linear-gradient( left, rgba(255, 255, 255, 0) 0%, rgba(255, 255, 255, 0.9) 25%, rgba(255, 255, 255, 0.9) 75%, rgba(255, 255, 255, 0) 100% ); background: -o-linear-gradient( left, rgba(255, 255, 255, 0) 0%, rgba(255, 255, 255, 0.9) 25%, rgba(255, 255, 255, 0.9) 75%, rgba(255, 255, 255, 0) 100% ); background: linear-gradient( to right, rgba(255, 255, 255, 0) 0%, rgba(255, 255, 255, 0.9) 25%, rgba(255, 255, 255, 0.9) 75%, rgba(255, 255, 255, 0) 100% ); } .dataTables_wrapper .dataTables_length, .dataTables_wrapper .dataTables_filter, .dataTables_wrapper .dataTables_info, .dataTables_wrapper .dataTables_processing, .dataTables_wrapper .dataTables_paginate { xcolor: #333; } .dataTables_wrapper .dataTables_scroll { clear: both; } .dataTables_wrapper .dataTables_scroll div.dataTables_scrollBody { *margin-top: -1px; -webkit-overflow-scrolling: touch; } .dataTables_wrapper .dataTables_scroll div.dataTables_scrollBody > table > thead > tr > th, .dataTables_wrapper .dataTables_scroll div.dataTables_scrollBody > table > thead > tr > td, .dataTables_wrapper .dataTables_scroll div.dataTables_scrollBody > table > tbody > tr > th, .dataTables_wrapper .dataTables_scroll div.dataTables_scrollBody > table > tbody > tr > td { vertical-align: middle; } .dataTables_wrapper .dataTables_scroll div.dataTables_scrollBody > table > thead > tr > th > div.dataTables_sizing, .dataTables_wrapper .dataTables_scroll div.dataTables_scrollBody > table > thead > tr > td > div.dataTables_sizing, .dataTables_wrapper .dataTables_scroll div.dataTables_scrollBody > table > tbody > tr > th > div.dataTables_sizing, .dataTables_wrapper .dataTables_scroll div.dataTables_scrollBody > table > tbody > tr > td > div.dataTables_sizing { height: 0; overflow: hidden; margin: 0 !important; padding: 0 !important; } .dataTables_wrapper.no-footer .dataTables_scrollBody { border-bottom: 1px solid #111; } .dataTables_wrapper.no-footer div.dataTables_scrollHead table.dataTable, .dataTables_wrapper.no-footer div.dataTables_scrollBody > table { border-bottom: none; } .dataTables_wrapper:after { visibility: hidden; display: block; content: \"\"; clear: both; height: 0; } @media screen and (max-width: 767px) { .dataTables_wrapper .dataTables_info, .dataTables_wrapper .dataTables_paginate { float: none; text-align: center; } .dataTables_wrapper .dataTables_paginate { margin-top: 0.5em; } } @media screen and (max-width: 640px) { .dataTables_wrapper .dataTables_length, .dataTables_wrapper .dataTables_filter { float: none; text-align: center; } .dataTables_wrapper .dataTables_filter { margin-top: 0.5em; } } @media only screen and (min-width: 76.25em) { .md-main__inner { max-width: none; } .md-sidebar--primary { left: 0; } .md-sidebar--secondary { right: 0; margin-left: 0; -webkit-transform: none; transform: none; } } DataTable Rendering Support \u00a4 Renders lists into jquery data tables . Use Case \u00a4 Say you have some data: Data Example Source [[ 'Tiger Nixon' , 'System Architect' , 'Edinburgh' , '5421' , '2011/04/25' , '$320,800' ], [ 'Garrett Winters' , 'Accountant' , 'Tokyo' , '8422' , '2011/07/25' , '$170,750' ], [ 'Ashton Cox' , 'Junior Technical Author' , 'San Francisco' , '1562' , '2009/01/12' , '$86,000' ]] ... ``` python lp : python addsrc = \"Data Example\" session = datatbl data = [ [ \"Tiger Nixon\" , \"System Architect\" , \"Edinburgh\" , \"5421\" , \"2011/04/25\" , \"$320,800\" ], [ \"Garrett Winters\" , \"Accountant\" , \"Tokyo\" , \"8422\" , \"2011/07/25\" , \"$170,750\" ], [ \"Ashton Cox\" , \"Junior Technical Author\" , \"San Francisco\" , \"1562\" , \"2009/01/12\" , \"$86,000\" ], [ \"Cedric Kelly\" , \"Senior Javascript Developer\" , \"Edinburgh\" , \"6224\" , \"2012/03/29\" , \"$433,060\" ], [ \"Airi Satou\" , \"Accountant\" , \"Tokyo\" , \"5407\" , \"2008/11/28\" , \"$162,700\" ], [ \"Brielle Williamson\" , \"Integration Specialist\" , \"New York\" , \"4804\" , \"2012/12/02\" , \"$372,000\" ], [ \"Herrod Chandler\" , \"Sales Assistant\" , \"San Francisco\" , \"9608\" , \"2012/08/06\" , \"$137,500\" ], [ \"Rhona Davidson\" , \"Integration Specialist\" , \"Tokyo\" , \"6200\" , \"2010/10/14\" , \"$327,900\" ], [ \"Colleen Hurst\" , \"Javascript Developer\" , \"San Francisco\" , \"2360\" , \"2009/09/15\" , \"$205,500\" ], [ \"Sonya Frost\" , \"Software Engineer\" , \"Edinburgh\" , \"1667\" , \"2008/12/13\" , \"$103,600\" ], [ \"Jena Gaines\" , \"Office Manager\" , \"London\" , \"3814\" , \"2008/12/19\" , \"$90,560\" ], [ \"Quinn Flynn\" , \"Support Lead\" , \"Edinburgh\" , \"9497\" , \"2013/03/03\" , \"$342,000\" ], [ \"Charde Marshall\" , \"Regional Director\" , \"San Francisco\" , \"6741\" , \"2008/10/16\" , \"$470,600\" ], [ \"Haley Kennedy\" , \"Senior Marketing Designer\" , \"London\" , \"3597\" , \"2012/12/18\" , \"$313,500\" ], [ \"Tatyana Fitzpatrick\" , \"Regional Director\" , \"London\" , \"1965\" , \"2010/03/17\" , \"$385,750\" ], [ \"Michael Silva\" , \"Marketing Designer\" , \"London\" , \"1581\" , \"2012/11/27\" , \"$198,500\" ], [ \"Paul Byrd\" , \"Chief Financial Officer (CFO)\" , \"New York\" , \"3059\" , \"2010/06/09\" , \"$725,000\" ], [ \"Gloria Little\" , \"Systems Administrator\" , \"New York\" , \"1721\" , \"2009/04/10\" , \"$237,500\" ], [ \"Bradley Greer\" , \"Software Engineer\" , \"London\" , \"2558\" , \"2012/10/13\" , \"$132,000\" ], [ \"Dai Rios\" , \"Personnel Lead\" , \"Edinburgh\" , \"2290\" , \"2012/09/26\" , \"$217,500\" ], [ \"Jenette Caldwell\" , \"Development Lead\" , \"New York\" , \"1937\" , \"2011/09/03\" , \"$345,000\" ], [ \"Yuri Berry\" , \"Chief Marketing Officer (CMO)\" , \"New York\" , \"6154\" , \"2009/06/25\" , \"$675,000\" ], [ \"Caesar Vance\" , \"Pre-Sales Support\" , \"New York\" , \"8330\" , \"2011/12/12\" , \"$106,450\" ], [ \"Doris Wilder\" , \"Sales Assistant\" , \"Sydney\" , \"3023\" , \"2010/09/20\" , \"$85,600\" ], [ \"Angelica Ramos\" , \"Chief Executive Officer (CEO)\" , \"London\" , \"5797\" , \"2009/10/09\" , \"$1,200,000\" ], [ \"Gavin Joyce\" , \"Developer\" , \"Edinburgh\" , \"8822\" , \"2010/12/22\" , \"$92,575\" ], [ \"Jennifer Chang\" , \"Regional Director\" , \"Singapore\" , \"9239\" , \"2010/11/14\" , \"$357,650\" ], [ \"Brenden Wagner\" , \"Software Engineer\" , \"San Francisco\" , \"1314\" , \"2011/06/07\" , \"$206,850\" ], [ \"Fiona Green\" , \"Chief Operating Officer (COO)\" , \"San Francisco\" , \"2947\" , \"2010/03/11\" , \"$850,000\" ], [ \"Shou Itou\" , \"Regional Marketing\" , \"Tokyo\" , \"8899\" , \"2011/08/14\" , \"$163,000\" ], [ \"Michelle House\" , \"Integration Specialist\" , \"Sydney\" , \"2769\" , \"2011/06/02\" , \"$95,400\" ], [ \"Suki Burks\" , \"Developer\" , \"London\" , \"6832\" , \"2009/10/22\" , \"$114,500\" ], [ \"Prescott Bartlett\" , \"Technical Author\" , \"London\" , \"3606\" , \"2011/05/07\" , \"$145,000\" ], [ \"Gavin Cortez\" , \"Team Leader\" , \"San Francisco\" , \"2860\" , \"2008/10/26\" , \"$235,500\" ], [ \"Martena Mccray\" , \"Post-Sales support\" , \"Edinburgh\" , \"8240\" , \"2011/03/09\" , \"$324,050\" ], [ \"Unity Butler\" , \"Marketing Designer\" , \"San Francisco\" , \"5384\" , \"2009/12/09\" , \"$85,675\" ] ] print ( data [: 3 ]) print ( '...' ) ``` and want to display it in a datatable, i.e. with sort and filter functionality. Solution \u00a4 Provide headers and use the show function - it will automatically find out that the data is suited to be displayed like that: Value Lists Source ``` python lp : python session = datatbl addsrc = \"Value Lists\" h = [ 'Name' , 'Position' , 'Office' , 'Extn' , 'Start date' , 'Salary' ] show ( data , columns = h ) ``` Custom Style \u00a4 Switch off the builtin style sheet by providing an empty fnstyle header, then add your own via mkdocs custom_css . Tech The default style was created by simply omitting all colors from the standard style sheet, plus adding opacity variations for even and odd rows. Renderable Formats \u00a4 List of values, with a columns argument (example above) List of dicts: LP Source Result ``` python lp : python addsrc = 2 data = [{ 'name' : 'joe' , 'age' : 42 }, { 'name' : 'jane' , 'age' : 32 }] show ( data ) ``` function do_python_62637c8e68a22b2f81eeb8815e0c516f () { let data = [['Tiger Nixon', 'System Architect', 'Edinburgh', '5421', '2011/04/25', '$320,800'], ['Garrett Winters', 'Accountant', 'Tokyo', '8422', '2011/07/25', '$170,750'], ['Ashton Cox', 'Junior Technical Author', 'San Francisco', '1562', '2009/01/12', '$86,000'], ['Cedric Kelly', 'Senior Javascript Developer', 'Edinburgh', '6224', '2012/03/29', '$433,060'], ['Airi Satou', 'Accountant', 'Tokyo', '5407', '2008/11/28', '$162,700'], ['Brielle Williamson', 'Integration Specialist', 'New York', '4804', '2012/12/02', '$372,000'], ['Herrod Chandler', 'Sales Assistant', 'San Francisco', '9608', '2012/08/06', '$137,500'], ['Rhona Davidson', 'Integration Specialist', 'Tokyo', '6200', '2010/10/14', '$327,900'], ['Colleen Hurst', 'Javascript Developer', 'San Francisco', '2360', '2009/09/15', '$205,500'], ['Sonya Frost', 'Software Engineer', 'Edinburgh', '1667', '2008/12/13', '$103,600'], ['Jena Gaines', 'Office Manager', 'London', '3814', '2008/12/19', '$90,560'], ['Quinn Flynn', 'Support Lead', 'Edinburgh', '9497', '2013/03/03', '$342,000'], ['Charde Marshall', 'Regional Director', 'San Francisco', '6741', '2008/10/16', '$470,600'], ['Haley Kennedy', 'Senior Marketing Designer', 'London', '3597', '2012/12/18', '$313,500'], ['Tatyana Fitzpatrick', 'Regional Director', 'London', '1965', '2010/03/17', '$385,750'], ['Michael Silva', 'Marketing Designer', 'London', '1581', '2012/11/27', '$198,500'], ['Paul Byrd', 'Chief Financial Officer (CFO)', 'New York', '3059', '2010/06/09', '$725,000'], ['Gloria Little', 'Systems Administrator', 'New York', '1721', '2009/04/10', '$237,500'], ['Bradley Greer', 'Software Engineer', 'London', '2558', '2012/10/13', '$132,000'], ['Dai Rios', 'Personnel Lead', 'Edinburgh', '2290', '2012/09/26', '$217,500'], ['Jenette Caldwell', 'Development Lead', 'New York', '1937', '2011/09/03', '$345,000'], ['Yuri Berry', 'Chief Marketing Officer (CMO)', 'New York', '6154', '2009/06/25', '$675,000'], ['Caesar Vance', 'Pre-Sales Support', 'New York', '8330', '2011/12/12', '$106,450'], ['Doris Wilder', 'Sales Assistant', 'Sydney', '3023', '2010/09/20', '$85,600'], ['Angelica Ramos', 'Chief Executive Officer (CEO)', 'London', '5797', '2009/10/09', '$1,200,000'], ['Gavin Joyce', 'Developer', 'Edinburgh', '8822', '2010/12/22', '$92,575'], ['Jennifer Chang', 'Regional Director', 'Singapore', '9239', '2010/11/14', '$357,650'], ['Brenden Wagner', 'Software Engineer', 'San Francisco', '1314', '2011/06/07', '$206,850'], ['Fiona Green', 'Chief Operating Officer (COO)', 'San Francisco', '2947', '2010/03/11', '$850,000'], ['Shou Itou', 'Regional Marketing', 'Tokyo', '8899', '2011/08/14', '$163,000'], ['Michelle House', 'Integration Specialist', 'Sydney', '2769', '2011/06/02', '$95,400'], ['Suki Burks', 'Developer', 'London', '6832', '2009/10/22', '$114,500'], ['Prescott Bartlett', 'Technical Author', 'London', '3606', '2011/05/07', '$145,000'], ['Gavin Cortez', 'Team Leader', 'San Francisco', '2860', '2008/10/26', '$235,500'], ['Martena Mccray', 'Post-Sales support', 'Edinburgh', '8240', '2011/03/09', '$324,050'], ['Unity Butler', 'Marketing Designer', 'San Francisco', '5384', '2009/12/09', '$85,675']] $('#python_62637c8e68a22b2f81eeb8815e0c516f_datatbl').DataTable( { data: data, columns: [{'title': 'Name'}, {'title': 'Position'}, {'title': 'Office'}, {'title': 'Extn'}, {'title': 'Start date'}, {'title': 'Salary'}], retrieve: true } ); } do_python_62637c8e68a22b2f81eeb8815e0c516f() function do_python_75ec034df041d7f24803f78bf09e6cc1 () { let data = [{'name': 'joe', 'age': 42}, {'name': 'jane', 'age': 32}] $('#python_75ec034df041d7f24803f78bf09e6cc1_datatbl').DataTable( { data: data, columns: [{'data': 'name', 'title': 'name'}, {'data': 'age', 'title': 'age'}], retrieve: true } ); } do_python_75ec034df041d7f24803f78bf09e6cc1() typeof start_lc === \"undefined\" ? 0 : start_lc()","title":"DataTable Rendering Support"},{"location":"features/lp/python/data_table/#datatable-rendering-support","text":"Renders lists into jquery data tables .","title":"DataTable  Rendering Support"},{"location":"features/lp/python/data_table/#use-case","text":"Say you have some data: Data Example Source [[ 'Tiger Nixon' , 'System Architect' , 'Edinburgh' , '5421' , '2011/04/25' , '$320,800' ], [ 'Garrett Winters' , 'Accountant' , 'Tokyo' , '8422' , '2011/07/25' , '$170,750' ], [ 'Ashton Cox' , 'Junior Technical Author' , 'San Francisco' , '1562' , '2009/01/12' , '$86,000' ]] ... ``` python lp : python addsrc = \"Data Example\" session = datatbl data = [ [ \"Tiger Nixon\" , \"System Architect\" , \"Edinburgh\" , \"5421\" , \"2011/04/25\" , \"$320,800\" ], [ \"Garrett Winters\" , \"Accountant\" , \"Tokyo\" , \"8422\" , \"2011/07/25\" , \"$170,750\" ], [ \"Ashton Cox\" , \"Junior Technical Author\" , \"San Francisco\" , \"1562\" , \"2009/01/12\" , \"$86,000\" ], [ \"Cedric Kelly\" , \"Senior Javascript Developer\" , \"Edinburgh\" , \"6224\" , \"2012/03/29\" , \"$433,060\" ], [ \"Airi Satou\" , \"Accountant\" , \"Tokyo\" , \"5407\" , \"2008/11/28\" , \"$162,700\" ], [ \"Brielle Williamson\" , \"Integration Specialist\" , \"New York\" , \"4804\" , \"2012/12/02\" , \"$372,000\" ], [ \"Herrod Chandler\" , \"Sales Assistant\" , \"San Francisco\" , \"9608\" , \"2012/08/06\" , \"$137,500\" ], [ \"Rhona Davidson\" , \"Integration Specialist\" , \"Tokyo\" , \"6200\" , \"2010/10/14\" , \"$327,900\" ], [ \"Colleen Hurst\" , \"Javascript Developer\" , \"San Francisco\" , \"2360\" , \"2009/09/15\" , \"$205,500\" ], [ \"Sonya Frost\" , \"Software Engineer\" , \"Edinburgh\" , \"1667\" , \"2008/12/13\" , \"$103,600\" ], [ \"Jena Gaines\" , \"Office Manager\" , \"London\" , \"3814\" , \"2008/12/19\" , \"$90,560\" ], [ \"Quinn Flynn\" , \"Support Lead\" , \"Edinburgh\" , \"9497\" , \"2013/03/03\" , \"$342,000\" ], [ \"Charde Marshall\" , \"Regional Director\" , \"San Francisco\" , \"6741\" , \"2008/10/16\" , \"$470,600\" ], [ \"Haley Kennedy\" , \"Senior Marketing Designer\" , \"London\" , \"3597\" , \"2012/12/18\" , \"$313,500\" ], [ \"Tatyana Fitzpatrick\" , \"Regional Director\" , \"London\" , \"1965\" , \"2010/03/17\" , \"$385,750\" ], [ \"Michael Silva\" , \"Marketing Designer\" , \"London\" , \"1581\" , \"2012/11/27\" , \"$198,500\" ], [ \"Paul Byrd\" , \"Chief Financial Officer (CFO)\" , \"New York\" , \"3059\" , \"2010/06/09\" , \"$725,000\" ], [ \"Gloria Little\" , \"Systems Administrator\" , \"New York\" , \"1721\" , \"2009/04/10\" , \"$237,500\" ], [ \"Bradley Greer\" , \"Software Engineer\" , \"London\" , \"2558\" , \"2012/10/13\" , \"$132,000\" ], [ \"Dai Rios\" , \"Personnel Lead\" , \"Edinburgh\" , \"2290\" , \"2012/09/26\" , \"$217,500\" ], [ \"Jenette Caldwell\" , \"Development Lead\" , \"New York\" , \"1937\" , \"2011/09/03\" , \"$345,000\" ], [ \"Yuri Berry\" , \"Chief Marketing Officer (CMO)\" , \"New York\" , \"6154\" , \"2009/06/25\" , \"$675,000\" ], [ \"Caesar Vance\" , \"Pre-Sales Support\" , \"New York\" , \"8330\" , \"2011/12/12\" , \"$106,450\" ], [ \"Doris Wilder\" , \"Sales Assistant\" , \"Sydney\" , \"3023\" , \"2010/09/20\" , \"$85,600\" ], [ \"Angelica Ramos\" , \"Chief Executive Officer (CEO)\" , \"London\" , \"5797\" , \"2009/10/09\" , \"$1,200,000\" ], [ \"Gavin Joyce\" , \"Developer\" , \"Edinburgh\" , \"8822\" , \"2010/12/22\" , \"$92,575\" ], [ \"Jennifer Chang\" , \"Regional Director\" , \"Singapore\" , \"9239\" , \"2010/11/14\" , \"$357,650\" ], [ \"Brenden Wagner\" , \"Software Engineer\" , \"San Francisco\" , \"1314\" , \"2011/06/07\" , \"$206,850\" ], [ \"Fiona Green\" , \"Chief Operating Officer (COO)\" , \"San Francisco\" , \"2947\" , \"2010/03/11\" , \"$850,000\" ], [ \"Shou Itou\" , \"Regional Marketing\" , \"Tokyo\" , \"8899\" , \"2011/08/14\" , \"$163,000\" ], [ \"Michelle House\" , \"Integration Specialist\" , \"Sydney\" , \"2769\" , \"2011/06/02\" , \"$95,400\" ], [ \"Suki Burks\" , \"Developer\" , \"London\" , \"6832\" , \"2009/10/22\" , \"$114,500\" ], [ \"Prescott Bartlett\" , \"Technical Author\" , \"London\" , \"3606\" , \"2011/05/07\" , \"$145,000\" ], [ \"Gavin Cortez\" , \"Team Leader\" , \"San Francisco\" , \"2860\" , \"2008/10/26\" , \"$235,500\" ], [ \"Martena Mccray\" , \"Post-Sales support\" , \"Edinburgh\" , \"8240\" , \"2011/03/09\" , \"$324,050\" ], [ \"Unity Butler\" , \"Marketing Designer\" , \"San Francisco\" , \"5384\" , \"2009/12/09\" , \"$85,675\" ] ] print ( data [: 3 ]) print ( '...' ) ``` and want to display it in a datatable, i.e. with sort and filter functionality.","title":"Use Case"},{"location":"features/lp/python/data_table/#solution","text":"Provide headers and use the show function - it will automatically find out that the data is suited to be displayed like that: Value Lists Source ``` python lp : python session = datatbl addsrc = \"Value Lists\" h = [ 'Name' , 'Position' , 'Office' , 'Extn' , 'Start date' , 'Salary' ] show ( data , columns = h ) ```","title":"Solution"},{"location":"features/lp/python/data_table/#custom-style","text":"Switch off the builtin style sheet by providing an empty fnstyle header, then add your own via mkdocs custom_css . Tech The default style was created by simply omitting all colors from the standard style sheet, plus adding opacity variations for even and odd rows.","title":"Custom Style"},{"location":"features/lp/python/data_table/#renderable-formats","text":"List of values, with a columns argument (example above) List of dicts: LP Source Result ``` python lp : python addsrc = 2 data = [{ 'name' : 'joe' , 'age' : 42 }, { 'name' : 'jane' , 'age' : 32 }] show ( data ) ``` function do_python_62637c8e68a22b2f81eeb8815e0c516f () { let data = [['Tiger Nixon', 'System Architect', 'Edinburgh', '5421', '2011/04/25', '$320,800'], ['Garrett Winters', 'Accountant', 'Tokyo', '8422', '2011/07/25', '$170,750'], ['Ashton Cox', 'Junior Technical Author', 'San Francisco', '1562', '2009/01/12', '$86,000'], ['Cedric Kelly', 'Senior Javascript Developer', 'Edinburgh', '6224', '2012/03/29', '$433,060'], ['Airi Satou', 'Accountant', 'Tokyo', '5407', '2008/11/28', '$162,700'], ['Brielle Williamson', 'Integration Specialist', 'New York', '4804', '2012/12/02', '$372,000'], ['Herrod Chandler', 'Sales Assistant', 'San Francisco', '9608', '2012/08/06', '$137,500'], ['Rhona Davidson', 'Integration Specialist', 'Tokyo', '6200', '2010/10/14', '$327,900'], ['Colleen Hurst', 'Javascript Developer', 'San Francisco', '2360', '2009/09/15', '$205,500'], ['Sonya Frost', 'Software Engineer', 'Edinburgh', '1667', '2008/12/13', '$103,600'], ['Jena Gaines', 'Office Manager', 'London', '3814', '2008/12/19', '$90,560'], ['Quinn Flynn', 'Support Lead', 'Edinburgh', '9497', '2013/03/03', '$342,000'], ['Charde Marshall', 'Regional Director', 'San Francisco', '6741', '2008/10/16', '$470,600'], ['Haley Kennedy', 'Senior Marketing Designer', 'London', '3597', '2012/12/18', '$313,500'], ['Tatyana Fitzpatrick', 'Regional Director', 'London', '1965', '2010/03/17', '$385,750'], ['Michael Silva', 'Marketing Designer', 'London', '1581', '2012/11/27', '$198,500'], ['Paul Byrd', 'Chief Financial Officer (CFO)', 'New York', '3059', '2010/06/09', '$725,000'], ['Gloria Little', 'Systems Administrator', 'New York', '1721', '2009/04/10', '$237,500'], ['Bradley Greer', 'Software Engineer', 'London', '2558', '2012/10/13', '$132,000'], ['Dai Rios', 'Personnel Lead', 'Edinburgh', '2290', '2012/09/26', '$217,500'], ['Jenette Caldwell', 'Development Lead', 'New York', '1937', '2011/09/03', '$345,000'], ['Yuri Berry', 'Chief Marketing Officer (CMO)', 'New York', '6154', '2009/06/25', '$675,000'], ['Caesar Vance', 'Pre-Sales Support', 'New York', '8330', '2011/12/12', '$106,450'], ['Doris Wilder', 'Sales Assistant', 'Sydney', '3023', '2010/09/20', '$85,600'], ['Angelica Ramos', 'Chief Executive Officer (CEO)', 'London', '5797', '2009/10/09', '$1,200,000'], ['Gavin Joyce', 'Developer', 'Edinburgh', '8822', '2010/12/22', '$92,575'], ['Jennifer Chang', 'Regional Director', 'Singapore', '9239', '2010/11/14', '$357,650'], ['Brenden Wagner', 'Software Engineer', 'San Francisco', '1314', '2011/06/07', '$206,850'], ['Fiona Green', 'Chief Operating Officer (COO)', 'San Francisco', '2947', '2010/03/11', '$850,000'], ['Shou Itou', 'Regional Marketing', 'Tokyo', '8899', '2011/08/14', '$163,000'], ['Michelle House', 'Integration Specialist', 'Sydney', '2769', '2011/06/02', '$95,400'], ['Suki Burks', 'Developer', 'London', '6832', '2009/10/22', '$114,500'], ['Prescott Bartlett', 'Technical Author', 'London', '3606', '2011/05/07', '$145,000'], ['Gavin Cortez', 'Team Leader', 'San Francisco', '2860', '2008/10/26', '$235,500'], ['Martena Mccray', 'Post-Sales support', 'Edinburgh', '8240', '2011/03/09', '$324,050'], ['Unity Butler', 'Marketing Designer', 'San Francisco', '5384', '2009/12/09', '$85,675']] $('#python_62637c8e68a22b2f81eeb8815e0c516f_datatbl').DataTable( { data: data, columns: [{'title': 'Name'}, {'title': 'Position'}, {'title': 'Office'}, {'title': 'Extn'}, {'title': 'Start date'}, {'title': 'Salary'}], retrieve: true } ); } do_python_62637c8e68a22b2f81eeb8815e0c516f() function do_python_75ec034df041d7f24803f78bf09e6cc1 () { let data = [{'name': 'joe', 'age': 42}, {'name': 'jane', 'age': 32}] $('#python_75ec034df041d7f24803f78bf09e6cc1_datatbl').DataTable( { data: data, columns: [{'data': 'name', 'title': 'name'}, {'data': 'age', 'title': 'age'}], retrieve: true } ); } do_python_75ec034df041d7f24803f78bf09e6cc1() typeof start_lc === \"undefined\" ? 0 : start_lc()","title":"Renderable Formats"},{"location":"features/lp/python/diag_diagram/","text":"[data-md-color-scheme=\"slate\"] .featherlight .featherlight-content { background: #2e303e; } [data-md-color-scheme=\"slate\"] .featherlight .featherlight-close-icon { background: rgba(255,255,255,.3); color: #fff; } .featherlight .featherlight-content { min-width: 60% !important; } function next_elmt_into_lightbox(id, event) { let btn=document.getElementById(id); let parent = btn.parentNode; function flclose(event) { let c = this.$content[0]; $(parent).after(c); } let el = parent.nextElementSibling; $.featherlight({jquery: el, persist: true, beforeClose: flclose}) } .button-lightbox { color: var(--md-default-fg-color--lighter); }.button-lightbox:hover { color: var(--md-default-fg-color--light); } @media only screen and (min-width: 76.25em) { .md-main__inner { max-width: none; } .md-sidebar--primary { left: 0; } .md-sidebar--secondary { right: 0; margin-left: 0; -webkit-transform: none; transform: none; } } Diagrams Rendering Support \u00a4 Diagram rendering support with svg mode. Requirements \u00a4 pip install diagrams Example \u00a4 Set up your defaults , typically in a silent block: # graphviz setup gv = { \"fontsize\" : \"17\" , \"fontcolor\" : \"gray\" , \"labelfontcolor\" : \"white\" , \"bgcolor\" : \"transparent\" , } def diagr ( ** kw ): '''factory creating same style Diagram context mgr objects''' from diagrams import Diagram setup = dict ( show = False , outformat = 'svg' , filename = 'tmpf' , graph_attr = gv , node_attr = gv , edge_attr = gv ) setup . update ( kw ) return Diagram ( ** setup ) def T ( typ , * a , ** kw ): kw [ 'graph_attr' ] = gv return typ ( * a , ** kw ) Note the outformat is svg No limits regarding sophistication - the factory approach is just an example Then use the library like normal, added our show based renderer at the end: LP Source: ``` python lp : python addsrc eval = always session = gvdiag from diagrams import Cluster , Diagram from diagrams.aws.compute import ECS from diagrams.aws.database import ElastiCache , RDS from diagrams.aws.network import ELB from diagrams.aws.network import Route53 with diagr ( name = \"Clustered Web Services\" ) as d : dns = Route53 ( \"dns\" ) lb = ELB ( \"lb\" ) with Cluster ( \"Services\" ): svc_group = [ ECS ( \"web1\" ), ECS ( \"web2\" ), ECS ( \"web3\" )] with Cluster ( \"DB Cluster\" ): db_main = RDS ( \"userdb\" ) db_main - [ RDS ( \"userdb ro\" )] memcached = ElastiCache ( \"memcached\" ) dns >> lb >> svc_group svc_group >> db_main svc_group >> memcached show ( d ) ``` Result: Clustered Web Services Clustered Web Services cluster_Services Services cluster_DB Cluster DB Cluster 5ad92c7896d0492b927941a46ec0188b dns 60bbcd9a5452478ca0caf7490f4f117b lb 5ad92c7896d0492b927941a46ec0188b->60bbcd9a5452478ca0caf7490f4f117b 8b25a1b49ee74d2b86c75c7d6e8591b9 web1 60bbcd9a5452478ca0caf7490f4f117b->8b25a1b49ee74d2b86c75c7d6e8591b9 e504fd22ee3f4ba19eae3e3c302792d5 web2 60bbcd9a5452478ca0caf7490f4f117b->e504fd22ee3f4ba19eae3e3c302792d5 7d7ca99aed3d4d0a89d9d94ea5e28b9c web3 60bbcd9a5452478ca0caf7490f4f117b->7d7ca99aed3d4d0a89d9d94ea5e28b9c 4eac1d52bd14474da8624e8945ac45fb userdb 8b25a1b49ee74d2b86c75c7d6e8591b9->4eac1d52bd14474da8624e8945ac45fb 6791ea50a9514875b73ffc399dbadb35 memcached 8b25a1b49ee74d2b86c75c7d6e8591b9->6791ea50a9514875b73ffc399dbadb35 e504fd22ee3f4ba19eae3e3c302792d5->4eac1d52bd14474da8624e8945ac45fb e504fd22ee3f4ba19eae3e3c302792d5->6791ea50a9514875b73ffc399dbadb35 7d7ca99aed3d4d0a89d9d94ea5e28b9c->4eac1d52bd14474da8624e8945ac45fb 7d7ca99aed3d4d0a89d9d94ea5e28b9c->6791ea50a9514875b73ffc399dbadb35 a3be245b510842d7a0638affe1c08230 userdb ro 4eac1d52bd14474da8624e8945ac45fb->a3be245b510842d7a0638affe1c08230 Inline Colors \u00a4 Cloud Computing Example Source Advanced Web Service with On-Premise (colored) Advanced Web Service with On-Premise (colored) cluster_Service Cluster Service Cluster cluster_Sessions HA Sessions HA cluster_Database HA Database HA b20a012da94748b8815348e826ea2583 ingress c550506766a240b98710300829e70c99 grpc1 b20a012da94748b8815348e826ea2583->c550506766a240b98710300829e70c99 8ebd1a84fd8849998355899a8bc0b543 grpc2 b20a012da94748b8815348e826ea2583->8ebd1a84fd8849998355899a8bc0b543 efbb6c4666f74ab695357c205134ae0e grpc3 b20a012da94748b8815348e826ea2583->efbb6c4666f74ab695357c205134ae0e 8aec0e9415f044deaa4f26d77becf024 metric 4fd6cebd6fab42aa9dcf59d497ef6489 monitoring 8aec0e9415f044deaa4f26d77becf024->4fd6cebd6fab42aa9dcf59d497ef6489 fefb52d8960a4783808252055dda77d8 session c550506766a240b98710300829e70c99->fefb52d8960a4783808252055dda77d8 5d001ea5555f4647a57b978cdc5d31f9 users c550506766a240b98710300829e70c99->5d001ea5555f4647a57b978cdc5d31f9 6aa9e4a8f24340059526aefd7eb0a15d logging c550506766a240b98710300829e70c99->6aa9e4a8f24340059526aefd7eb0a15d 8ebd1a84fd8849998355899a8bc0b543->fefb52d8960a4783808252055dda77d8 8ebd1a84fd8849998355899a8bc0b543->5d001ea5555f4647a57b978cdc5d31f9 8ebd1a84fd8849998355899a8bc0b543->6aa9e4a8f24340059526aefd7eb0a15d efbb6c4666f74ab695357c205134ae0e->fefb52d8960a4783808252055dda77d8 efbb6c4666f74ab695357c205134ae0e->5d001ea5555f4647a57b978cdc5d31f9 efbb6c4666f74ab695357c205134ae0e->6aa9e4a8f24340059526aefd7eb0a15d a8f8cf5363ce43be9219c88d7b85ad68 replica fefb52d8960a4783808252055dda77d8->a8f8cf5363ce43be9219c88d7b85ad68 a8f8cf5363ce43be9219c88d7b85ad68->8aec0e9415f044deaa4f26d77becf024 collect 911bc009b4f846fe985f9ec37e43d375 replica 5d001ea5555f4647a57b978cdc5d31f9->911bc009b4f846fe985f9ec37e43d375 911bc009b4f846fe985f9ec37e43d375->8aec0e9415f044deaa4f26d77becf024 collect 663cfbf7a1444b9f8ef4d84c4b6cbb6f stream 6aa9e4a8f24340059526aefd7eb0a15d->663cfbf7a1444b9f8ef4d84c4b6cbb6f parse 9615560f1e6944afb8acaa43f0fd3aac analytics 663cfbf7a1444b9f8ef4d84c4b6cbb6f->9615560f1e6944afb8acaa43f0fd3aac ``` python lp : python addsrc = \"Cloud Computing Example\" eval = always session = gvdiag from diagrams import Cluster , Edge from diagrams.onprem.analytics import Spark from diagrams.onprem.compute import Server from diagrams.onprem.database import PostgreSQL from diagrams.onprem.inmemory import Redis from diagrams.onprem.aggregator import Fluentd from diagrams.onprem.monitoring import Grafana , Prometheus from diagrams.onprem.network import Nginx from diagrams.onprem.queue import Kafka with diagr ( name = \"Advanced Web Service with On-Premise (colored)\" ) as diag : ingress = Nginx ( \"ingress\" ) metrics = Prometheus ( \"metric\" ) metrics << Edge ( color = \"firebrick\" , style = \"dashed\" ) << Grafana ( \"monitoring\" ) with T ( Cluster , \"Service Cluster\" ): grpcsvc = [ Server ( \"grpc1\" , fontcolor = \"black\" ), Server ( \"grpc2\" ), Server ( \"grpc3\" )] with T ( Cluster , \"Sessions HA\" ): main = Redis ( \"session\" ) main - Edge ( color = \"brown\" , style = \"dashed\" ) - Redis ( \"replica\" ) << Edge ( label = \"collect\" ) << metrics grpcsvc >> Edge ( color = \"brown\" ) >> main with T ( Cluster , \"Database HA\" ): main = PostgreSQL ( \"users\" ) main - Edge ( color = \"brown\" , style = \"dotted\" ) - PostgreSQL ( \"replica\" ) << Edge ( label = \"collect\" ) << metrics grpcsvc >> Edge ( color = \"black\" ) >> main aggregator = Fluentd ( \"logging\" ) aggregator >> Edge ( label = \"parse\" ) >> Kafka ( \"stream\" ) >> Edge ( color = \"black\" , style = \"bold\" ) >> Spark ( \"analytics\" ) ingress >> Edge ( color = \"darkgreen\" ) << grpcsvc >> Edge ( color = \"darkorange\" ) >> aggregator show ( diag ) # this is passed into the plugin rendering function ``` Tech \u00a4 The challenge here is to get svgs displayable within your docs. They normally contain xlinked png images, pointing to your diagram package in site-directory - i.e. not served by a static documentation server. Solution: Through a patched icon loader, we detect which png icons your diagram requires and copy them over to docsdir/icons_diagram . You can git-ignore that directory, so that images do not pile up there. $('.md-content .diagrams_container').featherlightGallery({ nextIcon: '\u00bb', previousIcon: '\u00ab', openSpeed: 300, galleryFadeIn: 300, targetAttr: 'src' }); $('.md-content .diagrams_container').css('cursor', 'zoom-in'); typeof start_lc === \"undefined\" ? 0 : start_lc()","title":"Diagrams Rendering Support"},{"location":"features/lp/python/diag_diagram/#diagrams-rendering-support","text":"Diagram rendering support with svg mode.","title":"Diagrams  Rendering Support"},{"location":"features/lp/python/diag_diagram/#requirements","text":"pip install diagrams","title":"Requirements"},{"location":"features/lp/python/diag_diagram/#example","text":"Set up your defaults , typically in a silent block: # graphviz setup gv = { \"fontsize\" : \"17\" , \"fontcolor\" : \"gray\" , \"labelfontcolor\" : \"white\" , \"bgcolor\" : \"transparent\" , } def diagr ( ** kw ): '''factory creating same style Diagram context mgr objects''' from diagrams import Diagram setup = dict ( show = False , outformat = 'svg' , filename = 'tmpf' , graph_attr = gv , node_attr = gv , edge_attr = gv ) setup . update ( kw ) return Diagram ( ** setup ) def T ( typ , * a , ** kw ): kw [ 'graph_attr' ] = gv return typ ( * a , ** kw ) Note the outformat is svg No limits regarding sophistication - the factory approach is just an example Then use the library like normal, added our show based renderer at the end: LP Source: ``` python lp : python addsrc eval = always session = gvdiag from diagrams import Cluster , Diagram from diagrams.aws.compute import ECS from diagrams.aws.database import ElastiCache , RDS from diagrams.aws.network import ELB from diagrams.aws.network import Route53 with diagr ( name = \"Clustered Web Services\" ) as d : dns = Route53 ( \"dns\" ) lb = ELB ( \"lb\" ) with Cluster ( \"Services\" ): svc_group = [ ECS ( \"web1\" ), ECS ( \"web2\" ), ECS ( \"web3\" )] with Cluster ( \"DB Cluster\" ): db_main = RDS ( \"userdb\" ) db_main - [ RDS ( \"userdb ro\" )] memcached = ElastiCache ( \"memcached\" ) dns >> lb >> svc_group svc_group >> db_main svc_group >> memcached show ( d ) ``` Result: Clustered Web Services Clustered Web Services cluster_Services Services cluster_DB Cluster DB Cluster 5ad92c7896d0492b927941a46ec0188b dns 60bbcd9a5452478ca0caf7490f4f117b lb 5ad92c7896d0492b927941a46ec0188b->60bbcd9a5452478ca0caf7490f4f117b 8b25a1b49ee74d2b86c75c7d6e8591b9 web1 60bbcd9a5452478ca0caf7490f4f117b->8b25a1b49ee74d2b86c75c7d6e8591b9 e504fd22ee3f4ba19eae3e3c302792d5 web2 60bbcd9a5452478ca0caf7490f4f117b->e504fd22ee3f4ba19eae3e3c302792d5 7d7ca99aed3d4d0a89d9d94ea5e28b9c web3 60bbcd9a5452478ca0caf7490f4f117b->7d7ca99aed3d4d0a89d9d94ea5e28b9c 4eac1d52bd14474da8624e8945ac45fb userdb 8b25a1b49ee74d2b86c75c7d6e8591b9->4eac1d52bd14474da8624e8945ac45fb 6791ea50a9514875b73ffc399dbadb35 memcached 8b25a1b49ee74d2b86c75c7d6e8591b9->6791ea50a9514875b73ffc399dbadb35 e504fd22ee3f4ba19eae3e3c302792d5->4eac1d52bd14474da8624e8945ac45fb e504fd22ee3f4ba19eae3e3c302792d5->6791ea50a9514875b73ffc399dbadb35 7d7ca99aed3d4d0a89d9d94ea5e28b9c->4eac1d52bd14474da8624e8945ac45fb 7d7ca99aed3d4d0a89d9d94ea5e28b9c->6791ea50a9514875b73ffc399dbadb35 a3be245b510842d7a0638affe1c08230 userdb ro 4eac1d52bd14474da8624e8945ac45fb->a3be245b510842d7a0638affe1c08230","title":"Example"},{"location":"features/lp/python/diag_diagram/#inline-colors","text":"Cloud Computing Example Source Advanced Web Service with On-Premise (colored) Advanced Web Service with On-Premise (colored) cluster_Service Cluster Service Cluster cluster_Sessions HA Sessions HA cluster_Database HA Database HA b20a012da94748b8815348e826ea2583 ingress c550506766a240b98710300829e70c99 grpc1 b20a012da94748b8815348e826ea2583->c550506766a240b98710300829e70c99 8ebd1a84fd8849998355899a8bc0b543 grpc2 b20a012da94748b8815348e826ea2583->8ebd1a84fd8849998355899a8bc0b543 efbb6c4666f74ab695357c205134ae0e grpc3 b20a012da94748b8815348e826ea2583->efbb6c4666f74ab695357c205134ae0e 8aec0e9415f044deaa4f26d77becf024 metric 4fd6cebd6fab42aa9dcf59d497ef6489 monitoring 8aec0e9415f044deaa4f26d77becf024->4fd6cebd6fab42aa9dcf59d497ef6489 fefb52d8960a4783808252055dda77d8 session c550506766a240b98710300829e70c99->fefb52d8960a4783808252055dda77d8 5d001ea5555f4647a57b978cdc5d31f9 users c550506766a240b98710300829e70c99->5d001ea5555f4647a57b978cdc5d31f9 6aa9e4a8f24340059526aefd7eb0a15d logging c550506766a240b98710300829e70c99->6aa9e4a8f24340059526aefd7eb0a15d 8ebd1a84fd8849998355899a8bc0b543->fefb52d8960a4783808252055dda77d8 8ebd1a84fd8849998355899a8bc0b543->5d001ea5555f4647a57b978cdc5d31f9 8ebd1a84fd8849998355899a8bc0b543->6aa9e4a8f24340059526aefd7eb0a15d efbb6c4666f74ab695357c205134ae0e->fefb52d8960a4783808252055dda77d8 efbb6c4666f74ab695357c205134ae0e->5d001ea5555f4647a57b978cdc5d31f9 efbb6c4666f74ab695357c205134ae0e->6aa9e4a8f24340059526aefd7eb0a15d a8f8cf5363ce43be9219c88d7b85ad68 replica fefb52d8960a4783808252055dda77d8->a8f8cf5363ce43be9219c88d7b85ad68 a8f8cf5363ce43be9219c88d7b85ad68->8aec0e9415f044deaa4f26d77becf024 collect 911bc009b4f846fe985f9ec37e43d375 replica 5d001ea5555f4647a57b978cdc5d31f9->911bc009b4f846fe985f9ec37e43d375 911bc009b4f846fe985f9ec37e43d375->8aec0e9415f044deaa4f26d77becf024 collect 663cfbf7a1444b9f8ef4d84c4b6cbb6f stream 6aa9e4a8f24340059526aefd7eb0a15d->663cfbf7a1444b9f8ef4d84c4b6cbb6f parse 9615560f1e6944afb8acaa43f0fd3aac analytics 663cfbf7a1444b9f8ef4d84c4b6cbb6f->9615560f1e6944afb8acaa43f0fd3aac ``` python lp : python addsrc = \"Cloud Computing Example\" eval = always session = gvdiag from diagrams import Cluster , Edge from diagrams.onprem.analytics import Spark from diagrams.onprem.compute import Server from diagrams.onprem.database import PostgreSQL from diagrams.onprem.inmemory import Redis from diagrams.onprem.aggregator import Fluentd from diagrams.onprem.monitoring import Grafana , Prometheus from diagrams.onprem.network import Nginx from diagrams.onprem.queue import Kafka with diagr ( name = \"Advanced Web Service with On-Premise (colored)\" ) as diag : ingress = Nginx ( \"ingress\" ) metrics = Prometheus ( \"metric\" ) metrics << Edge ( color = \"firebrick\" , style = \"dashed\" ) << Grafana ( \"monitoring\" ) with T ( Cluster , \"Service Cluster\" ): grpcsvc = [ Server ( \"grpc1\" , fontcolor = \"black\" ), Server ( \"grpc2\" ), Server ( \"grpc3\" )] with T ( Cluster , \"Sessions HA\" ): main = Redis ( \"session\" ) main - Edge ( color = \"brown\" , style = \"dashed\" ) - Redis ( \"replica\" ) << Edge ( label = \"collect\" ) << metrics grpcsvc >> Edge ( color = \"brown\" ) >> main with T ( Cluster , \"Database HA\" ): main = PostgreSQL ( \"users\" ) main - Edge ( color = \"brown\" , style = \"dotted\" ) - PostgreSQL ( \"replica\" ) << Edge ( label = \"collect\" ) << metrics grpcsvc >> Edge ( color = \"black\" ) >> main aggregator = Fluentd ( \"logging\" ) aggregator >> Edge ( label = \"parse\" ) >> Kafka ( \"stream\" ) >> Edge ( color = \"black\" , style = \"bold\" ) >> Spark ( \"analytics\" ) ingress >> Edge ( color = \"darkgreen\" ) << grpcsvc >> Edge ( color = \"darkorange\" ) >> aggregator show ( diag ) # this is passed into the plugin rendering function ```","title":"Inline Colors"},{"location":"features/lp/python/diag_diagram/#tech","text":"The challenge here is to get svgs displayable within your docs. They normally contain xlinked png images, pointing to your diagram package in site-directory - i.e. not served by a static documentation server. Solution: Through a patched icon loader, we detect which png icons your diagram requires and copy them over to docsdir/icons_diagram . You can git-ignore that directory, so that images do not pile up there. $('.md-content .diagrams_container').featherlightGallery({ nextIcon: '\u00bb', previousIcon: '\u00ab', openSpeed: 300, galleryFadeIn: 300, targetAttr: 'src' }); $('.md-content .diagrams_container').css('cursor', 'zoom-in'); typeof start_lc === \"undefined\" ? 0 : start_lc()","title":"Tech"},{"location":"features/lp/python/git_changelog/","text":"@media only screen and (min-width: 76.25em) { .md-main__inner { max-width: none; } .md-sidebar--primary { left: 0; } .md-sidebar--secondary { right: 0; margin-left: 0; -webkit-transform: none; transform: none; } } Changelog \u00a4 Creates a changelog (using git-changelog ). Heavily based on the work of \"pawamoy\" . Example: This repo's Changelog Page . Syntax \u00a4 `lp:python show=git_changelog style=angular` Parameters \u00a4 style = Choice ([ 'angular' , 'basic' , 'atom' ], default = 'angular' ) versioning = Choice ([ 'auto' , 'semver' , 'calver' ], default = 'auto' ) \"auto\": When set to \" auto \", we derive versioning scheme by inspecting your last git tag - if like X.foo.bar , with X a number > 2000, we set to calver. You can set $versioning also via environ, which will have precedence then. Works only with full git history On many CI systems the repo is fechted with --depth=1. If docu is built there, then commit the cache file for the changelog page and have it built locally. Lastly: https://joshuatauberer.medium.com/write-joyous-git-commit-messages-2f98891114c4 typeof start_lc === \"undefined\" ? 0 : start_lc()","title":"Changelog"},{"location":"features/lp/python/git_changelog/#changelog","text":"Creates a changelog (using git-changelog ). Heavily based on the work of \"pawamoy\" . Example: This repo's Changelog Page .","title":"Changelog "},{"location":"features/lp/python/git_changelog/#syntax","text":"`lp:python show=git_changelog style=angular`","title":"Syntax"},{"location":"features/lp/python/git_changelog/#parameters","text":"style = Choice ([ 'angular' , 'basic' , 'atom' ], default = 'angular' ) versioning = Choice ([ 'auto' , 'semver' , 'calver' ], default = 'auto' ) \"auto\": When set to \" auto \", we derive versioning scheme by inspecting your last git tag - if like X.foo.bar , with X a number > 2000, we set to calver. You can set $versioning also via environ, which will have precedence then. Works only with full git history On many CI systems the repo is fechted with --depth=1. If docu is built there, then commit the cache file for the changelog page and have it built locally. Lastly: https://joshuatauberer.medium.com/write-joyous-git-commit-messages-2f98891114c4 typeof start_lc === \"undefined\" ? 0 : start_lc()","title":"Parameters"},{"location":"features/lp/python/lprunner/","text":"@media only screen and (min-width: 76.25em) { .md-main__inner { max-width: none; } .md-sidebar--primary { left: 0; } .md-sidebar--secondary { right: 0; margin-left: 0; -webkit-transform: none; transform: none; } } Local LP Blocks Runner \u00a4 Via this you can offer the reader of a page to run all or some LP blocks of a page locally on his computer. Add this to your markdown page and an instruction regarding how to run LP blocks with a runner header argument will be presented to the user: LP Source (shortform): `lp:python show=lprunner addsrc` Result: Run this locally You can run the code on this page locally via: pip install --user docutools # if not yet installed mdrun \"https://axiros.github.io/docutools/features/lp/python/lprunner/\" All blocks with the runner header parameter will then be executed locally, e.g.: LP Source: ``` bash lp runner addsrc echo \"Hello World\" ``` Result: Cmd Output $ echo \"Hello World\" $ echo \"Hello World\" Hello World If the user now calls the documentation URL with the mdrun script he will see sth like this: $ mdrun \"https://axiros.github.io/docutools/features/lp/python/lprunner/\" ( ... ) # local tmux window opens, showing the markdown source plus the blocks ready to run: Via this you can offer the reader of a page to run all or some LP blocks of a page locally on his computer. Add this to your markdown page and an instruction regarding how to run LP blocks with a ` runner ` header argument will be presented to the user: All blocks with the ` runner ` header parameter will then be executed locally, e.g.: Run echo \"Hello World\" a:yes for all e:yes for all, then exit q:quit s:shell y:confirm [ a | e | h | q | s | Y ( default )] ? Means the user by default needs to confirm every block run. This currently works for bash mode , with or without sessions and is intended to allow users, trusting you, complex installation automation without tedious copy paste processes. Tech \u00a4 The show('lprunner') statement causes the markdown source of the page to be copied over to site dir, as runner.md , so that it is available to be downloaded by a http client, contained within the mdrun script. Requirements \u00a4 The user needs to have the docutools package installed, plus tmux, with minimum version 3.0. Experimental Feature A more minimal required runner package should be offered, after gathering some feedback, regarding value of such \"read and run\" documentation. typeof start_lc === \"undefined\" ? 0 : start_lc()","title":"Local LP Blocks Runner"},{"location":"features/lp/python/lprunner/#local-lp-blocks-runner","text":"Via this you can offer the reader of a page to run all or some LP blocks of a page locally on his computer. Add this to your markdown page and an instruction regarding how to run LP blocks with a runner header argument will be presented to the user: LP Source (shortform): `lp:python show=lprunner addsrc` Result: Run this locally You can run the code on this page locally via: pip install --user docutools # if not yet installed mdrun \"https://axiros.github.io/docutools/features/lp/python/lprunner/\" All blocks with the runner header parameter will then be executed locally, e.g.: LP Source: ``` bash lp runner addsrc echo \"Hello World\" ``` Result: Cmd Output $ echo \"Hello World\" $ echo \"Hello World\" Hello World If the user now calls the documentation URL with the mdrun script he will see sth like this: $ mdrun \"https://axiros.github.io/docutools/features/lp/python/lprunner/\" ( ... ) # local tmux window opens, showing the markdown source plus the blocks ready to run: Via this you can offer the reader of a page to run all or some LP blocks of a page locally on his computer. Add this to your markdown page and an instruction regarding how to run LP blocks with a ` runner ` header argument will be presented to the user: All blocks with the ` runner ` header parameter will then be executed locally, e.g.: Run echo \"Hello World\" a:yes for all e:yes for all, then exit q:quit s:shell y:confirm [ a | e | h | q | s | Y ( default )] ? Means the user by default needs to confirm every block run. This currently works for bash mode , with or without sessions and is intended to allow users, trusting you, complex installation automation without tedious copy paste processes.","title":"Local LP Blocks Runner "},{"location":"features/lp/python/lprunner/#tech","text":"The show('lprunner') statement causes the markdown source of the page to be copied over to site dir, as runner.md , so that it is available to be downloaded by a http client, contained within the mdrun script.","title":"Tech"},{"location":"features/lp/python/lprunner/#requirements","text":"The user needs to have the docutools package installed, plus tmux, with minimum version 3.0. Experimental Feature A more minimal required runner package should be offered, after gathering some feedback, regarding value of such \"read and run\" documentation. typeof start_lc === \"undefined\" ? 0 : start_lc()","title":"Requirements"},{"location":"features/lp/python/mpl_pyplot/","text":"@media only screen and (min-width: 76.25em) { .md-main__inner { max-width: none; } .md-sidebar--primary { left: 0; } .md-sidebar--secondary { right: 0; margin-left: 0; -webkit-transform: none; transform: none; } } Matplotlib Rendering Support \u00a4 Matplotlib Support. See here for the vast amount of matplotlib's plotting features. Requirements \u00a4 You need to have pip/conda install matplotlib and optionally also pip/conda install numpy within your environment. Examples \u00a4 Works within Admonitions LP Source: ``` python lp : python addsrc eval = always import matplotlib.pyplot as plt import numpy as np x = np . linspace ( 0 , 2 , 100 ) plt . plot ( x , x , label = 'linear' ) plt . plot ( x , x ** 2 , label = 'quadratic' ) plt . plot ( x , x ** 3 , label = 'cubic' ) plt . xlabel ( 'x label' ) plt . ylabel ( 'y label' ) plt . title ( \"Simple Plot\" ) plt . legend () show ( plt , fn = 'img/testplot.svg' ) show ( '??? hint \"You can create *markdown* via the `show()` function\"' ) show ( ' this was created from the python block' ) ``` Result: You can create markdown via the show() function this was created from the python block The plot is created as svg directly into your html site directory, i.e. will not show up within your docs tree. If for some reason you can not create the svg on the system where you build your docs: supply a fn (filename) argument to the show function, relative to your page, e.g. show(plt, fn='img/myplot') . This will result in the plot created within your docs dir, so that you can commit it, from a system, where you can build the docs. commit the cache file optionally, set the eval policy to always page wide, and to on_change for the block, if you want the other blocks on the page to be evaluated on the build system (e.g. for assertion checks). Implicit plt.clf() (clear plot) call The show function applied to a pyplot will call plt.clear() after having created the svg. This is necessary since we exec the lp code in process (of the mkdocs build but also mkdocs serve). For serve this is a problem since subsequent runs after page edits will therefore remember the imported pyplot module, with all state. If you do NOT want to clear the plot but subsequently further extend it, then add clf=False : show(plt, clf=False) typeof start_lc === \"undefined\" ? 0 : start_lc()","title":"Matplotlib Rendering Support"},{"location":"features/lp/python/mpl_pyplot/#matplotlib-rendering-support","text":"Matplotlib Support. See here for the vast amount of matplotlib's plotting features.","title":"Matplotlib  Rendering Support"},{"location":"features/lp/python/mpl_pyplot/#requirements","text":"You need to have pip/conda install matplotlib and optionally also pip/conda install numpy within your environment.","title":"Requirements"},{"location":"features/lp/python/mpl_pyplot/#examples","text":"Works within Admonitions LP Source: ``` python lp : python addsrc eval = always import matplotlib.pyplot as plt import numpy as np x = np . linspace ( 0 , 2 , 100 ) plt . plot ( x , x , label = 'linear' ) plt . plot ( x , x ** 2 , label = 'quadratic' ) plt . plot ( x , x ** 3 , label = 'cubic' ) plt . xlabel ( 'x label' ) plt . ylabel ( 'y label' ) plt . title ( \"Simple Plot\" ) plt . legend () show ( plt , fn = 'img/testplot.svg' ) show ( '??? hint \"You can create *markdown* via the `show()` function\"' ) show ( ' this was created from the python block' ) ``` Result: You can create markdown via the show() function this was created from the python block The plot is created as svg directly into your html site directory, i.e. will not show up within your docs tree. If for some reason you can not create the svg on the system where you build your docs: supply a fn (filename) argument to the show function, relative to your page, e.g. show(plt, fn='img/myplot') . This will result in the plot created within your docs dir, so that you can commit it, from a system, where you can build the docs. commit the cache file optionally, set the eval policy to always page wide, and to on_change for the block, if you want the other blocks on the page to be evaluated on the build system (e.g. for assertion checks). Implicit plt.clf() (clear plot) call The show function applied to a pyplot will call plt.clear() after having created the svg. This is necessary since we exec the lp code in process (of the mkdocs build but also mkdocs serve). For serve this is a problem since subsequent runs after page edits will therefore remember the imported pyplot module, with all state. If you do NOT want to clear the plot but subsequently further extend it, then add clf=False : show(plt, clf=False) typeof start_lc === \"undefined\" ? 0 : start_lc()","title":"Examples"},{"location":"features/lp/python/project_dependencies/","text":"@media only screen and (min-width: 76.25em) { .md-main__inner { max-width: none; } .md-sidebar--primary { left: 0; } .md-sidebar--secondary { right: 0; margin-left: 0; -webkit-transform: none; transform: none; } } Project Dependencies \u00a4 Scans a poetry lock file and extracts all project dependencies. Creates CREDITS.md based on a poetry lock file, i.e. currently requires poetry as a build system Heavily based on the work of \"pawamoy\" . Example: This repo's Credits Page . Usage \u00a4 `lp:python show=project_dependencies` typeof start_lc === \"undefined\" ? 0 : start_lc()","title":"Project Dependencies"},{"location":"features/lp/python/project_dependencies/#project-dependencies","text":"Scans a poetry lock file and extracts all project dependencies. Creates CREDITS.md based on a poetry lock file, i.e. currently requires poetry as a build system Heavily based on the work of \"pawamoy\" . Example: This repo's Credits Page .","title":"Project Dependencies "},{"location":"features/lp/python/project_dependencies/#usage","text":"`lp:python show=project_dependencies` typeof start_lc === \"undefined\" ? 0 : start_lc()","title":"Usage"},{"location":"features/lp/python/screenshot/","text":"@media only screen and (min-width: 76.25em) { .md-main__inner { max-width: none; } .md-sidebar--primary { left: 0; } .md-sidebar--secondary { right: 0; margin-left: 0; -webkit-transform: none; transform: none; } } Screenshots \u00a4 Creates screenshots for URLs, using chrome-remote-interface Source from here . Requirements \u00a4 chrome based browser, with path exported as $browser or \"$BROWSER\" node executable. We check $nodejs path variable with preference npm install -g chrome-remote-interface minimist (small libs to address the remote interface) Example \u00a4 LP Source: ``` python lp : python addsrc show ( \"screenshot\" , url = \"https://github.com\" , width = 600 , height = 400 ) ``` Result: Parameters \u00a4 Besides url : Code delay = 0 , # wait this long before shots (setTimeout param) force = False , # overwrite if shot exists format = 'png' , # or jpeg height = 900 , # height or chrome window when fetching the URL into = 'img' , # directory to put the screenshot into, relative to page port = 9922 , # port of chrome remote interface width = 1440 , # width of chrome window https://github.com/axiros/docutools/blob/master/src/lcdoc/mkdocs/lp/plugs/python/pyplugs/screenshot/__init__.py#L20 Can run on CI/CD The headless mode of the browser makes it possible to have the screenshooter be running on CI/CD as well, i.e. without a graphical environment. Then you may git ignore the img/http* images or set the force flag. typeof start_lc === \"undefined\" ? 0 : start_lc()","title":"Screenshots"},{"location":"features/lp/python/screenshot/#screenshots","text":"Creates screenshots for URLs, using chrome-remote-interface Source from here .","title":"Screenshots "},{"location":"features/lp/python/screenshot/#requirements","text":"chrome based browser, with path exported as $browser or \"$BROWSER\" node executable. We check $nodejs path variable with preference npm install -g chrome-remote-interface minimist (small libs to address the remote interface)","title":"Requirements"},{"location":"features/lp/python/screenshot/#example","text":"LP Source: ``` python lp : python addsrc show ( \"screenshot\" , url = \"https://github.com\" , width = 600 , height = 400 ) ``` Result:","title":"Example"},{"location":"features/lp/python/screenshot/#parameters","text":"Besides url : Code delay = 0 , # wait this long before shots (setTimeout param) force = False , # overwrite if shot exists format = 'png' , # or jpeg height = 900 , # height or chrome window when fetching the URL into = 'img' , # directory to put the screenshot into, relative to page port = 9922 , # port of chrome remote interface width = 1440 , # width of chrome window https://github.com/axiros/docutools/blob/master/src/lcdoc/mkdocs/lp/plugs/python/pyplugs/screenshot/__init__.py#L20 Can run on CI/CD The headless mode of the browser makes it possible to have the screenshooter be running on CI/CD as well, i.e. without a graphical environment. Then you may git ignore the img/http* images or set the force flag. typeof start_lc === \"undefined\" ? 0 : start_lc()","title":"Parameters"},{"location":"features/md-replace/","text":"@media only screen and (min-width: 76.25em) { .md-main__inner { max-width: none; } .md-sidebar--primary { left: 0; } .md-sidebar--secondary { right: 0; margin-left: 0; -webkit-transform: none; transform: none; } } :root { --md-admonition-icon--developer-tip: url('data:image/svg+xml;charset=utf-8,<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 448 512\"><!--! Font Awesome Free 6.0.0 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) Copyright 2022 Fonticons, Inc.--><path d=\"M120.12 208.29c-3.88-2.9-7.77-4.35-11.65-4.35H91.03v104.47h17.45c3.88 0 7.77-1.45 11.65-4.35 3.88-2.9 5.82-7.25 5.82-13.06v-69.65c-.01-5.8-1.96-10.16-5.83-13.06zM404.1 32H43.9C19.7 32 .06 51.59 0 75.8v360.4C.06 460.41 19.7 480 43.9 480h360.2c24.21 0 43.84-19.59 43.9-43.8V75.8c-.06-24.21-19.7-43.8-43.9-43.8zM154.2 291.19c0 18.81-11.61 47.31-48.36 47.25h-46.4V172.98h47.38c35.44 0 47.36 28.46 47.37 47.28l.01 70.93zm100.68-88.66H201.6v38.42h32.57v29.57H201.6v38.41h53.29v29.57h-62.18c-11.16.29-20.44-8.53-20.72-19.69V193.7c-.27-11.15 8.56-20.41 19.71-20.69h63.19l-.01 29.52zm103.64 115.29c-13.2 30.75-36.85 24.63-47.44 0l-38.53-144.8h32.57l29.71 113.72 29.57-113.72h32.58l-38.46 144.8z\"/></svg>') } .md-typeset .admonition.developer-tip, .md-typeset details.developer-tip { border-color: rgb(139, 209, 36); } .md-typeset .developer-tip > .admonition-title, .md-typeset .developer-tip > summary { background-color: rgba(139, 209, 36, 0.1); border-color: rgb(139, 209, 36); } .md-typeset .developer-tip > .admonition-title::before, .md-typeset .developer-tip > summary::before { background-color: rgb(139, 209, 36); -webkit-mask-image: var(--md-admonition-icon--developer-tip); mask-image: var(--md-admonition-icon--developer-tip); } Markdown Replace \u00a4 Allows to add replacements into the markdown source, which are replaced by values or function call results, given by a hot reloaded configurable python module. Usage: lcd-md-replace You set up replacements in a python file (default is: docs/mdreplace.py ), which must have a table attribute, either dict or callable. When callable it will be called with the mkdocs config and must return a replacement dict. Features \u00a4 The values of the replacement dict can themselves be callable, and if so, are called at replacement time with contextual information: replace ( mdblock = md , plugin = self , plugin_file = __file__ , config = config , page = page , markdown = markdown , ) If the callable does not require kw args (e.g. time.ctime ) we will not pass them The callable can return a replacement for the whole line, by returning a dict like {'line': ....} , i.e. with a \"line\" key. The callable can also return content added to top and bottom of the markdown (e.g. for style defs), in the returned dict. Keys are markdown_header , markdown_footer . See e.g. admons.py If the replace values are lists (also as returned by the callable), they will be properly indented as multiline text. Controlling Replacements Within Fenced Blocks \u00a4 fenced blocks are omitted EXCEPT: if the replacement key is specified like this key:all: - then even :key: in fenced blocks is replaced Always Present Keys \u00a4 :head: :foot: These keys (with the colons) will always be found, on any page - you can insert e.g. page level styles. ???? \"Example\" Say we wanted *every* page to have the full width style. Instead of inserting everywhere the `:cssfullwidth:` builtin (see below), we add this into our custom `mdreplace.py`: ``` python from lcdoc.mkdocs.replace import BuiltInReplacements as BI table = { ':head:' : BI.cssfullwidth, 'foo' : ... ``` Config \u00a4 seperator : ':' by default. Example: ':curtime:' , for {\"cur_time\": time.ctime} based replacements. replacement_file : when not starting with '/' we'll prefix with docs_dir. Default: \"mdreplace.py\" Built in Replacments \u00a4 Some keys are hardwired (can be overwritten though, within your replacement module): Code class css : def csspdf ( ** kw ): \"\"\" No loose headers in pdf print outs via a CSS hack. (page-break-after:avoid not supported in browsers) \"\"\" s = ''' @page { size: A4; } @media print { body { font-family: Arial, Helvetica, sans-serif; } h2,h3,h4 { page-break-inside: avoid; } h2::after,h3::after { content: \"\"; display: block; height: 200px; margin-bottom: -200px; } h4::after,h5::after { content: \"\"; display: block; height: 100px; margin-bottom: -100px; } } ''' return style ( s ) # this widens the content on big screens to full width: width = lambda max_width = 'none' , min_width = '76.25em' : style ( f ''' @media only screen and (min-width: { min_width } ) {{ .md-main__inner {{ max-width: { max_width } ; }} .md-sidebar--primary {{ left: 0; }} .md-sidebar--secondary {{ right: 0; margin-left: 0; -webkit-transform: none; transform: none; }} }} ''' ) fullwidth = width ( max_width = 'none' , min_width = '76.25em' ) class BuiltInReplacements ( css ): # inserts the current time at process start: ctime = time . strftime ( ' %a , %d %b %Y %Hh GMT' , time . localtime ()) def pthbase ( page , ** kw ): \"\"\"Relative path to base. Add media to docs/img/foo.svg and say: <img src=\":pthbase:img/foo.svg\" /> \"\"\" l = page . url . split ( '/' ) return '../' * ( len ( l ) - 1 ) def srcref ( ** kw ): \"\"\"Finds and links source code Examples: :srcref:src/lcdoc/mkdocs/replace/__init__.py :srcref:fn=src/lcdoc/mkdocs/replace/__init__.py :srcref:src/lcdoc/mkdocs/replace/__init__.py=somematch :srcref:fn=src/lcdoc/mkdocs/replace/__init__.py,m=built_in_replacements,t=hardwired \"\"\" line = kw [ 'line' ] fn = line . split ( ':srcref:' , 1 )[ 1 ] . split ( ' ' , 1 )[ 0 ] if fn [ - 1 ] in { ',' , ')' , ']' , '}' }: fn = fn [: - 1 ] repl = ':srcref:' + fn if not ',' in fn : if '=' in fn : l = fn . split ( '=' ) if l [ 0 ] == 'fn' : spec = { 'fn' : l [ 1 ]} else : spec = { 'fn' : l [ 0 ], 'm' : l [ 1 ]} else : spec = { 'fn' : fn } else : try : spec = dict ([ kv . split ( '=' , 1 ) for kv in fn . split ( ',' )]) except Exception as ex : app . error ( 'inline_srclink failed' , line = line , page = kw [ 'page' ]) return { 'line' : line } spec [ 't' ] = spec . get ( 't' , '` %s `' % spec [ 'fn' ]) # title default: file path if spec [ 't' ] == 'm' : spec [ 't' ] = spec [ 'm' ] # if 'changelog' in line: breakpoint() # FIXME BREAKPOINT l = srclink ( spec [ 'fn' ], kw [ 'config' ], match = spec . get ( 'm' ), title = spec [ 't' ]) return { 'line' : line . replace ( repl , l [ 'link' ])} https://github.com/axiros/docutools/blob/master/src/lcdoc/mkdocs/replace/__init__.py#L71 Example \u00a4 This repo's docs/mdreplace.py . Here is a srcref usage example with title and match string: :srcref:fn=src/lcdoc/lp.py,m=remote_content,t=mytitle We find the first occurance of the match string (m=...) in the file and link to it with given title (t=...): Result: mytitle Custom Admonitions \u00a4 Based on these instructions, we provide straightforward custom admonitions via this plugin. Example: !!! note Begin !!! :dev: \"My Developer Tip\" Some notes for developers.... End renders: Note Begin \"My Developer Tip\" Some notes for developers.... End Currently the following custom admonitions are defined out of the box: LP Source: ``` python lp : python addsrc import json from lcdoc.mkdocs.replace.admons import cust_admons print ( json . dumps ( cust_admons , indent = 4 )) ``` Result: { \"dev\" : { \"title\" : \"Developer Tip\" , \"ico\" : \"fontawesome/brands/dev.svg\" , \"col\" : \"rgb(139, 209, 36)\" } } How To Add a Custom Admonition \u00a4 In your mdreplace file: from lcdoc.mkdocs.replace import admons # add ours to the predefined ones: ico = '<svg ....' # raw svg from anywhere. ico = 'https://twemoji.maxcdn.com/v/latest/svg/1f4f7.svg' # url ico = 'material/camera-account.svg' # file in your site-directories/material/.icons admons . cust_admons [ 'myadmon' ] = dict ( title = \"My Default Title\" , ico = ico , col = 'rgb(0, 0, 255)' , [ bgcol = rgba ... ]) table = { ... } # our other replace defs table . update ( admons . admons ( 'dev' , 'myadmon' , ... )) See also the mdreplace.py file in this repo. The style definition is added once into your page, per used custom admonition. We do not interfere with any custom style definition in your project. typeof start_lc === \"undefined\" ? 0 : start_lc()","title":"Markdown Replace"},{"location":"features/md-replace/#markdown-replace","text":"Allows to add replacements into the markdown source, which are replaced by values or function call results, given by a hot reloaded configurable python module. Usage: lcd-md-replace You set up replacements in a python file (default is: docs/mdreplace.py ), which must have a table attribute, either dict or callable. When callable it will be called with the mkdocs config and must return a replacement dict.","title":"Markdown Replace"},{"location":"features/md-replace/#features","text":"The values of the replacement dict can themselves be callable, and if so, are called at replacement time with contextual information: replace ( mdblock = md , plugin = self , plugin_file = __file__ , config = config , page = page , markdown = markdown , ) If the callable does not require kw args (e.g. time.ctime ) we will not pass them The callable can return a replacement for the whole line, by returning a dict like {'line': ....} , i.e. with a \"line\" key. The callable can also return content added to top and bottom of the markdown (e.g. for style defs), in the returned dict. Keys are markdown_header , markdown_footer . See e.g. admons.py If the replace values are lists (also as returned by the callable), they will be properly indented as multiline text.","title":"Features"},{"location":"features/md-replace/#controlling-replacements-within-fenced-blocks","text":"fenced blocks are omitted EXCEPT: if the replacement key is specified like this key:all: - then even :key: in fenced blocks is replaced","title":"Controlling Replacements Within Fenced Blocks"},{"location":"features/md-replace/#always-present-keys","text":":head: :foot: These keys (with the colons) will always be found, on any page - you can insert e.g. page level styles. ???? \"Example\" Say we wanted *every* page to have the full width style. Instead of inserting everywhere the `:cssfullwidth:` builtin (see below), we add this into our custom `mdreplace.py`: ``` python from lcdoc.mkdocs.replace import BuiltInReplacements as BI table = { ':head:' : BI.cssfullwidth, 'foo' : ... ```","title":"Always Present Keys"},{"location":"features/md-replace/#config","text":"seperator : ':' by default. Example: ':curtime:' , for {\"cur_time\": time.ctime} based replacements. replacement_file : when not starting with '/' we'll prefix with docs_dir. Default: \"mdreplace.py\"","title":"Config"},{"location":"features/md-replace/#built-in-replacments","text":"Some keys are hardwired (can be overwritten though, within your replacement module): Code class css : def csspdf ( ** kw ): \"\"\" No loose headers in pdf print outs via a CSS hack. (page-break-after:avoid not supported in browsers) \"\"\" s = ''' @page { size: A4; } @media print { body { font-family: Arial, Helvetica, sans-serif; } h2,h3,h4 { page-break-inside: avoid; } h2::after,h3::after { content: \"\"; display: block; height: 200px; margin-bottom: -200px; } h4::after,h5::after { content: \"\"; display: block; height: 100px; margin-bottom: -100px; } } ''' return style ( s ) # this widens the content on big screens to full width: width = lambda max_width = 'none' , min_width = '76.25em' : style ( f ''' @media only screen and (min-width: { min_width } ) {{ .md-main__inner {{ max-width: { max_width } ; }} .md-sidebar--primary {{ left: 0; }} .md-sidebar--secondary {{ right: 0; margin-left: 0; -webkit-transform: none; transform: none; }} }} ''' ) fullwidth = width ( max_width = 'none' , min_width = '76.25em' ) class BuiltInReplacements ( css ): # inserts the current time at process start: ctime = time . strftime ( ' %a , %d %b %Y %Hh GMT' , time . localtime ()) def pthbase ( page , ** kw ): \"\"\"Relative path to base. Add media to docs/img/foo.svg and say: <img src=\":pthbase:img/foo.svg\" /> \"\"\" l = page . url . split ( '/' ) return '../' * ( len ( l ) - 1 ) def srcref ( ** kw ): \"\"\"Finds and links source code Examples: :srcref:src/lcdoc/mkdocs/replace/__init__.py :srcref:fn=src/lcdoc/mkdocs/replace/__init__.py :srcref:src/lcdoc/mkdocs/replace/__init__.py=somematch :srcref:fn=src/lcdoc/mkdocs/replace/__init__.py,m=built_in_replacements,t=hardwired \"\"\" line = kw [ 'line' ] fn = line . split ( ':srcref:' , 1 )[ 1 ] . split ( ' ' , 1 )[ 0 ] if fn [ - 1 ] in { ',' , ')' , ']' , '}' }: fn = fn [: - 1 ] repl = ':srcref:' + fn if not ',' in fn : if '=' in fn : l = fn . split ( '=' ) if l [ 0 ] == 'fn' : spec = { 'fn' : l [ 1 ]} else : spec = { 'fn' : l [ 0 ], 'm' : l [ 1 ]} else : spec = { 'fn' : fn } else : try : spec = dict ([ kv . split ( '=' , 1 ) for kv in fn . split ( ',' )]) except Exception as ex : app . error ( 'inline_srclink failed' , line = line , page = kw [ 'page' ]) return { 'line' : line } spec [ 't' ] = spec . get ( 't' , '` %s `' % spec [ 'fn' ]) # title default: file path if spec [ 't' ] == 'm' : spec [ 't' ] = spec [ 'm' ] # if 'changelog' in line: breakpoint() # FIXME BREAKPOINT l = srclink ( spec [ 'fn' ], kw [ 'config' ], match = spec . get ( 'm' ), title = spec [ 't' ]) return { 'line' : line . replace ( repl , l [ 'link' ])} https://github.com/axiros/docutools/blob/master/src/lcdoc/mkdocs/replace/__init__.py#L71","title":"Built in Replacments"},{"location":"features/md-replace/#example","text":"This repo's docs/mdreplace.py . Here is a srcref usage example with title and match string: :srcref:fn=src/lcdoc/lp.py,m=remote_content,t=mytitle We find the first occurance of the match string (m=...) in the file and link to it with given title (t=...): Result: mytitle","title":"Example"},{"location":"features/md-replace/#custom-admonitions","text":"Based on these instructions, we provide straightforward custom admonitions via this plugin. Example: !!! note Begin !!! :dev: \"My Developer Tip\" Some notes for developers.... End renders: Note Begin \"My Developer Tip\" Some notes for developers.... End Currently the following custom admonitions are defined out of the box: LP Source: ``` python lp : python addsrc import json from lcdoc.mkdocs.replace.admons import cust_admons print ( json . dumps ( cust_admons , indent = 4 )) ``` Result: { \"dev\" : { \"title\" : \"Developer Tip\" , \"ico\" : \"fontawesome/brands/dev.svg\" , \"col\" : \"rgb(139, 209, 36)\" } }","title":"Custom Admonitions"},{"location":"features/md-replace/#how-to-add-a-custom-admonition","text":"In your mdreplace file: from lcdoc.mkdocs.replace import admons # add ours to the predefined ones: ico = '<svg ....' # raw svg from anywhere. ico = 'https://twemoji.maxcdn.com/v/latest/svg/1f4f7.svg' # url ico = 'material/camera-account.svg' # file in your site-directories/material/.icons admons . cust_admons [ 'myadmon' ] = dict ( title = \"My Default Title\" , ico = ico , col = 'rgb(0, 0, 255)' , [ bgcol = rgba ... ]) table = { ... } # our other replace defs table . update ( admons . admons ( 'dev' , 'myadmon' , ... )) See also the mdreplace.py file in this repo. The style definition is added once into your page, per used custom admonition. We do not interfere with any custom style definition in your project. typeof start_lc === \"undefined\" ? 0 : start_lc()","title":"How To Add a Custom Admonition"},{"location":"features/page-tree/","text":"@media only screen and (min-width: 76.25em) { .md-main__inner { max-width: none; } .md-sidebar--primary { left: 0; } .md-sidebar--secondary { right: 0; margin-left: 0; -webkit-transform: none; transform: none; } } Page Tree \u00a4 Usage: lcd-page-tree Features \u00a4 The Next page link is now consisting of a breadcrumb style hirarchy of links. The big link areas for previous and next are still kept, when not exactly over such a breadcrumb link. Mechanics \u00a4 The logical tree with links is built in the on_pre_page hook. The display is controlled by a custom footer.html partial. Brutally Hammering our footer.html in The plugin, when activated, will write partials/footer.html into the first directory in the mkdocs config['theme'].dirs list. This directory is either your custom theme , when you configured one OR the mkdocs material dir In both(!) cases we backup any existing footer.html and then write ours into that dir. typeof start_lc === \"undefined\" ? 0 : start_lc()","title":"Page Tree"},{"location":"features/page-tree/#page-tree","text":"Usage: lcd-page-tree","title":"Page Tree "},{"location":"features/page-tree/#features","text":"The Next page link is now consisting of a breadcrumb style hirarchy of links. The big link areas for previous and next are still kept, when not exactly over such a breadcrumb link.","title":"Features"},{"location":"features/page-tree/#mechanics","text":"The logical tree with links is built in the on_pre_page hook. The display is controlled by a custom footer.html partial. Brutally Hammering our footer.html in The plugin, when activated, will write partials/footer.html into the first directory in the mkdocs config['theme'].dirs list. This directory is either your custom theme , when you configured one OR the mkdocs material dir In both(!) cases we backup any existing footer.html and then write ours into that dir. typeof start_lc === \"undefined\" ? 0 : start_lc()","title":"Mechanics"},{"location":"features/stats/","text":"@media only screen and (min-width: 76.25em) { .md-main__inner { max-width: none; } .md-sidebar--primary { left: 0; } .md-sidebar--secondary { right: 0; margin-left: 0; -webkit-transform: none; transform: none; } } Stats \u00a4 Usage: lcd-stats Writes collected stats to a file or stdout after build, intended for consolidation e.g. with jq Presents deviations Runs a post build simple consolidation of major log events, presents them and triggers a build break at presence of log with severity higher than a configurable value Important You have to enable this plugin, when you want LP build breaks on CI based on lcd plugin log errors or higher severity. Mechanics \u00a4 All hooks of plugins inheriting from lcdoc.mkdocs.MDPlugin are wrapped into a decorator, which sets a named stats dict into them, so they can just set counters and metrics into those dicts. customizes their logging When the hooks are page hooks we set the stats dicts per page. Config \u00a4 Code C = config_options.Choice log_maj = lambda d, C=C: C(['warning', 'error', 'fatal', 'none'], default=d) config_scheme = ( # if not starting with \"/\": relative to project root. # for stdout: set file=\"-\" ('dump_stats', config_options.Type(str, default='build/lcd-stats.json')), # round floats to this precision: ('round_digits', config_options.Type(int, default=2)), # omit zero values: ('filter_0', config_options.Type(bool, default=True)), # helpfull to see changes at serve ('print_diff', config_options.Type(bool, default=True)), # write the logs as json (same dir than fn) ('dump_logs', config_options.Type(str, default='build/lcd-logs.json')), # print all logs from this level again at end of build: ('repeat_major_log_events', log_maj('warning')), # fail mkdocs build on errors, you don't want broken docs published: ('fail_build_on_log_events', log_maj('error')), ) https://github.com/axiros/docutools/blob/master/src/lcdoc/mkdocs/stats/__init__.py#L100 Stats Output \u00a4 On config setting dump_stats , we will dump all stats to the configured file Example Output \u00a4 $ cat $LP_PROJECT_ROOT /build/lcd-stats.json | head -n 20 || true # on CI the first run will have no such file { \"Filtered_0_Values\" : 542 , \"Global.LPPlugin.on_config.LP_env_vars\" : 4 , \"Global.MDFindPagesPlugin.on_config.find_terms\" : 1 , \"Global.MDFindPagesPlugin.on_config.matching\" : 39 , \"Log.debug\" : 583 , \"Log.info\" : 103 , \"Log.warning\" : 5 , \"Pages.LPPlugin.on_page_markdown.Overview.blocks_evaled\" : 4 , \"Pages.LPPlugin.on_page_markdown.Overview.blocks_max_time\" : 0 .53, \"Pages.LPPlugin.on_page_markdown.Overview.blocks_total\" : 4 , \"Pages.LPPlugin.on_page_markdown.Overview.dt\" : 0 .65, \"Pages.LPPlugin.on_page_markdown.about/changelog/Changelog.blocks_evaled\" : 1 , \"Pages.LPPlugin.on_page_markdown.about/changelog/Changelog.blocks_max_time\" : 0 .06, \"Pages.LPPlugin.on_page_markdown.about/changelog/Changelog.blocks_total\" : 1 , \"Pages.LPPlugin.on_page_markdown.about/changelog/Changelog.dt\" : 0 .06, \"Pages.LPPlugin.on_page_markdown.about/coverage/Coverage.blocks_evaled\" : 2 , \"Pages.LPPlugin.on_page_markdown.about/coverage/Coverage.blocks_total\" : 2 , \"Pages.LPPlugin.on_page_markdown.about/credits/Credits.blocks_evaled\" : 1 , \"Pages.LPPlugin.on_page_markdown.about/credits/Credits.blocks_max_time\" : 1 .8, Diff Output \u00a4 We keep the stats from the last run and compare at every build, logging the diff. Example: Post build output diff after adding an LP block INFO - Stats changes since last run [ StatsPlugin ] { \"added\" : { \"Pages.LPPlugin.on_page_markdown.features/mypage/My Page.blocks_evaled\" : 1 , \"Pages.LPPlugin.on_page_markdown.features/mypage/My Page.blocks_total\" : 1 }, \"changed\" : { \"Log.debug\" : [ 144 , 145 ], \"Log.info\" : [ 8 , 9 ] } } Logging \u00a4 $ignore_err \u00a4 mkdocs build will fail at error levels including and above error . You can lower error logs by setting $ignore_err , matching the log message to be lowered from error (or higher) to just warning . Example: In ci.yml: env : ignore_err : \"No coverage files\" Log Dumps \u00a4 On config setting dump_logs , we will dump all created logs in line-sep json form to the given file (backing up the previous one) Tip The output of debug level logging is often overwhelming and inter build changes are hard to see, but you'll see a change of log statement counts in the diff. If you are interested in why log counts changed you can diff the previous logs output with the current one. Warning Some \"expensive\" debug logs are not even sent to the logging system, when level is info or higher. Those logs cannot occur in the log dumps then. In order to get really all possible debug logs, you have to run mkdocs with -v . Example Output \u00a4 $ cat $LP_PROJECT_ROOT /build/lcd-logs.json | head -n 20 || true # on CI the first run will have no such file [ 0 , 20 , \"lcd\" , \"Ran reset, cleared stats\" , { \"reset\" : true, \"utc\" : \"20220411T145504Z\" , \"unix\" : 1649688904 }] [ 290 , 10 , \"Blacklist\" , \"BlacklistPlugin.on_config\" ] [ 290 , 10 , \"Blacklist\" , \"No $blacklisted_words to check for blacklisted words\" ] [ 290 , 10 , \"LP\" , \"LPPlugin.on_config\" ] [ 295 , 20 , \"LP\" , \"Plugs doc symlink created\" ] [ 302 , 30 , \"LP\" , \"Linking\" , { \"frm\" : \"/home/runner/work/docutools/docutools/src/lcdoc/mkdocs/lp/assets\" , \"to\" : \"/home/runner/work/docutools/docutools/docs/lcd/lp\" }] [ 306 , 10 , \"LP\" , \"Added assets\" , { \"typ\" : \"css\" , \"count\" : 1 , \"dir\" : \"/home/runner/work/docutools/docutools/docs/lcd/lp/css\" }] [ 306 , 10 , \"LP\" , \"Added assets\" , { \"typ\" : \"javascript\" , \"count\" : 8 , \"dir\" : \"/home/runner/work/docutools/docutools/docs/lcd/lp/javascript\" }] [ 306 , 10 , \"LP\" , \"From environ\" , { \"key\" : \"DOCU_FILE\" , \"value\" : \"init\" }] [ 306 , 10 , \"LP\" , \"From environ\" , { \"key\" : \"DOCU_DIR\" , \"value\" : \"\" }] [ 306 , 10 , \"LP\" , \"From environ\" , { \"key\" : \"DOCU_ROOT\" , \"value\" : \"/home/runner/work/docutools/docutools/docs\" }] [ 306 , 10 , \"LP\" , \"From environ\" , { \"key\" : \"PROJECT_ROOT\" , \"value\" : \"/home/runner/work/docutools/docutools\" }] [ 306 , 10 , \"MDFindPages\" , \"MDFindPagesPlugin.on_config\" ] [ 306 , 20 , \"LP\" , \"Assets for git changelog linked\" , { \"frm\" : \"/home/runner/work/docutools/docutools/src/lcdoc/mkdocs/lp/assets\" , \"to\" : \"/home/runner/work/docutools/docutools/docs/lcd/lp\" }] [ 317 , 20 , \"MDFindPages\" , \"Inserting 24 pages into nav\" ] [ 326 , 10 , \"PageTree\" , \"PageTreePlugin.on_config\" ] [ 326 , 30 , \"PageTree\" , \"Backing up original footer.html\" , { \"orig\" : \"/home/runner/miniconda3/envs/docutools_py3.7/lib/python3.7/site-packages/material/partials/footer.html\" , \"backup\" : \"/home/runner/miniconda3/envs/docutools_py3.7/lib/python3.7/site-packages/material/partials/footer.html.orig\" }] [ 327 , 30 , \"PageTree\" , \"Have written lcd-page-tree aware footer\" , { \"fn\" : \"/home/runner/work/docutools/docutools/src/lcdoc/assets/mkdocs/lcd/partials/footer.html\" }] [ 361 , 10 , \"MDReplace\" , \"MDReplacePlugin.on_pre_build\" ] [ 361 , 10 , \"MDReplace\" , \"Try loading replacement file\" , { \"fn\" : \"/home/runner/work/docutools/docutools/docs/mdreplace.py\" }] typeof start_lc === \"undefined\" ? 0 : start_lc()","title":"Stats"},{"location":"features/stats/#stats","text":"Usage: lcd-stats Writes collected stats to a file or stdout after build, intended for consolidation e.g. with jq Presents deviations Runs a post build simple consolidation of major log events, presents them and triggers a build break at presence of log with severity higher than a configurable value Important You have to enable this plugin, when you want LP build breaks on CI based on lcd plugin log errors or higher severity.","title":"Stats "},{"location":"features/stats/#mechanics","text":"All hooks of plugins inheriting from lcdoc.mkdocs.MDPlugin are wrapped into a decorator, which sets a named stats dict into them, so they can just set counters and metrics into those dicts. customizes their logging When the hooks are page hooks we set the stats dicts per page.","title":"Mechanics"},{"location":"features/stats/#config","text":"Code C = config_options.Choice log_maj = lambda d, C=C: C(['warning', 'error', 'fatal', 'none'], default=d) config_scheme = ( # if not starting with \"/\": relative to project root. # for stdout: set file=\"-\" ('dump_stats', config_options.Type(str, default='build/lcd-stats.json')), # round floats to this precision: ('round_digits', config_options.Type(int, default=2)), # omit zero values: ('filter_0', config_options.Type(bool, default=True)), # helpfull to see changes at serve ('print_diff', config_options.Type(bool, default=True)), # write the logs as json (same dir than fn) ('dump_logs', config_options.Type(str, default='build/lcd-logs.json')), # print all logs from this level again at end of build: ('repeat_major_log_events', log_maj('warning')), # fail mkdocs build on errors, you don't want broken docs published: ('fail_build_on_log_events', log_maj('error')), ) https://github.com/axiros/docutools/blob/master/src/lcdoc/mkdocs/stats/__init__.py#L100","title":"Config"},{"location":"features/stats/#stats-output","text":"On config setting dump_stats , we will dump all stats to the configured file","title":"Stats Output"},{"location":"features/stats/#example-output","text":"$ cat $LP_PROJECT_ROOT /build/lcd-stats.json | head -n 20 || true # on CI the first run will have no such file { \"Filtered_0_Values\" : 542 , \"Global.LPPlugin.on_config.LP_env_vars\" : 4 , \"Global.MDFindPagesPlugin.on_config.find_terms\" : 1 , \"Global.MDFindPagesPlugin.on_config.matching\" : 39 , \"Log.debug\" : 583 , \"Log.info\" : 103 , \"Log.warning\" : 5 , \"Pages.LPPlugin.on_page_markdown.Overview.blocks_evaled\" : 4 , \"Pages.LPPlugin.on_page_markdown.Overview.blocks_max_time\" : 0 .53, \"Pages.LPPlugin.on_page_markdown.Overview.blocks_total\" : 4 , \"Pages.LPPlugin.on_page_markdown.Overview.dt\" : 0 .65, \"Pages.LPPlugin.on_page_markdown.about/changelog/Changelog.blocks_evaled\" : 1 , \"Pages.LPPlugin.on_page_markdown.about/changelog/Changelog.blocks_max_time\" : 0 .06, \"Pages.LPPlugin.on_page_markdown.about/changelog/Changelog.blocks_total\" : 1 , \"Pages.LPPlugin.on_page_markdown.about/changelog/Changelog.dt\" : 0 .06, \"Pages.LPPlugin.on_page_markdown.about/coverage/Coverage.blocks_evaled\" : 2 , \"Pages.LPPlugin.on_page_markdown.about/coverage/Coverage.blocks_total\" : 2 , \"Pages.LPPlugin.on_page_markdown.about/credits/Credits.blocks_evaled\" : 1 , \"Pages.LPPlugin.on_page_markdown.about/credits/Credits.blocks_max_time\" : 1 .8,","title":"Example Output"},{"location":"features/stats/#diff-output","text":"We keep the stats from the last run and compare at every build, logging the diff. Example: Post build output diff after adding an LP block INFO - Stats changes since last run [ StatsPlugin ] { \"added\" : { \"Pages.LPPlugin.on_page_markdown.features/mypage/My Page.blocks_evaled\" : 1 , \"Pages.LPPlugin.on_page_markdown.features/mypage/My Page.blocks_total\" : 1 }, \"changed\" : { \"Log.debug\" : [ 144 , 145 ], \"Log.info\" : [ 8 , 9 ] } }","title":"Diff Output"},{"location":"features/stats/#logging","text":"","title":"Logging"},{"location":"features/stats/#ignore_err","text":"mkdocs build will fail at error levels including and above error . You can lower error logs by setting $ignore_err , matching the log message to be lowered from error (or higher) to just warning . Example: In ci.yml: env : ignore_err : \"No coverage files\"","title":"$ignore_err"},{"location":"features/stats/#log-dumps","text":"On config setting dump_logs , we will dump all created logs in line-sep json form to the given file (backing up the previous one) Tip The output of debug level logging is often overwhelming and inter build changes are hard to see, but you'll see a change of log statement counts in the diff. If you are interested in why log counts changed you can diff the previous logs output with the current one. Warning Some \"expensive\" debug logs are not even sent to the logging system, when level is info or higher. Those logs cannot occur in the log dumps then. In order to get really all possible debug logs, you have to run mkdocs with -v .","title":"Log Dumps"},{"location":"features/stats/#example-output_1","text":"$ cat $LP_PROJECT_ROOT /build/lcd-logs.json | head -n 20 || true # on CI the first run will have no such file [ 0 , 20 , \"lcd\" , \"Ran reset, cleared stats\" , { \"reset\" : true, \"utc\" : \"20220411T145504Z\" , \"unix\" : 1649688904 }] [ 290 , 10 , \"Blacklist\" , \"BlacklistPlugin.on_config\" ] [ 290 , 10 , \"Blacklist\" , \"No $blacklisted_words to check for blacklisted words\" ] [ 290 , 10 , \"LP\" , \"LPPlugin.on_config\" ] [ 295 , 20 , \"LP\" , \"Plugs doc symlink created\" ] [ 302 , 30 , \"LP\" , \"Linking\" , { \"frm\" : \"/home/runner/work/docutools/docutools/src/lcdoc/mkdocs/lp/assets\" , \"to\" : \"/home/runner/work/docutools/docutools/docs/lcd/lp\" }] [ 306 , 10 , \"LP\" , \"Added assets\" , { \"typ\" : \"css\" , \"count\" : 1 , \"dir\" : \"/home/runner/work/docutools/docutools/docs/lcd/lp/css\" }] [ 306 , 10 , \"LP\" , \"Added assets\" , { \"typ\" : \"javascript\" , \"count\" : 8 , \"dir\" : \"/home/runner/work/docutools/docutools/docs/lcd/lp/javascript\" }] [ 306 , 10 , \"LP\" , \"From environ\" , { \"key\" : \"DOCU_FILE\" , \"value\" : \"init\" }] [ 306 , 10 , \"LP\" , \"From environ\" , { \"key\" : \"DOCU_DIR\" , \"value\" : \"\" }] [ 306 , 10 , \"LP\" , \"From environ\" , { \"key\" : \"DOCU_ROOT\" , \"value\" : \"/home/runner/work/docutools/docutools/docs\" }] [ 306 , 10 , \"LP\" , \"From environ\" , { \"key\" : \"PROJECT_ROOT\" , \"value\" : \"/home/runner/work/docutools/docutools\" }] [ 306 , 10 , \"MDFindPages\" , \"MDFindPagesPlugin.on_config\" ] [ 306 , 20 , \"LP\" , \"Assets for git changelog linked\" , { \"frm\" : \"/home/runner/work/docutools/docutools/src/lcdoc/mkdocs/lp/assets\" , \"to\" : \"/home/runner/work/docutools/docutools/docs/lcd/lp\" }] [ 317 , 20 , \"MDFindPages\" , \"Inserting 24 pages into nav\" ] [ 326 , 10 , \"PageTree\" , \"PageTreePlugin.on_config\" ] [ 326 , 30 , \"PageTree\" , \"Backing up original footer.html\" , { \"orig\" : \"/home/runner/miniconda3/envs/docutools_py3.7/lib/python3.7/site-packages/material/partials/footer.html\" , \"backup\" : \"/home/runner/miniconda3/envs/docutools_py3.7/lib/python3.7/site-packages/material/partials/footer.html.orig\" }] [ 327 , 30 , \"PageTree\" , \"Have written lcd-page-tree aware footer\" , { \"fn\" : \"/home/runner/work/docutools/docutools/src/lcdoc/assets/mkdocs/lcd/partials/footer.html\" }] [ 361 , 10 , \"MDReplace\" , \"MDReplacePlugin.on_pre_build\" ] [ 361 , 10 , \"MDReplace\" , \"Try loading replacement file\" , { \"fn\" : \"/home/runner/work/docutools/docutools/docs/mdreplace.py\" }] typeof start_lc === \"undefined\" ? 0 : start_lc()","title":"Example Output"},{"location":"features/termcasts/","text":"@media only screen and (min-width: 76.25em) { .md-main__inner { max-width: none; } .md-sidebar--primary { left: 0; } .md-sidebar--secondary { right: 0; margin-left: 0; -webkit-transform: none; transform: none; } } Termcasts \u00a4 (tbd) typeof start_lc === \"undefined\" ? 0 : start_lc()","title":"TermCasts"},{"location":"features/termcasts/#termcasts","text":"(tbd) typeof start_lc === \"undefined\" ? 0 : start_lc()","title":"Termcasts"}]}